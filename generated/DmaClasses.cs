/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.8, using .NET Server 3.2.0 template (version 0)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**
**     Generated by gresser <enrico.gresser@brand.de>
** </auto-generated>
**
** Copyright (c) 2006-2023 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://spectaris.de/DynamicMechanicalAnalyzer/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
** Created: 25.03.2023
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using ;
using UnifiedAutomation.Lads;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;

namespace Netzsch.Dma
{
    #region DynamicMechanicalAnalyzerDeviceModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.DynamicMechanicalAnalyzerDeviceType, NamespaceUri=Netzsch.Dma.Namespaces.Dma)]
    public partial class DynamicMechanicalAnalyzerDeviceModel : LADSDeviceModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicMechanicalAnalyzerDeviceModel" /> class.
        /// </summary>
        public DynamicMechanicalAnalyzerDeviceModel() : this((DynamicMechanicalAnalyzerDeviceModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicMechanicalAnalyzerDeviceModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public DynamicMechanicalAnalyzerDeviceModel(DynamicMechanicalAnalyzerDeviceModel template) : base(template)
        {
            if (template == null)
            {
                Components = new ComponentSetModel();
                FunctionalUnitSet = new FunctionalUnitSetModel();
                OperationCounters = new LADSOperationCountersModel();
            }
            else
            {
                Components = new ComponentSetModel(template.Components);
                DeviceHealth = template.DeviceHealth;
                DeviceManual = template.DeviceManual == null ? null : template.DeviceManual.Clone() as string;
                FunctionalUnitSet = new FunctionalUnitSetModel(template.FunctionalUnitSet);
                Manufacturer = template.Manufacturer == null ? null : template.Manufacturer.Clone() as LocalizedText;
                Model = template.Model == null ? null : template.Model.Clone() as LocalizedText;
                OperationCounters = new LADSOperationCountersModel(template.OperationCounters);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Components
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public new ComponentSetModel Components
        {
            get {return (ComponentSetModel) base.Components;}
            set {base.Components = value;}
        }

        /// <summary>
        /// Gets or sets the DeviceHealth
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new DeviceHealthEnumeration DeviceHealth
        {
            get {return (DeviceHealthEnumeration)(base.DeviceHealth.HasValue ? base.DeviceHealth : DeviceHealthEnumeration.NORMAL);}
            set {base.DeviceHealth = value;}
        }

        /// <summary>
        /// Gets or sets the DeviceManual
        /// </summary>
        /// <details>
        /// Address (pathname in the file system or a URL | Web address) of user manual for the device
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string DeviceManual
        {
            get {return (string)base.DeviceManual;}
            set {base.DeviceManual = value;}
        }

        /// <summary>
        /// Gets or sets the FunctionalUnitSet
        /// </summary>
        /// <details>
        /// Contains funtional units of this device.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new FunctionalUnitSetModel FunctionalUnitSet
        {
            get {return (FunctionalUnitSetModel) base.FunctionalUnitSet;}
            set {base.FunctionalUnitSet = value;}
        }

        /// <summary>
        /// Gets or sets the Manufacturer
        /// </summary>
        /// <details>
        /// Name of the company that manufactured the device
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new LocalizedText Manufacturer
        {
            get {return (LocalizedText)base.Manufacturer;}
            set {base.Manufacturer = value;}
        }

        /// <summary>
        /// Gets or sets the Model
        /// </summary>
        /// <details>
        /// Model name of the device
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new LocalizedText Model
        {
            get {return (LocalizedText)base.Model;}
            set {base.Model = value;}
        }

        /// <summary>
        /// Gets or sets the OperationCounters
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new LADSOperationCountersModel OperationCounters
        {
            get {return (LADSOperationCountersModel) base.OperationCounters;}
            set {base.OperationCounters = value;}
        }


        #endregion
    }
    #endregion


    #region DynamicMechanicalAnalyzerUnitModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.DynamicMechanicalAnalyzerUnitType, NamespaceUri=Netzsch.Dma.Namespaces.Dma)]
    public partial class DynamicMechanicalAnalyzerUnitModel : FunctionalUnitModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicMechanicalAnalyzerUnitModel" /> class.
        /// </summary>
        public DynamicMechanicalAnalyzerUnitModel() : this((DynamicMechanicalAnalyzerUnitModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicMechanicalAnalyzerUnitModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public DynamicMechanicalAnalyzerUnitModel(DynamicMechanicalAnalyzerUnitModel template) : base(template)
        {
            if (template == null)
            {
                FunctionSet = new FunctionSetModel();
                Operational = new FunctionalGroupModel();
                ProgramManager = new ProgramManagerModel();
                StateMachine = new FunctionalUnitStateMachineModel();
                SupportedPropertiesSet = new SupportedPropertiesSetType_();
            }
            else
            {
                FunctionSet = new FunctionSetModel(template.FunctionSet);
                Operational = new FunctionalGroupModel(template.Operational);
                ProgramManager = new ProgramManagerModel(template.ProgramManager);
                StateMachine = new FunctionalUnitStateMachineModel(template.StateMachine);
                SupportedPropertiesSet = new SupportedPropertiesSetType_(template.SupportedPropertiesSet);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the FunctionSet
        /// </summary>
        /// <details>
        /// Contains funtions of this functional unit.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new FunctionSetModel FunctionSet
        {
            get {return (FunctionSetModel) base.FunctionSet;}
            set {base.FunctionSet = value;}
        }

        /// <summary>
        /// Gets or sets the Operational
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new FunctionalGroupModel Operational
        {
            get {return (FunctionalGroupModel) base.Operational;}
            set {base.Operational = value;}
        }

        /// <summary>
        /// Gets or sets the ProgramManager
        /// </summary>
        /// <details>
        /// Manages programs and results of the functional-unit.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new ProgramManagerModel ProgramManager
        {
            get {return (ProgramManagerModel) base.ProgramManager;}
            set {base.ProgramManager = value;}
        }

        /// <summary>
        /// Gets or sets the StateMachine
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new FunctionalUnitStateMachineModel StateMachine
        {
            get {return (FunctionalUnitStateMachineModel) base.StateMachine;}
            set {base.StateMachine = value;}
        }

        /// <summary>
        /// Gets or sets the SupportedPropertiesSet
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new SupportedPropertiesSetType_ SupportedPropertiesSet
        {
            get {return (SupportedPropertiesSetType_) base.SupportedPropertiesSet;}
            set {base.SupportedPropertiesSet = value;}
        }


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IDynamicMechanicalAnalyzerUnitMethods implemention = DynamicMechanicalAnalyzerUnitMethods;

            if (implemention == null)
            {
                implemention = this as IDynamicMechanicalAnalyzerUnitMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(Netzsch.Dma.Methods.DynamicMechanicalAnalyzerUnitType_StateMachine_StartProgram, Netzsch.Dma.Namespaces.Dma).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.StateMachine_StartProgram(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the DynamicMechanicalAnalyzerUnit methods.
        /// </summary>
        /// <value>
        /// The DynamicMechanicalAnalyzerUnit methods.
        /// </value>
        public IDynamicMechanicalAnalyzerUnitMethods DynamicMechanicalAnalyzerUnitMethods { get; set; }

        /// <summary>
        /// Sets the method dispatcher for children.
        /// </summary>
        /// <remarks>
        /// This method must be called to be able to call methods that
        /// are defined at object of the DynamicMechanicalAnalyzerUnitType.
        /// </remarks>
        /// <param name="nodeManager">The NodeManager where LinkModelToNode is called.</param>
        /// <param name="nodeId">The NodeId that is used for calling LinkModelToNode.</param>
        public virtual void SetMethodDispatchers(
            BaseNodeManager nodeManager,
            NodeId nodeId)
        {
            nodeManager.SetChildUserData(
                nodeId,
                new QualifiedName(BrowseNames.StateMachine, (ushort)nodeManager.Server.NamespaceUris.IndexOf(Namespaces.Lads)),
                this);
            nodeManager.SetChildUserData(
                nodeId,
                new QualifiedName(BrowseNames.StateMachine, (ushort)nodeManager.Server.NamespaceUris.IndexOf(Namespaces.Lads)),
                StateMachine);
        }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the DynamicMechanicalAnalyzerUnitModel object.
    /// </summary>
    public interface IDynamicMechanicalAnalyzerUnitMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode StateMachine_StartProgram(
            RequestContext context,
            DynamicMechanicalAnalyzerUnitModel model
            );

    }

    #endregion



}
