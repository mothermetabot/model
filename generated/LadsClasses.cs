/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.8, using .NET Server 3.2.0 template (version 0)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**
**     Generated by gresser <enrico.gresser@brand.de>
** </auto-generated>
**
** Copyright (c) 2006-2023 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://opcfoundation.org/UA/LADS/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
** Created: 25.03.2023
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using ;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;

namespace UnifiedAutomation.Lads
{
    #region ActiveProgramModel
    /// <summary>
    /// The currently active program on the device.
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ActiveProgramType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class ActiveProgramModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveProgramModel" /> class.
        /// </summary>
        public ActiveProgramModel() : this((ActiveProgramModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveProgramModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ActiveProgramModel(ActiveProgramModel template) : base(template)
        {
            if (template == null)
            {
                ProgramTemplate = new ProgramTemplateModel();
            }
            else
            {
                if (template.CurrentPauseTime != null)
                {
                    CurrentPauseTime = template.CurrentPauseTime;
                }
                if (template.CurrentRuntime != null)
                {
                    CurrentRuntime = template.CurrentRuntime;
                }
                if (template.CurrentStepName != null)
                {
                    CurrentStepName = template.CurrentStepName.Clone() as LocalizedText;
                }
                if (template.CurrentStepNumber != null)
                {
                    CurrentStepNumber = template.CurrentStepNumber;
                }
                if (template.CurrentStepRuntime != null)
                {
                    CurrentStepRuntime = template.CurrentStepRuntime;
                }
                if (template.DeviceProgramRunID != null)
                {
                    DeviceProgramRunID = template.DeviceProgramRunID.Clone() as string;
                }
                if (template.EstimatedRunTime != null)
                {
                    EstimatedRunTime = template.EstimatedRunTime;
                }
                if (template.EstimatedStepNumbers != null)
                {
                    EstimatedStepNumbers = template.EstimatedStepNumbers;
                }
                if (template.EstimatedStepRuntime != null)
                {
                    EstimatedStepRuntime = template.EstimatedStepRuntime;
                }
                ProgramTemplate = new ProgramTemplateModel(template.ProgramTemplate);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CurrentPauseTime
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double? CurrentPauseTime { get; set; }

        /// <summary>
        /// Gets or sets the CurrentRuntime
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double? CurrentRuntime { get; set; }

        /// <summary>
        /// Gets or sets the CurrentStepName
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public LocalizedText CurrentStepName { get; set; }

        /// <summary>
        /// Gets or sets the CurrentStepNumber
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public uint? CurrentStepNumber { get; set; }

        /// <summary>
        /// Gets or sets the CurrentStepRuntime
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double? CurrentStepRuntime { get; set; }

        /// <summary>
        /// Gets or sets the DeviceProgramRunID
        /// </summary>
        /// <details>
        /// The device specific ID of the active run (if any).
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string DeviceProgramRunID { get; set; }

        /// <summary>
        /// Gets or sets the EstimatedRunTime
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double? EstimatedRunTime { get; set; }

        /// <summary>
        /// Gets or sets the EstimatedStepNumbers
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public uint? EstimatedStepNumbers { get; set; }

        /// <summary>
        /// Gets or sets the EstimatedStepRuntime
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double? EstimatedStepRuntime { get; set; }

        /// <summary>
        /// Gets or sets the ProgramTemplate
        /// </summary>
        /// <details>
        /// Represents contextual information about the program template used by the currently active program.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public ProgramTemplateModel ProgramTemplate { get; set; }


        #endregion
    }
    #endregion


    #region ControllerParameterModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ControllerParameterType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class ControllerParameterModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ControllerParameterModel" /> class.
        /// </summary>
        public ControllerParameterModel() : this((ControllerParameterModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ControllerParameterModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ControllerParameterModel(ControllerParameterModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.CurrentValue is ICloneable clonableCurrentValue)
                {
                    CurrentValue = clonableCurrentValue.Clone() as AnalogUnitRangeModel;
                }
                if (template.Operational != null)
                {
                    Operational = new FunctionalGroupModel(template.Operational);
                }
                if (template.TargetValue is ICloneable clonableTargetValue)
                {
                    TargetValue = clonableTargetValue.Clone() as AnalogUnitRangeModel;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CurrentValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object CurrentValue { get; set; }

        /// <summary>
        /// Gets or sets the Operational
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public FunctionalGroupModel Operational { get; set; }

        /// <summary>
        /// Gets or sets the TargetValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object TargetValue { get; set; }


        #endregion
    }
    #endregion


    #region ControllerTuningParameterModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ControllerTuningParameterType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class ControllerTuningParameterModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ControllerTuningParameterModel" /> class.
        /// </summary>
        public ControllerTuningParameterModel() : this((ControllerTuningParameterModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ControllerTuningParameterModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ControllerTuningParameterModel(ControllerTuningParameterModel template) : base(template)
        {
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region PidControllerParameterModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.PidControllerParameterType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class PidControllerParameterModel : ControllerTuningParameterModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="PidControllerParameterModel" /> class.
        /// </summary>
        public PidControllerParameterModel() : this((PidControllerParameterModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PidControllerParameterModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public PidControllerParameterModel(PidControllerParameterModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.CtrlP != null)
                {
                    CtrlP = template.CtrlP.Clone() as double[];
                }
                if (template.CtrlTd != null)
                {
                    if (template.CtrlTd is ICloneable clonableCtrlTd)
                    {
                        CtrlTd = clonableCtrlTd.Clone() as AnalogUnitRangeModel;
                    }
                }
                if (template.CtrlTi != null)
                {
                    if (template.CtrlTi is ICloneable clonableCtrlTi)
                    {
                        CtrlTi = clonableCtrlTi.Clone() as AnalogUnitRangeModel;
                    }
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CtrlP
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double[] CtrlP { get; set; }

        /// <summary>
        /// Gets or sets the CtrlTd
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object CtrlTd { get; set; }

        /// <summary>
        /// Gets or sets the CtrlTi
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object CtrlTi { get; set; }


        #endregion
    }
    #endregion


    #region LADSMaintenanceSetModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.LADSMaintenanceSetType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class LADSMaintenanceSetModel : FunctionalGroupModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="LADSMaintenanceSetModel" /> class.
        /// </summary>
        public LADSMaintenanceSetModel() : this((LADSMaintenanceSetModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LADSMaintenanceSetModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public LADSMaintenanceSetModel(LADSMaintenanceSetModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.S_MaintenanceTask_ != null)
                {
                    S_MaintenanceTask_ = new MaintenanceTaskModel(template.S_MaintenanceTask_);
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the _MaintenanceTask>
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public MaintenanceTaskModel S_MaintenanceTask_ { get; set; }


        #endregion
    }
    #endregion


    #region LADSOperationCountersModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.LADSOperationCountersType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class LADSOperationCountersModel : FunctionalGroupModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="LADSOperationCountersModel" /> class.
        /// </summary>
        public LADSOperationCountersModel() : this((LADSOperationCountersModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LADSOperationCountersModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public LADSOperationCountersModel(LADSOperationCountersModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.LifeTime != null)
                {
                    LifeTime = template.LifeTime;
                }
                if (template.OperationCycleCounter != null)
                {
                    OperationCycleCounter = template.OperationCycleCounter;
                }
                if (template.OperationDuration != null)
                {
                    OperationDuration = template.OperationDuration;
                }
                if (template.PowerOnDuration != null)
                {
                    PowerOnDuration = template.PowerOnDuration;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the LifeTime
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object LifeTime { get; set; }

        /// <summary>
        /// Gets or sets the OperationCycleCounter
        /// </summary>
        /// <details>
        /// OperationCycleCounter is counting the times the Device switches from not performing an activity to performing an activity. For example, each time a valve starts moving, is counted. This value shall only increase during the lifetime of the Device and shall not be reset when the Device is restarted.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public object OperationCycleCounter { get; set; }

        /// <summary>
        /// Gets or sets the OperationDuration
        /// </summary>
        /// <details>
        /// OperationDuration is the duration the Device has been powered and performing an activity. This counter is intended for Devices where a distinction is made between switched on and in operation. For example, a drive might be powered on but not operating. It is not intended for Devices always performing an activity like sensors always measuring data. This value shall only increase during the lifetime of the Device and shall not be reset when the Device is restarted. The OperationDuration is provided as Duration, i.e., in milliseconds or even fractions of a millisecond. However, the Server is not expected to update the value in such a high frequency, but maybe once a minute or once an hour, depending on the application.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public double? OperationDuration { get; set; }

        /// <summary>
        /// Gets or sets the PowerOnDuration
        /// </summary>
        /// <details>
        /// PowerOnDuration is the duration the Device has been powered. The main purpose is to determine the time in which degradation of the Device occurred. The details, when the time is counted, is implementation-specific. Companion specifications might define specific rules. Typically, when the Device has supply voltage and the main CPU is running, the time is counted. This may include any kind of sleep mode, but may not include pure Wake on LAN. This value shall only increase during the lifetime of the Device and shall not be reset when the Device is restarted. The PowerOnDuration is provided as Duration, i.e., in milliseconds or even fractions of a millisecond. However, the Server is not expected to update the value in such a high frequency, but maybe once a minute or once an hour, depending on the application.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public double? PowerOnDuration { get; set; }


        #endregion
    }
    #endregion


    #region SetModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.SetType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class SetModel : FolderModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="SetModel" /> class.
        /// </summary>
        public SetModel() : this((SetModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SetModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public SetModel(SetModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                NodeVersion = template.NodeVersion == null ? null : template.NodeVersion.Clone() as string;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the NodeVersion
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.OpcUa)]
        public string NodeVersion { get; set; }


        #endregion
    }
    #endregion


    #region ControllerParameterSetModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ControllerParameterSetType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class ControllerParameterSetModel : SetModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ControllerParameterSetModel" /> class.
        /// </summary>
        public ControllerParameterSetModel() : this((ControllerParameterSetModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ControllerParameterSetModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ControllerParameterSetModel(ControllerParameterSetModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region FunctionalUnitSetModel
    /// <summary>
    /// Set of Functional Units.
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.FunctionalUnitSetType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class FunctionalUnitSetModel : SetModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionalUnitSetModel" /> class.
        /// </summary>
        public FunctionalUnitSetModel() : this((FunctionalUnitSetModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionalUnitSetModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public FunctionalUnitSetModel(FunctionalUnitSetModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region FunctionSetModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.FunctionSetType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class FunctionSetModel : SetModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionSetModel" /> class.
        /// </summary>
        public FunctionSetModel() : this((FunctionSetModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionSetModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public FunctionSetModel(FunctionSetModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region ProgramTemplateSetModel
    /// <summary>
    /// Set of program templates.
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ProgramTemplateSetType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class ProgramTemplateSetModel : SetModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramTemplateSetModel" /> class.
        /// </summary>
        public ProgramTemplateSetModel() : this((ProgramTemplateSetModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramTemplateSetModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ProgramTemplateSetModel(ProgramTemplateSetModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region ResultFileSetModel
    /// <summary>
    /// Set of files.
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ResultFileSetType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class ResultFileSetModel : SetModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultFileSetModel" /> class.
        /// </summary>
        public ResultFileSetModel() : this((ResultFileSetModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResultFileSetModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ResultFileSetModel(ResultFileSetModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region ResultSetModel
    /// <summary>
    /// Results of program runs.
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ResultSetType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class ResultSetModel : SetModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultSetModel" /> class.
        /// </summary>
        public ResultSetModel() : this((ResultSetModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResultSetModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ResultSetModel(ResultSetModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region SupportedPropertiesSetType_
    /// <summary>
    /// Set of properties which are supported as members of a properties list argument for method calls e.g., FunctionalUnit.StartFunctions() or ActiveProgram.Start().
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.SupportedPropertiesSetType_, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class SupportedPropertiesSetType_ : SetModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedPropertiesSetType_" /> class.
        /// </summary>
        public SupportedPropertiesSetType_() : this((SupportedPropertiesSetType_)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedPropertiesSetType_" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public SupportedPropertiesSetType_(SupportedPropertiesSetType_ template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region VariableSetModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.VariableSetType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class VariableSetModel : FolderModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="VariableSetModel" /> class.
        /// </summary>
        public VariableSetModel() : this((VariableSetModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VariableSetModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public VariableSetModel(VariableSetModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                NodeVersion = template.NodeVersion == null ? null : template.NodeVersion.Clone() as string;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the NodeVersion
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string NodeVersion { get; set; }


        #endregion
    }
    #endregion


    #region ComponentSetModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ComponentSetType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class ComponentSetModel : MachineComponentsModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentSetModel" /> class.
        /// </summary>
        public ComponentSetModel() : this((ComponentSetModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentSetModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ComponentSetModel(ComponentSetModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.NodeVersion != null)
                {
                    NodeVersion = template.NodeVersion.Clone() as string;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the NodeVersion
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.OpcUa)]
        public string NodeVersion { get; set; }


        #endregion
    }
    #endregion


    #region ProgramTemplateModel
    /// <summary>
    /// Program template
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ProgramTemplateType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class ProgramTemplateModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramTemplateModel" /> class.
        /// </summary>
        public ProgramTemplateModel() : this((ProgramTemplateModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramTemplateModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ProgramTemplateModel(ProgramTemplateModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                Author = template.Author == null ? null : template.Author.Clone() as LocalizedText;
                Created = template.Created;
                Description = template.Description == null ? null : template.Description.Clone() as LocalizedText;
                Modified = template.Modified;
                Name = template.Name == null ? null : template.Name.Clone() as string;
                Status = template.Status == null ? null : template.Status.Clone() as string;
                TemplateId = template.TemplateId == null ? null : template.TemplateId.Clone() as string;
                Version = template.Version == null ? null : template.Version.Clone() as string;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Author
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public LocalizedText Author { get; set; }

        /// <summary>
        /// Gets or sets the Created
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or sets the Description
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public LocalizedText Description { get; set; }

        /// <summary>
        /// Gets or sets the Modified
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public DateTime Modified { get; set; }

        /// <summary>
        /// Gets or sets the Name
        /// </summary>
        /// <details>
        /// The program template's name.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Status
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the TemplateId
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Gets or sets the Version
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string Version { get; set; }


        #endregion
    }
    #endregion


    #region ResultFileModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ResultFileType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class ResultFileModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultFileModel" /> class.
        /// </summary>
        public ResultFileModel() : this((ResultFileModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResultFileModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ResultFileModel(ResultFileModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.File != null)
                {
                    File = new FileModel(template.File);
                }
                MimeType = template.MimeType == null ? null : template.MimeType.Clone() as string;
                Name = template.Name == null ? null : template.Name.Clone() as string;
                if (template.URL != null)
                {
                    URL = template.URL.Clone() as string;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the File
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public FileModel File { get; set; }

        /// <summary>
        /// Gets or sets the MimeType
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or sets the Name
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the URL
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string URL { get; set; }


        #endregion
    }
    #endregion


    #region ResultModel
    /// <summary>
    /// Results of a specific program run.
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ResultType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class ResultModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultModel" /> class.
        /// </summary>
        public ResultModel() : this((ResultModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResultModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ResultModel(ResultModel template) : base(template)
        {
            if (template == null)
            {
                FileSet = new ResultFileSetModel();
                ProgramTemplate = new ProgramTemplateModel();
                VariableSet = new VariableSetModel();
            }
            else
            {
                Client = template.Client == null ? null : template.Client.Clone() as string;
                Description = template.Description == null ? null : template.Description.Clone() as LocalizedText;
                if (template.DeviceProgramRunId != null)
                {
                    DeviceProgramRunId = template.DeviceProgramRunId.Clone() as string;
                }
                if (template.EstimateRuntime != null)
                {
                    EstimateRuntime = template.EstimateRuntime;
                }
                FileSet = new ResultFileSetModel(template.FileSet);
                JobId = template.JobId == null ? null : template.JobId.Clone() as string;
                Name = template.Name == null ? null : template.Name.Clone() as string;
                ProgramTemplate = new ProgramTemplateModel(template.ProgramTemplate);
                Properties = template.Properties == null ? null : template.Properties.Clone() as KeyValueType;
                SampleIds = template.SampleIds == null ? null : template.SampleIds.Clone() as string[];
                Started = template.Started;
                Stopped = template.Stopped;
                if (template.SupervisoryTaskId != null)
                {
                    SupervisoryTaskId = template.SupervisoryTaskId.Clone() as string;
                }
                if (template.TotalPauseTime != null)
                {
                    TotalPauseTime = template.TotalPauseTime;
                }
                if (template.TotalRuntime != null)
                {
                    TotalRuntime = template.TotalRuntime;
                }
                User = template.User == null ? null : template.User.Clone() as string;
                VariableSet = new VariableSetModel(template.VariableSet);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Client
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string Client { get; set; }

        /// <summary>
        /// Gets or sets the Description
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public LocalizedText Description { get; set; }

        /// <summary>
        /// Gets or sets the DeviceProgramRunId
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string DeviceProgramRunId { get; set; }

        /// <summary>
        /// Gets or sets the EstimateRuntime
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double? EstimateRuntime { get; set; }

        /// <summary>
        /// Gets or sets the FileSet
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public ResultFileSetModel FileSet { get; set; }

        /// <summary>
        /// Gets or sets the JobId
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string JobId { get; set; }

        /// <summary>
        /// Gets or sets the Name
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the ProgramTemplate
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public ProgramTemplateModel ProgramTemplate { get; set; }

        /// <summary>
        /// Gets or sets the Properties
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public KeyValueType Properties { get; set; }

        /// <summary>
        /// Gets or sets the SampleIds
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string[] SampleIds { get; set; }

        /// <summary>
        /// Gets or sets the Started
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public DateTime Started { get; set; }

        /// <summary>
        /// Gets or sets the Stopped
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public DateTime Stopped { get; set; }

        /// <summary>
        /// Gets or sets the SupervisoryTaskId
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string SupervisoryTaskId { get; set; }

        /// <summary>
        /// Gets or sets the TotalPauseTime
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double? TotalPauseTime { get; set; }

        /// <summary>
        /// Gets or sets the TotalRuntime
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double? TotalRuntime { get; set; }

        /// <summary>
        /// Gets or sets the User
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public string User { get; set; }

        /// <summary>
        /// Gets or sets the VariableSet
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public VariableSetModel VariableSet { get; set; }


        #endregion
    }
    #endregion


    #region CoverStateMachineModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.CoverStateMachineType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class CoverStateMachineModel : FiniteStateMachineModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="CoverStateMachineModel" /> class.
        /// </summary>
        public CoverStateMachineModel() : this((CoverStateMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoverStateMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public CoverStateMachineModel(CoverStateMachineModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            ICoverStateMachineMethods implemention = CoverStateMachineMethods;

            if (implemention == null)
            {
                implemention = this as ICoverStateMachineMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.CoverStateMachineType_Close, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Close(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.CoverStateMachineType_Lock, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Lock(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.CoverStateMachineType_Open, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Open(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.CoverStateMachineType_Reset, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Reset(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.CoverStateMachineType_Unlock, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Unlock(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the CoverStateMachine methods.
        /// </summary>
        /// <value>
        /// The CoverStateMachine methods.
        /// </value>
        public ICoverStateMachineMethods CoverStateMachineMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the CoverStateMachineModel object.
    /// </summary>
    public interface ICoverStateMachineMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Close(
            RequestContext context,
            CoverStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Lock(
            RequestContext context,
            CoverStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Open(
            RequestContext context,
            CoverStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Reset(
            RequestContext context,
            CoverStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Unlock(
            RequestContext context,
            CoverStateMachineModel model
            );

    }

    #endregion


    #region FunctionalStateMachineModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.FunctionalStateMachineType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class FunctionalStateMachineModel : FiniteStateMachineModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionalStateMachineModel" /> class.
        /// </summary>
        public FunctionalStateMachineModel() : this((FunctionalStateMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionalStateMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public FunctionalStateMachineModel(FunctionalStateMachineModel template) : base(template)
        {
            if (template == null)
            {
                CurrentState = new FiniteStateVariableModel();
            }
            else
            {
                AvailableStates = template.AvailableStates == null ? null : template.AvailableStates.Clone() as NodeId[];
                AvailableTransitions = template.AvailableTransitions == null ? null : template.AvailableTransitions.Clone() as NodeId[];
                CurrentState = new FiniteStateVariableModel(template.CurrentState);
                if (template.RunningStateMachine != null)
                {
                    RunningStateMachine = new RunningStateMachineModel(template.RunningStateMachine);
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the AvailableStates
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.OpcUa)]
        public new NodeId[] AvailableStates
        {
            get {return (NodeId[]) base.AvailableStates;}
            set {base.AvailableStates = value;}
        }

        /// <summary>
        /// Gets or sets the AvailableTransitions
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.OpcUa)]
        public new NodeId[] AvailableTransitions
        {
            get {return (NodeId[]) base.AvailableTransitions;}
            set {base.AvailableTransitions = value;}
        }

        /// <summary>
        /// Gets or sets the CurrentState
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.OpcUa)]
        public new FiniteStateVariableModel CurrentState
        {
            get {return (FiniteStateVariableModel) base.CurrentState;}
            set {base.CurrentState = value;}
        }

        /// <summary>
        /// Gets or sets the RunningStateMachine
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public RunningStateMachineModel RunningStateMachine { get; set; }


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IFunctionalStateMachineMethods implemention = FunctionalStateMachineMethods;

            if (implemention == null)
            {
                implemention = this as IFunctionalStateMachineMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.FunctionalStateMachineType_Abort, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Abort(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.FunctionalStateMachineType_Clear, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Clear(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.FunctionalStateMachineType_Stop, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Stop(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the FunctionalStateMachine methods.
        /// </summary>
        /// <value>
        /// The FunctionalStateMachine methods.
        /// </value>
        public IFunctionalStateMachineMethods FunctionalStateMachineMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the FunctionalStateMachineModel object.
    /// </summary>
    public interface IFunctionalStateMachineMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Abort(
            RequestContext context,
            FunctionalStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Clear(
            RequestContext context,
            FunctionalStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Stop(
            RequestContext context,
            FunctionalStateMachineModel model
            );

    }

    #endregion


    #region ActiveProgramStateMachineModel
    /// <summary>
    /// Represents the state of the currently active program in a LADS Device
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ActiveProgramStateMachineType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class ActiveProgramStateMachineModel : FunctionalStateMachineModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveProgramStateMachineModel" /> class.
        /// </summary>
        public ActiveProgramStateMachineModel() : this((ActiveProgramStateMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveProgramStateMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ActiveProgramStateMachineModel(ActiveProgramStateMachineModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public override CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public override StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IActiveProgramStateMachineMethods implemention = FunctionalStateMachineMethods as IActiveProgramStateMachineMethods;

            if (implemention == null)
            {
                implemention = this as IActiveProgramStateMachineMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.ActiveProgramStateMachineType_Start, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                string DeviceProgramRunID;
                StatusCode ret = implemention.Start(context, this, inputArguments[0].GetValue<KeyValueType>(new KeyValueType()), (inputArguments[1].IsNull) ? null : inputArguments[1].ToString(), (inputArguments[2].IsNull) ? null : inputArguments[2].ToString(), inputArguments[3].GetValue<SampleInfoType>(new SampleInfoType()), (inputArguments[4].IsNull) ? null : inputArguments[4].ToString(), out DeviceProgramRunID);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(DeviceProgramRunID);
                }
                return ret;

            }
            return base.DispatchMethod(
                context,
                methodHandle,
                inputArguments,
                inputArgumentResults,
                outputArguments);
        }

        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the ActiveProgramStateMachineModel object.
    /// </summary>
    public interface IActiveProgramStateMachineMethods : IFunctionalStateMachineMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="Properties">A Key/Value set for parameterization of the program</param>
        /// <param name="JobID">The JobID assigned to this program</param>
        /// <param name="SupervisoryTaskID">The ID of the SupervisoryTask</param>
        /// <param name="Samples">An array of the SampleInfoType that describes the samples processed in this program execution</param>
        /// <param name="ProgramTemplateID">The ID of the program template that is used for the current execution</param>
        /// <param name="DeviceProgramRunID">out: The ID of the created program run</param>
        /// <returns></returns>
        StatusCode Start(
            RequestContext context,
            ActiveProgramStateMachineModel model,
            KeyValueType Properties,
            string JobID,
            string SupervisoryTaskID,
            SampleInfoType Samples,
            string ProgramTemplateID,
            out string DeviceProgramRunID
            );

    }

    #endregion


    #region ControlFunctionStateMachineModel
    /// <summary>
    /// Represents the state of a Function in a LADS Device
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ControlFunctionStateMachineType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class ControlFunctionStateMachineModel : FunctionalStateMachineModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ControlFunctionStateMachineModel" /> class.
        /// </summary>
        public ControlFunctionStateMachineModel() : this((ControlFunctionStateMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ControlFunctionStateMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ControlFunctionStateMachineModel(ControlFunctionStateMachineModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public override CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public override StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IControlFunctionStateMachineMethods implemention = FunctionalStateMachineMethods as IControlFunctionStateMachineMethods;

            if (implemention == null)
            {
                implemention = this as IControlFunctionStateMachineMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.ControlFunctionStateMachineType_Start, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Start(context, this, inputArguments[0]);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return base.DispatchMethod(
                context,
                methodHandle,
                inputArguments,
                inputArgumentResults,
                outputArguments);
        }

        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the ControlFunctionStateMachineModel object.
    /// </summary>
    public interface IControlFunctionStateMachineMethods : IFunctionalStateMachineMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="TargetValue">A Key/Value set for parameterization of the function</param>
        /// <returns></returns>
        StatusCode Start(
            RequestContext context,
            ControlFunctionStateMachineModel model,
            Variant TargetValue
            );

    }

    #endregion


    #region FunctionalUnitStateMachineModel
    /// <summary>
    /// Represents the state of a FunctionalUnit in a LADS Device
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.FunctionalUnitStateMachineType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class FunctionalUnitStateMachineModel : FunctionalStateMachineModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionalUnitStateMachineModel" /> class.
        /// </summary>
        public FunctionalUnitStateMachineModel() : this((FunctionalUnitStateMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionalUnitStateMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public FunctionalUnitStateMachineModel(FunctionalUnitStateMachineModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public override CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public override StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IFunctionalUnitStateMachineMethods implemention = FunctionalStateMachineMethods as IFunctionalUnitStateMachineMethods;

            if (implemention == null)
            {
                implemention = this as IFunctionalUnitStateMachineMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.FunctionalUnitStateMachineType_Start, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Start(context, this, inputArguments[0].GetValue<KeyValuePair[]>(null));
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.FunctionalUnitStateMachineType_StartProgram, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                string DeviceProgramRunID;
                StatusCode ret = implemention.StartProgram(context, this, inputArguments[0].GetValue<KeyValueType[]>(null), (inputArguments[1].IsNull) ? null : inputArguments[1].ToString(), (inputArguments[2].IsNull) ? null : inputArguments[2].ToString(), inputArguments[3].GetValue<SampleInfoType[]>(null), (inputArguments[4].IsNull) ? null : inputArguments[4].ToString(), out DeviceProgramRunID);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(DeviceProgramRunID);
                }
                return ret;

            }
            return base.DispatchMethod(
                context,
                methodHandle,
                inputArguments,
                inputArgumentResults,
                outputArguments);
        }

        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the FunctionalUnitStateMachineModel object.
    /// </summary>
    public interface IFunctionalUnitStateMachineMethods : IFunctionalStateMachineMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="Properties">A set of Properties that parameterize the execution of the Functional Unit</param>
        /// <returns></returns>
        StatusCode Start(
            RequestContext context,
            FunctionalUnitStateMachineModel model,
            UnifiedAutomation.UaBase.KeyValuePair[] Properties
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="Properties">A Key/Value set for parameterization of the program.</param>
        /// <param name="JobID"></param>
        /// <param name="SupervisoryTaskID">The ID of the SupervisoryTask.</param>
        /// <param name="Samples">An array of the SampleInfoType that describes the samples processed in this program execution.</param>
        /// <param name="ProgramTemplateID">The ID of the program template that is used for the current execution.</param>
        /// <param name="DeviceProgramRunID">out: The ID of the created program run.</param>
        /// <returns></returns>
        StatusCode StartProgram(
            RequestContext context,
            FunctionalUnitStateMachineModel model,
            KeyValueType[] Properties,
            string JobID,
            string SupervisoryTaskID,
            SampleInfoType[] Samples,
            string ProgramTemplateID,
            out string DeviceProgramRunID
            );

    }

    #endregion


    #region LADSDeviceStateMachineModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.LADSDeviceStateMachineType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class LADSDeviceStateMachineModel : FiniteStateMachineModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="LADSDeviceStateMachineModel" /> class.
        /// </summary>
        public LADSDeviceStateMachineModel() : this((LADSDeviceStateMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LADSDeviceStateMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public LADSDeviceStateMachineModel(LADSDeviceStateMachineModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            ILADSDeviceStateMachineMethods implemention = LADSDeviceStateMachineMethods;

            if (implemention == null)
            {
                implemention = this as ILADSDeviceStateMachineMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.LADSDeviceStateMachineType_GotoMaintenance, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.GotoMaintenance(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.LADSDeviceStateMachineType_GotoOperating, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.GotoOperating(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.LADSDeviceStateMachineType_GotoShutdown, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.GotoShutdown(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.LADSDeviceStateMachineType_GotoStandby, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.GotoStandby(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the LADSDeviceStateMachine methods.
        /// </summary>
        /// <value>
        /// The LADSDeviceStateMachine methods.
        /// </value>
        public ILADSDeviceStateMachineMethods LADSDeviceStateMachineMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the LADSDeviceStateMachineModel object.
    /// </summary>
    public interface ILADSDeviceStateMachineMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode GotoMaintenance(
            RequestContext context,
            LADSDeviceStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode GotoOperating(
            RequestContext context,
            LADSDeviceStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode GotoShutdown(
            RequestContext context,
            LADSDeviceStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode GotoStandby(
            RequestContext context,
            LADSDeviceStateMachineModel model
            );

    }

    #endregion


    #region RunningStateMachineModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.RunningStateMachineType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class RunningStateMachineModel : FiniteStateMachineModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="RunningStateMachineModel" /> class.
        /// </summary>
        public RunningStateMachineModel() : this((RunningStateMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunningStateMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public RunningStateMachineModel(RunningStateMachineModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IRunningStateMachineMethods implemention = RunningStateMachineMethods;

            if (implemention == null)
            {
                implemention = this as IRunningStateMachineMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.RunningStateMachineType_Hold, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Hold(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.RunningStateMachineType_Reset, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Reset(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.RunningStateMachineType_Suspend, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Suspend(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.RunningStateMachineType_ToComplete, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.ToComplete(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.RunningStateMachineType_Unhold, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Unhold(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.RunningStateMachineType_Unsuspend, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Unsuspend(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the RunningStateMachine methods.
        /// </summary>
        /// <value>
        /// The RunningStateMachine methods.
        /// </value>
        public IRunningStateMachineMethods RunningStateMachineMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the RunningStateMachineModel object.
    /// </summary>
    public interface IRunningStateMachineMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Hold(
            RequestContext context,
            RunningStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Reset(
            RequestContext context,
            RunningStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Suspend(
            RequestContext context,
            RunningStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode ToComplete(
            RequestContext context,
            RunningStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Unhold(
            RequestContext context,
            RunningStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Unsuspend(
            RequestContext context,
            RunningStateMachineModel model
            );

    }

    #endregion


    #region SupportedPropertyModel
    /// <summary>
    /// Property which is supported as member of the properties list argument for specific methods e.g., FunctionalUnit.Start() or ActiveProgram.Start(). The objects name will serve as property key.The target variable is linked via an Organizes reference.
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.SupportedPropertyType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class SupportedPropertyModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedPropertyModel" /> class.
        /// </summary>
        public SupportedPropertyModel() : this((SupportedPropertyModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedPropertyModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public SupportedPropertyModel(SupportedPropertyModel template) : base(template)
        {
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region LADSDeviceModel
    /// <summary>
    /// Base class for laboratory- and analytical devices
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.LADSDeviceType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class LADSDeviceModel : DeviceModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="LADSDeviceModel" /> class.
        /// </summary>
        public LADSDeviceModel() : this((LADSDeviceModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LADSDeviceModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public LADSDeviceModel(LADSDeviceModel template) : base(template)
        {
            if (template == null)
            {
                FunctionalUnitSet = new FunctionalUnitSetModel();
                Identification = new MachineryComponentIdentificationModel();
                Maintenance = new LADSMaintenanceSetModel();
                OperationCounters = new LADSOperationCountersModel();
                StateMachine = new LADSDeviceStateMachineModel();
            }
            else
            {
                AssetId = template.AssetId == null ? null : template.AssetId.Clone() as string;
                ComponentName = template.ComponentName == null ? null : template.ComponentName.Clone() as LocalizedText;
                if (template.Components != null)
                {
                    Components = new ComponentSetModel(template.Components);
                }
                if (template.DeviceClass != null)
                {
                    DeviceClass = template.DeviceClass.Clone() as string;
                }
                if (template.DeviceHealth != null)
                {
                    DeviceHealth = template.DeviceHealth;
                }
                DeviceManual = template.DeviceManual == null ? null : template.DeviceManual.Clone() as string;
                DeviceRevision = template.DeviceRevision == null ? null : template.DeviceRevision.Clone() as string;
                FunctionalUnitSet = new FunctionalUnitSetModel(template.FunctionalUnitSet);
                HardwareRevision = template.HardwareRevision == null ? null : template.HardwareRevision.Clone() as string;
                if (template.HierarchicalLocation != null)
                {
                    HierarchicalLocation = template.HierarchicalLocation.Clone() as string;
                }
                Identification = new MachineryComponentIdentificationModel(template.Identification);
                Maintenance = new LADSMaintenanceSetModel(template.Maintenance);
                Manufacturer = template.Manufacturer == null ? null : template.Manufacturer.Clone() as LocalizedText;
                if (template.ManufacturerUri != null)
                {
                    ManufacturerUri = template.ManufacturerUri.Clone() as string;
                }
                Model = template.Model == null ? null : template.Model.Clone() as LocalizedText;
                if (template.OperationalLocation != null)
                {
                    OperationalLocation = template.OperationalLocation.Clone() as string;
                }
                OperationCounters = new LADSOperationCountersModel(template.OperationCounters);
                if (template.ProductCode != null)
                {
                    ProductCode = template.ProductCode.Clone() as string;
                }
                ProductInstanceUri = template.ProductInstanceUri == null ? null : template.ProductInstanceUri.Clone() as string;
                RevisionCounter = template.RevisionCounter;
                SerialNumber = template.SerialNumber == null ? null : template.SerialNumber.Clone() as string;
                SoftwareRevision = template.SoftwareRevision == null ? null : template.SoftwareRevision.Clone() as string;
                StateMachine = new LADSDeviceStateMachineModel(template.StateMachine);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the AssetId
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string AssetId
        {
            get {return (string)base.AssetId;}
            set {base.AssetId = value;}
        }

        /// <summary>
        /// Gets or sets the ComponentName
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new LocalizedText ComponentName
        {
            get {return (LocalizedText)base.ComponentName;}
            set {base.ComponentName = value;}
        }

        /// <summary>
        /// Gets or sets the Components
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public ComponentSetModel Components { get; set; }

        /// <summary>
        /// Gets or sets the DeviceClass
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string DeviceClass
        {
            get {return (string)base.DeviceClass;}
            set {base.DeviceClass = value;}
        }

        /// <summary>
        /// Gets or sets the DeviceHealth
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new DeviceHealthEnumeration? DeviceHealth
        {
            get {return (DeviceHealthEnumeration?)base.DeviceHealth;}
            set {base.DeviceHealth = value;}
        }

        /// <summary>
        /// Gets or sets the DeviceManual
        /// </summary>
        /// <details>
        /// Address (pathname in the file system or a URL | Web address) of user manual for the device
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string DeviceManual
        {
            get {return (string)base.DeviceManual;}
            set {base.DeviceManual = value;}
        }

        /// <summary>
        /// Gets or sets the DeviceRevision
        /// </summary>
        /// <details>
        /// Overall revision level of the device
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string DeviceRevision
        {
            get {return (string)base.DeviceRevision;}
            set {base.DeviceRevision = value;}
        }

        /// <summary>
        /// Gets or sets the FunctionalUnitSet
        /// </summary>
        /// <details>
        /// Contains funtional units of this device.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public FunctionalUnitSetModel FunctionalUnitSet { get; set; }

        /// <summary>
        /// Gets or sets the HardwareRevision
        /// </summary>
        /// <details>
        /// Revision level of the hardware of the device
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string HardwareRevision
        {
            get {return (string)base.HardwareRevision;}
            set {base.HardwareRevision = value;}
        }

        /// <summary>
        /// Gets or sets the HierarchicalLocation
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public string HierarchicalLocation { get; set; }

        /// <summary>
        /// Gets or sets the Identification
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new MachineryComponentIdentificationModel Identification
        {
            get {return (MachineryComponentIdentificationModel) base.Identification;}
            set {base.Identification = value;}
        }

        /// <summary>
        /// Gets or sets the Maintenance
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public LADSMaintenanceSetModel Maintenance { get; set; }

        /// <summary>
        /// Gets or sets the Manufacturer
        /// </summary>
        /// <details>
        /// Name of the company that manufactured the device
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new LocalizedText Manufacturer
        {
            get {return (LocalizedText)base.Manufacturer;}
            set {base.Manufacturer = value;}
        }

        /// <summary>
        /// Gets or sets the ManufacturerUri
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string ManufacturerUri
        {
            get {return (string)base.ManufacturerUri;}
            set {base.ManufacturerUri = value;}
        }

        /// <summary>
        /// Gets or sets the Model
        /// </summary>
        /// <details>
        /// Model name of the device
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new LocalizedText Model
        {
            get {return (LocalizedText)base.Model;}
            set {base.Model = value;}
        }

        /// <summary>
        /// Gets or sets the OperationalLocation
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public string OperationalLocation { get; set; }

        /// <summary>
        /// Gets or sets the OperationCounters
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public LADSOperationCountersModel OperationCounters { get; set; }

        /// <summary>
        /// Gets or sets the ProductCode
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string ProductCode
        {
            get {return (string)base.ProductCode;}
            set {base.ProductCode = value;}
        }

        /// <summary>
        /// Gets or sets the ProductInstanceUri
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string ProductInstanceUri
        {
            get {return (string)base.ProductInstanceUri;}
            set {base.ProductInstanceUri = value;}
        }

        /// <summary>
        /// Gets or sets the RevisionCounter
        /// </summary>
        /// <details>
        /// An incremental counter indicating the number of times the static data within the Device has been modified
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new int RevisionCounter
        {
            get {return (int)base.RevisionCounter;}
            set {base.RevisionCounter = value;}
        }

        /// <summary>
        /// Gets or sets the SerialNumber
        /// </summary>
        /// <details>
        /// Identifier that uniquely identifies, within a manufacturer, a device instance
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string SerialNumber
        {
            get {return (string)base.SerialNumber;}
            set {base.SerialNumber = value;}
        }

        /// <summary>
        /// Gets or sets the SoftwareRevision
        /// </summary>
        /// <details>
        /// Revision level of the software/firmware of the device
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string SoftwareRevision
        {
            get {return (string)base.SoftwareRevision;}
            set {base.SoftwareRevision = value;}
        }

        /// <summary>
        /// Gets or sets the StateMachine
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public LADSDeviceStateMachineModel StateMachine { get; set; }


        #endregion
    }
    #endregion


    #region LADSComponentModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.LADSComponentType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class LADSComponentModel : ComponentModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="LADSComponentModel" /> class.
        /// </summary>
        public LADSComponentModel() : this((LADSComponentModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LADSComponentModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public LADSComponentModel(LADSComponentModel template) : base(template)
        {
            if (template == null)
            {
                Identification = new MachineryComponentIdentificationModel();
            }
            else
            {
                if (template.AssetId != null)
                {
                    AssetId = template.AssetId.Clone() as string;
                }
                if (template.ComponentName != null)
                {
                    ComponentName = template.ComponentName.Clone() as LocalizedText;
                }
                if (template.Components != null)
                {
                    Components = new ComponentSetModel(template.Components);
                }
                if (template.DeviceClass != null)
                {
                    DeviceClass = template.DeviceClass.Clone() as string;
                }
                if (template.DeviceHealth != null)
                {
                    DeviceHealth = template.DeviceHealth;
                }
                if (template.DeviceHealthAlarms != null)
                {
                    DeviceHealthAlarms = new FolderModel(template.DeviceHealthAlarms);
                }
                if (template.DeviceManual != null)
                {
                    DeviceManual = template.DeviceManual.Clone() as string;
                }
                if (template.DeviceRevision != null)
                {
                    DeviceRevision = template.DeviceRevision.Clone() as string;
                }
                if (template.HardwareRevision != null)
                {
                    HardwareRevision = template.HardwareRevision.Clone() as string;
                }
                if (template.HierarchicalLocation != null)
                {
                    HierarchicalLocation = template.HierarchicalLocation.Clone() as string;
                }
                Identification = new MachineryComponentIdentificationModel(template.Identification);
                if (template.Maintenance != null)
                {
                    Maintenance = new LADSMaintenanceSetModel(template.Maintenance);
                }
                Manufacturer = template.Manufacturer == null ? null : template.Manufacturer.Clone() as LocalizedText;
                if (template.ManufacturerUri != null)
                {
                    ManufacturerUri = template.ManufacturerUri.Clone() as string;
                }
                if (template.Model != null)
                {
                    Model = template.Model.Clone() as LocalizedText;
                }
                if (template.OperationalLocation != null)
                {
                    OperationalLocation = template.OperationalLocation.Clone() as string;
                }
                if (template.OperationCounters != null)
                {
                    OperationCounters = new LADSOperationCountersModel(template.OperationCounters);
                }
                if (template.ProductCode != null)
                {
                    ProductCode = template.ProductCode.Clone() as string;
                }
                if (template.ProductInstanceUri != null)
                {
                    ProductInstanceUri = template.ProductInstanceUri.Clone() as string;
                }
                if (template.RevisionCounter != null)
                {
                    RevisionCounter = template.RevisionCounter;
                }
                SerialNumber = template.SerialNumber == null ? null : template.SerialNumber.Clone() as string;
                if (template.SoftwareRevision != null)
                {
                    SoftwareRevision = template.SoftwareRevision.Clone() as string;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the AssetId
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string AssetId
        {
            get {return (string)base.AssetId;}
            set {base.AssetId = value;}
        }

        /// <summary>
        /// Gets or sets the ComponentName
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new LocalizedText ComponentName
        {
            get {return (LocalizedText)base.ComponentName;}
            set {base.ComponentName = value;}
        }

        /// <summary>
        /// Gets or sets the Components
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public ComponentSetModel Components { get; set; }

        /// <summary>
        /// Gets or sets the DeviceClass
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string DeviceClass
        {
            get {return (string)base.DeviceClass;}
            set {base.DeviceClass = value;}
        }

        /// <summary>
        /// Gets or sets the DeviceHealth
        /// </summary>
        /// <details>
        /// Indicates the health status of a device as defined by NAMUR Recommendation NE 107.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public DeviceHealthEnumeration? DeviceHealth { get; set; }

        /// <summary>
        /// Gets or sets the DeviceHealthAlarms
        /// </summary>
        /// <details>
        /// Groups the all instances of device health realted alarms.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public FolderModel DeviceHealthAlarms { get; set; }

        /// <summary>
        /// Gets or sets the DeviceManual
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string DeviceManual
        {
            get {return (string)base.DeviceManual;}
            set {base.DeviceManual = value;}
        }

        /// <summary>
        /// Gets or sets the DeviceRevision
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string DeviceRevision
        {
            get {return (string)base.DeviceRevision;}
            set {base.DeviceRevision = value;}
        }

        /// <summary>
        /// Gets or sets the HardwareRevision
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string HardwareRevision
        {
            get {return (string)base.HardwareRevision;}
            set {base.HardwareRevision = value;}
        }

        /// <summary>
        /// Gets or sets the HierarchicalLocation
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public string HierarchicalLocation { get; set; }

        /// <summary>
        /// Gets or sets the Identification
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new MachineryComponentIdentificationModel Identification
        {
            get {return (MachineryComponentIdentificationModel) base.Identification;}
            set {base.Identification = value;}
        }

        /// <summary>
        /// Gets or sets the Maintenance
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public LADSMaintenanceSetModel Maintenance { get; set; }

        /// <summary>
        /// Gets or sets the Manufacturer
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new LocalizedText Manufacturer
        {
            get {return (LocalizedText)base.Manufacturer;}
            set {base.Manufacturer = value;}
        }

        /// <summary>
        /// Gets or sets the ManufacturerUri
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string ManufacturerUri
        {
            get {return (string)base.ManufacturerUri;}
            set {base.ManufacturerUri = value;}
        }

        /// <summary>
        /// Gets or sets the Model
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new LocalizedText Model
        {
            get {return (LocalizedText)base.Model;}
            set {base.Model = value;}
        }

        /// <summary>
        /// Gets or sets the OperationalLocation
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public string OperationalLocation { get; set; }

        /// <summary>
        /// Gets or sets the OperationCounters
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public LADSOperationCountersModel OperationCounters { get; set; }

        /// <summary>
        /// Gets or sets the ProductCode
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string ProductCode
        {
            get {return (string)base.ProductCode;}
            set {base.ProductCode = value;}
        }

        /// <summary>
        /// Gets or sets the ProductInstanceUri
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string ProductInstanceUri
        {
            get {return (string)base.ProductInstanceUri;}
            set {base.ProductInstanceUri = value;}
        }

        /// <summary>
        /// Gets or sets the RevisionCounter
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new int? RevisionCounter
        {
            get {return (int?)base.RevisionCounter;}
            set {base.RevisionCounter = value;}
        }

        /// <summary>
        /// Gets or sets the SerialNumber
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string SerialNumber
        {
            get {return (string)base.SerialNumber;}
            set {base.SerialNumber = value;}
        }

        /// <summary>
        /// Gets or sets the SoftwareRevision
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string SoftwareRevision
        {
            get {return (string)base.SoftwareRevision;}
            set {base.SoftwareRevision = value;}
        }


        #endregion
    }
    #endregion


    #region FunctionalUnitModel
    /// <summary>
    /// Represents a functional unit of a laboratory- or anlytical device.
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.FunctionalUnitType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class FunctionalUnitModel : TopologyElementModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionalUnitModel" /> class.
        /// </summary>
        public FunctionalUnitModel() : this((FunctionalUnitModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionalUnitModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public FunctionalUnitModel(FunctionalUnitModel template) : base(template)
        {
            if (template == null)
            {
                FunctionSet = new FunctionSetModel();
                Lock = new LockingServicesModel();
                StateMachine = new FunctionalUnitStateMachineModel();
            }
            else
            {
                if (template.AssetId != null)
                {
                    AssetId = template.AssetId.Clone() as string;
                }
                if (template.ComponentName != null)
                {
                    ComponentName = template.ComponentName.Clone() as LocalizedText;
                }
                FunctionSet = new FunctionSetModel(template.FunctionSet);
                if (template.Identification != null)
                {
                    Identification = new FunctionalGroupModel(template.Identification);
                }
                Lock = new LockingServicesModel(template.Lock);
                if (template.Operational != null)
                {
                    Operational = new FunctionalGroupModel(template.Operational);
                }
                if (template.ProgramManager != null)
                {
                    ProgramManager = new ProgramManagerModel(template.ProgramManager);
                }
                StateMachine = new FunctionalUnitStateMachineModel(template.StateMachine);
                if (template.SupportedPropertiesSet != null)
                {
                    SupportedPropertiesSet = new SupportedPropertiesSetType_(template.SupportedPropertiesSet);
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the AssetId
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or sets the ComponentName
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public LocalizedText ComponentName { get; set; }

        /// <summary>
        /// Gets or sets the FunctionSet
        /// </summary>
        /// <details>
        /// Contains funtions of this functional unit.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public FunctionSetModel FunctionSet { get; set; }

        /// <summary>
        /// Gets or sets the Identification
        /// </summary>
        /// <details>
        /// Used to organize parameters for identification of this functional unit.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new FunctionalGroupModel Identification
        {
            get {return (FunctionalGroupModel) base.Identification;}
            set {base.Identification = value;}
        }

        /// <summary>
        /// Gets or sets the Lock
        /// </summary>
        /// <details>
        /// Used to lock the topology element.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new LockingServicesModel Lock
        {
            get {return (LockingServicesModel) base.Lock;}
            set {base.Lock = value;}
        }

        /// <summary>
        /// Gets or sets the Operational
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public FunctionalGroupModel Operational { get; set; }

        /// <summary>
        /// Gets or sets the ProgramManager
        /// </summary>
        /// <details>
        /// Manages programs and results of the functional-unit.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public ProgramManagerModel ProgramManager { get; set; }

        /// <summary>
        /// Gets or sets the StateMachine
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public FunctionalUnitStateMachineModel StateMachine { get; set; }

        /// <summary>
        /// Gets or sets the SupportedPropertiesSet
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public SupportedPropertiesSetType_ SupportedPropertiesSet { get; set; }


        #endregion
    }
    #endregion


    #region FunctionModel
    /// <summary>
    /// Abstract function type
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.FunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class FunctionModel : TopologyElementModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionModel" /> class.
        /// </summary>
        public FunctionModel() : this((FunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public FunctionModel(FunctionModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.Configuration != null)
                {
                    Configuration = new FunctionalGroupModel(template.Configuration);
                }
                if (template.FunctionSet != null)
                {
                    FunctionSet = new FunctionSetModel(template.FunctionSet);
                }
                IsEnabled = template.IsEnabled;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Configuration
        /// </summary>
        /// <details>
        /// Used to organize parameters for configuration of this function.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public FunctionalGroupModel Configuration { get; set; }

        /// <summary>
        /// Gets or sets the FunctionSet
        /// </summary>
        /// <details>
        /// Contains sub-funtions of this function.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public FunctionSetModel FunctionSet { get; set; }

        /// <summary>
        /// Gets or sets the IsEnabled
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public bool IsEnabled { get; set; }


        #endregion
    }
    #endregion


    #region BaseControlFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.BaseControlFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class BaseControlFunctionModel : FunctionModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseControlFunctionModel" /> class.
        /// </summary>
        public BaseControlFunctionModel() : this((BaseControlFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BaseControlFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public BaseControlFunctionModel(BaseControlFunctionModel template) : base(template)
        {
            if (template == null)
            {
                Operational = new FunctionalGroupModel();
                StateMachine = new ControlFunctionStateMachineModel();
            }
            else
            {
                if (template.AlarmMonitor != null)
                {
                    AlarmMonitor = new ExclusiveDeviationAlarmModel(template.AlarmMonitor);
                }
                if (template.ContollerTuningParameter != null)
                {
                    ContollerTuningParameter = new ControllerTuningParameterModel(template.ContollerTuningParameter);
                }
                Operational = new FunctionalGroupModel(template.Operational);
                StateMachine = new ControlFunctionStateMachineModel(template.StateMachine);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the AlarmMonitor
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public ExclusiveDeviationAlarmModel AlarmMonitor { get; set; }

        /// <summary>
        /// Gets or sets the ContollerTuningParameter
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public ControllerTuningParameterModel ContollerTuningParameter { get; set; }

        /// <summary>
        /// Gets or sets the Operational
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public FunctionalGroupModel Operational { get; set; }

        /// <summary>
        /// Gets or sets the StateMachine
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public ControlFunctionStateMachineModel StateMachine { get; set; }


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IBaseControlFunctionMethods implemention = BaseControlFunctionMethods;

            if (implemention == null)
            {
                implemention = this as IBaseControlFunctionMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.BaseControlFunctionType_StateMachine_Reset, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.StateMachine_Reset(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the BaseControlFunction methods.
        /// </summary>
        /// <value>
        /// The BaseControlFunction methods.
        /// </value>
        public IBaseControlFunctionMethods BaseControlFunctionMethods { get; set; }

        /// <summary>
        /// Sets the method dispatcher for children.
        /// </summary>
        /// <remarks>
        /// This method must be called to be able to call methods that
        /// are defined at object of the BaseControlFunctionType.
        /// </remarks>
        /// <param name="nodeManager">The NodeManager where LinkModelToNode is called.</param>
        /// <param name="nodeId">The NodeId that is used for calling LinkModelToNode.</param>
        public virtual void SetMethodDispatchers(
            BaseNodeManager nodeManager,
            NodeId nodeId)
        {
            nodeManager.SetChildUserData(
                nodeId,
                new QualifiedName(BrowseNames.AlarmMonitor, (ushort)nodeManager.Server.NamespaceUris.IndexOf(Namespaces.Lads)),
                AlarmMonitor);
            nodeManager.SetChildUserData(
                nodeId,
                new QualifiedName(BrowseNames.StateMachine, (ushort)nodeManager.Server.NamespaceUris.IndexOf(Namespaces.Lads)),
                this);
            nodeManager.SetChildUserData(
                nodeId,
                new QualifiedName(BrowseNames.StateMachine, (ushort)nodeManager.Server.NamespaceUris.IndexOf(Namespaces.Lads)),
                StateMachine);
        }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the BaseControlFunctionModel object.
    /// </summary>
    public interface IBaseControlFunctionMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode StateMachine_Reset(
            RequestContext context,
            BaseControlFunctionModel model
            );

    }

    #endregion


    #region AnalogControlFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.AnalogControlFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class AnalogControlFunctionModel : BaseControlFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalogControlFunctionModel" /> class.
        /// </summary>
        public AnalogControlFunctionModel() : this((AnalogControlFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalogControlFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public AnalogControlFunctionModel(AnalogControlFunctionModel template) : base(template)
        {
            if (template == null)
            {
                Operational = new FunctionalGroupModel();
            }
            else
            {
                if (template.CurrentValue is ICloneable clonableCurrentValue)
                {
                    CurrentValue = clonableCurrentValue.Clone() as AnalogUnitRangeModel;
                }
                Operational = new FunctionalGroupModel(template.Operational);
                if (template.TargetValue is ICloneable clonableTargetValue)
                {
                    TargetValue = clonableTargetValue.Clone() as AnalogUnitRangeModel;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CurrentValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object CurrentValue { get; set; }

        /// <summary>
        /// Gets or sets the Operational
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new FunctionalGroupModel Operational
        {
            get {return (FunctionalGroupModel) base.Operational;}
            set {base.Operational = value;}
        }

        /// <summary>
        /// Gets or sets the TargetValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object TargetValue { get; set; }


        #endregion
    }
    #endregion


    #region AnalogControlFunctionWithComposedTargetValueModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.AnalogControlFunctionWithComposedTargetValueType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class AnalogControlFunctionWithComposedTargetValueModel : AnalogControlFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalogControlFunctionWithComposedTargetValueModel" /> class.
        /// </summary>
        public AnalogControlFunctionWithComposedTargetValueModel() : this((AnalogControlFunctionWithComposedTargetValueModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalogControlFunctionWithComposedTargetValueModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public AnalogControlFunctionWithComposedTargetValueModel(AnalogControlFunctionWithComposedTargetValueModel template) : base(template)
        {
            if (template == null)
            {
                TargetValueSet = new VariableSetModel();
            }
            else
            {
                if (template.TargetValue is ICloneable clonableTargetValue)
                {
                    TargetValue = clonableTargetValue.Clone() as AnalogUnitRangeModel;
                }
                TargetValueSet = new VariableSetModel(template.TargetValueSet);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the TargetValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object TargetValue { get; set; }

        /// <summary>
        /// Gets or sets the TargetValueSet
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public VariableSetModel TargetValueSet { get; set; }


        #endregion
    }
    #endregion


    #region AnalogControlFunctionWithTotalizerModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.AnalogControlFunctionWithTotalizerType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class AnalogControlFunctionWithTotalizerModel : AnalogControlFunctionModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalogControlFunctionWithTotalizerModel" /> class.
        /// </summary>
        public AnalogControlFunctionWithTotalizerModel() : this((AnalogControlFunctionWithTotalizerModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalogControlFunctionWithTotalizerModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public AnalogControlFunctionWithTotalizerModel(AnalogControlFunctionWithTotalizerModel template) : base(template)
        {
            if (template == null)
            {
                Operational = new FunctionalGroupModel();
            }
            else
            {
                Operational = new FunctionalGroupModel(template.Operational);
                if (template.TotalizedValue is ICloneable clonableTotalizedValue)
                {
                    TotalizedValue = clonableTotalizedValue.Clone() as AnalogUnitRangeModel;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Operational
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new FunctionalGroupModel Operational
        {
            get {return (FunctionalGroupModel) base.Operational;}
            set {base.Operational = value;}
        }

        /// <summary>
        /// Gets or sets the TotalizedValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object TotalizedValue { get; set; }


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public override CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public override StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IAnalogControlFunctionWithTotalizerMethods implemention = BaseControlFunctionMethods as IAnalogControlFunctionWithTotalizerMethods;

            if (implemention == null)
            {
                implemention = this as IAnalogControlFunctionWithTotalizerMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.AnalogControlFunctionWithTotalizerType_ResetTotalizer, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.ResetTotalizer(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return base.DispatchMethod(
                context,
                methodHandle,
                inputArguments,
                inputArgumentResults,
                outputArguments);
        }

        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the AnalogControlFunctionWithTotalizerModel object.
    /// </summary>
    public interface IAnalogControlFunctionWithTotalizerMethods : IBaseControlFunctionMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode ResetTotalizer(
            RequestContext context,
            AnalogControlFunctionWithTotalizerModel model
            );

    }

    #endregion


    #region DiscreteControlFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.DiscreteControlFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class DiscreteControlFunctionModel : BaseControlFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteControlFunctionModel" /> class.
        /// </summary>
        public DiscreteControlFunctionModel() : this((DiscreteControlFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteControlFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public DiscreteControlFunctionModel(DiscreteControlFunctionModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.CurrentValue is ICloneable clonableCurrentValue)
                {
                    CurrentValue = clonableCurrentValue.Clone() as DiscreteItemModel;
                }
                if (template.TargetValue is ICloneable clonableTargetValue)
                {
                    TargetValue = clonableTargetValue.Clone() as DiscreteItemModel;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CurrentValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object CurrentValue { get; set; }

        /// <summary>
        /// Gets or sets the TargetValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object TargetValue { get; set; }


        #endregion
    }
    #endregion


    #region MultiStateDiscreteControlFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MultiStateDiscreteControlFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class MultiStateDiscreteControlFunctionModel : DiscreteControlFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiStateDiscreteControlFunctionModel" /> class.
        /// </summary>
        public MultiStateDiscreteControlFunctionModel() : this((MultiStateDiscreteControlFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiStateDiscreteControlFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MultiStateDiscreteControlFunctionModel(MultiStateDiscreteControlFunctionModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.CurrentValue is ICloneable clonableCurrentValue)
                {
                    CurrentValue = clonableCurrentValue.Clone() as MultiStateDiscreteModel;
                }
                if (template.TargetValue is ICloneable clonableTargetValue)
                {
                    TargetValue = clonableTargetValue.Clone() as MultiStateDiscreteModel;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CurrentValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object CurrentValue { get; set; }

        /// <summary>
        /// Gets or sets the TargetValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object TargetValue { get; set; }


        #endregion
    }
    #endregion


    #region TwoStateDiscreteControlFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.TwoStateDiscreteControlFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class TwoStateDiscreteControlFunctionModel : DiscreteControlFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="TwoStateDiscreteControlFunctionModel" /> class.
        /// </summary>
        public TwoStateDiscreteControlFunctionModel() : this((TwoStateDiscreteControlFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TwoStateDiscreteControlFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public TwoStateDiscreteControlFunctionModel(TwoStateDiscreteControlFunctionModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.CurrentValue is ICloneable clonableCurrentValue)
                {
                    CurrentValue = clonableCurrentValue.Clone() as TwoStateDiscreteModel;
                }
                if (template.TargetValue is ICloneable clonableTargetValue)
                {
                    TargetValue = clonableTargetValue.Clone() as TwoStateDiscreteModel;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CurrentValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new TwoStateDiscreteModel CurrentValue
        {
            get {return (TwoStateDiscreteModel) base.CurrentValue;}
            set {base.CurrentValue = value;}
        }

        /// <summary>
        /// Gets or sets the TargetValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new TwoStateDiscreteModel TargetValue
        {
            get {return (TwoStateDiscreteModel) base.TargetValue;}
            set {base.TargetValue = value;}
        }


        #endregion
    }
    #endregion


    #region MultiModeAnalogControlFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MultiModeAnalogControlFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class MultiModeAnalogControlFunctionModel : BaseControlFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiModeAnalogControlFunctionModel" /> class.
        /// </summary>
        public MultiModeAnalogControlFunctionModel() : this((MultiModeAnalogControlFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiModeAnalogControlFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MultiModeAnalogControlFunctionModel(MultiModeAnalogControlFunctionModel template) : base(template)
        {
            if (template == null)
            {
                ControllerModeSet = new ControllerParameterSetModel();
                Operational = new FunctionalGroupModel();
            }
            else
            {
                ControllerModeSet = new ControllerParameterSetModel(template.ControllerModeSet);
                if (template.CurrentMode is ICloneable clonableCurrentMode)
                {
                    CurrentMode = clonableCurrentMode.Clone() as MultiStateDiscreteModel;
                }
                Operational = new FunctionalGroupModel(template.Operational);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the ControllerModeSet
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public ControllerParameterSetModel ControllerModeSet { get; set; }

        /// <summary>
        /// Gets or sets the CurrentMode
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object CurrentMode { get; set; }

        /// <summary>
        /// Gets or sets the Operational
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new FunctionalGroupModel Operational
        {
            get {return (FunctionalGroupModel) base.Operational;}
            set {base.Operational = value;}
        }


        #endregion
    }
    #endregion


    #region MultiParameterAnalogControlFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MultiParameterAnalogControlFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class MultiParameterAnalogControlFunctionModel : BaseControlFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiParameterAnalogControlFunctionModel" /> class.
        /// </summary>
        public MultiParameterAnalogControlFunctionModel() : this((MultiParameterAnalogControlFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiParameterAnalogControlFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MultiParameterAnalogControlFunctionModel(MultiParameterAnalogControlFunctionModel template) : base(template)
        {
            if (template == null)
            {
                ControllerParameterSet = new ControllerParameterSetModel();
            }
            else
            {
                ControllerParameterSet = new ControllerParameterSetModel(template.ControllerParameterSet);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the ControllerParameterSet
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public ControllerParameterSetModel ControllerParameterSet { get; set; }


        #endregion
    }
    #endregion


    #region RatebasedAccumulatingControlFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.RatebasedAccumulatingControlFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class RatebasedAccumulatingControlFunctionModel : BaseControlFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="RatebasedAccumulatingControlFunctionModel" /> class.
        /// </summary>
        public RatebasedAccumulatingControlFunctionModel() : this((RatebasedAccumulatingControlFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RatebasedAccumulatingControlFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public RatebasedAccumulatingControlFunctionModel(RatebasedAccumulatingControlFunctionModel template) : base(template)
        {
            if (template == null)
            {
                Operational = new FunctionalGroupModel();
            }
            else
            {
                if (template.CurrentValue != null)
                {
                    CurrentValue = new AnalogUnitRangeModel<double>(template.CurrentValue);
                }
                if (template.DecreaseRate != null)
                {
                    DecreaseRate = new AnalogUnitRangeModel<double>(template.DecreaseRate);
                }
                if (template.DeltaValue != null)
                {
                    DeltaValue = new AnalogUnitRangeModel<double>(template.DeltaValue);
                }
                if (template.IncreaseRate != null)
                {
                    IncreaseRate = new AnalogUnitRangeModel<double>(template.IncreaseRate);
                }
                Operational = new FunctionalGroupModel(template.Operational);
                if (template.TargetValue != null)
                {
                    TargetValue = new AnalogUnitRangeModel<double>(template.TargetValue);
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CurrentValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public AnalogUnitRangeModel<double> CurrentValue { get; set; }

        /// <summary>
        /// Gets or sets the DecreaseRate
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public AnalogUnitRangeModel<double> DecreaseRate { get; set; }

        /// <summary>
        /// Gets or sets the DeltaValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public AnalogUnitRangeModel<double> DeltaValue { get; set; }

        /// <summary>
        /// Gets or sets the IncreaseRate
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public AnalogUnitRangeModel<double> IncreaseRate { get; set; }

        /// <summary>
        /// Gets or sets the Operational
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new FunctionalGroupModel Operational
        {
            get {return (FunctionalGroupModel) base.Operational;}
            set {base.Operational = value;}
        }

        /// <summary>
        /// Gets or sets the TargetValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public AnalogUnitRangeModel<double> TargetValue { get; set; }


        #endregion
    }
    #endregion


    #region StartStopControlFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.StartStopControlFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class StartStopControlFunctionModel : BaseControlFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="StartStopControlFunctionModel" /> class.
        /// </summary>
        public StartStopControlFunctionModel() : this((StartStopControlFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StartStopControlFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public StartStopControlFunctionModel(StartStopControlFunctionModel template) : base(template)
        {
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region TimerFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.TimerFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class TimerFunctionModel : BaseControlFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="TimerFunctionModel" /> class.
        /// </summary>
        public TimerFunctionModel() : this((TimerFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimerFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public TimerFunctionModel(TimerFunctionModel template) : base(template)
        {
            if (template == null)
            {
                Operational = new FunctionalGroupModel();
            }
            else
            {
                if (template.CurrentValue != null)
                {
                    if (template.CurrentValue is ICloneable clonableCurrentValue)
                    {
                        CurrentValue = clonableCurrentValue.Clone() as AnalogUnitRangeModel;
                    }
                }
                if (template.DifferenceValue != null)
                {
                    if (template.DifferenceValue is ICloneable clonableDifferenceValue)
                    {
                        DifferenceValue = clonableDifferenceValue.Clone() as AnalogUnitRangeModel;
                    }
                }
                Operational = new FunctionalGroupModel(template.Operational);
                if (template.TargetValue != null)
                {
                    if (template.TargetValue is ICloneable clonableTargetValue)
                    {
                        TargetValue = clonableTargetValue.Clone() as AnalogUnitRangeModel;
                    }
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CurrentValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object CurrentValue { get; set; }

        /// <summary>
        /// Gets or sets the DifferenceValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object DifferenceValue { get; set; }

        /// <summary>
        /// Gets or sets the Operational
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new FunctionalGroupModel Operational
        {
            get {return (FunctionalGroupModel) base.Operational;}
            set {base.Operational = value;}
        }

        /// <summary>
        /// Gets or sets the TargetValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object TargetValue { get; set; }


        #endregion
    }
    #endregion


    #region BaseSensorFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.BaseSensorFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class BaseSensorFunctionModel : FunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseSensorFunctionModel" /> class.
        /// </summary>
        public BaseSensorFunctionModel() : this((BaseSensorFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BaseSensorFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public BaseSensorFunctionModel(BaseSensorFunctionModel template) : base(template)
        {
            if (template == null)
            {
                Calibration = new FunctionalGroupModel();
                Operational = new FunctionalGroupModel();
            }
            else
            {
                if (template.AlarmMonitor != null)
                {
                    AlarmMonitor = new ExclusiveLevelAlarmModel(template.AlarmMonitor);
                }
                Calibration = new FunctionalGroupModel(template.Calibration);
                if (template.CalibrationValues != null)
                {
                    CalibrationValues = template.CalibrationValues.Clone() as double[];
                }
                if (template.Configuration != null)
                {
                    Configuration = new FunctionalGroupModel(template.Configuration);
                }
                if (template.Damping != null)
                {
                    Damping = template.Damping;
                }
                Operational = new FunctionalGroupModel(template.Operational);
                if (template.Tuning != null)
                {
                    Tuning = new FunctionalGroupModel(template.Tuning);
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the AlarmMonitor
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public ExclusiveLevelAlarmModel AlarmMonitor { get; set; }

        /// <summary>
        /// Gets or sets the Calibration
        /// </summary>
        /// <details>
        /// Used to organize parameters for configuration of this function.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public FunctionalGroupModel Calibration { get; set; }

        /// <summary>
        /// Gets or sets the CalibrationValues
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double[] CalibrationValues { get; set; }

        /// <summary>
        /// Gets or sets the Configuration
        /// </summary>
        /// <details>
        /// Used to organize parameters for configuration of this function.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new FunctionalGroupModel Configuration
        {
            get {return (FunctionalGroupModel) base.Configuration;}
            set {base.Configuration = value;}
        }

        /// <summary>
        /// Gets or sets the Damping
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double? Damping { get; set; }

        /// <summary>
        /// Gets or sets the Operational
        /// </summary>
        /// <details>
        /// Used to organize parameters for operation of this function.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public FunctionalGroupModel Operational { get; set; }

        /// <summary>
        /// Gets or sets the Tuning
        /// </summary>
        /// <details>
        /// Used to organize parameters for operation of this function.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public FunctionalGroupModel Tuning { get; set; }


        #endregion
    }
    #endregion


    #region AnalogSensorArrayFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.AnalogSensorArrayFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class AnalogSensorArrayFunctionModel : BaseSensorFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalogSensorArrayFunctionModel" /> class.
        /// </summary>
        public AnalogSensorArrayFunctionModel() : this((AnalogSensorArrayFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalogSensorArrayFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public AnalogSensorArrayFunctionModel(AnalogSensorArrayFunctionModel template) : base(template)
        {
            if (template == null)
            {
                Operational = new FunctionalGroupModel();
            }
            else
            {
                Operational = new FunctionalGroupModel(template.Operational);
                if (template.RawValue is ICloneable clonableRawValue)
                {
                    RawValue = clonableRawValue.Clone() as AnalogUnitRangeModel;
                }
                if (template.SensorValue is ICloneable clonableSensorValue)
                {
                    SensorValue = clonableSensorValue.Clone() as AnalogUnitRangeModel;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Operational
        /// </summary>
        /// <details>
        /// Used to organize parameters for operation of this function.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new FunctionalGroupModel Operational
        {
            get {return (FunctionalGroupModel) base.Operational;}
            set {base.Operational = value;}
        }

        /// <summary>
        /// Gets or sets the RawValue
        /// </summary>
        /// <details>
        /// Array of calibrated and optionally compensated / filtered process values.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object RawValue { get; set; }

        /// <summary>
        /// Gets or sets the SensorValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object SensorValue { get; set; }


        #endregion
    }
    #endregion


    #region AnalogSensorFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.AnalogSensorFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class AnalogSensorFunctionModel : BaseSensorFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalogSensorFunctionModel" /> class.
        /// </summary>
        public AnalogSensorFunctionModel() : this((AnalogSensorFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalogSensorFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public AnalogSensorFunctionModel(AnalogSensorFunctionModel template) : base(template)
        {
            if (template == null)
            {
                Operational = new FunctionalGroupModel();
            }
            else
            {
                Operational = new FunctionalGroupModel(template.Operational);
                RawValue = template.RawValue;
                SensorValue = template.SensorValue;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Operational
        /// </summary>
        /// <details>
        /// Used to organize parameters for operation of this function.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new FunctionalGroupModel Operational
        {
            get {return (FunctionalGroupModel) base.Operational;}
            set {base.Operational = value;}
        }

        /// <summary>
        /// Gets or sets the RawValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double RawValue { get; set; }

        /// <summary>
        /// Gets or sets the SensorValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double SensorValue { get; set; }


        #endregion
    }
    #endregion


    #region AnalogSensorFunctionWithCompensationModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.AnalogSensorFunctionWithCompensationType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class AnalogSensorFunctionWithCompensationModel : AnalogSensorFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalogSensorFunctionWithCompensationModel" /> class.
        /// </summary>
        public AnalogSensorFunctionWithCompensationModel() : this((AnalogSensorFunctionWithCompensationModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalogSensorFunctionWithCompensationModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public AnalogSensorFunctionWithCompensationModel(AnalogSensorFunctionWithCompensationModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                CompensationValue = template.CompensationValue;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CompensationValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double CompensationValue { get; set; }


        #endregion
    }
    #endregion


    #region DiscreteSensorFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.DiscreteSensorFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class DiscreteSensorFunctionModel : BaseSensorFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteSensorFunctionModel" /> class.
        /// </summary>
        public DiscreteSensorFunctionModel() : this((DiscreteSensorFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteSensorFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public DiscreteSensorFunctionModel(DiscreteSensorFunctionModel template) : base(template)
        {
            if (template == null)
            {
                Operational = new FunctionalGroupModel();
            }
            else
            {
                Operational = new FunctionalGroupModel(template.Operational);
                SensorValue = template.SensorValue;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Operational
        /// </summary>
        /// <details>
        /// Used to organize parameters for operation of this function.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new FunctionalGroupModel Operational
        {
            get {return (FunctionalGroupModel) base.Operational;}
            set {base.Operational = value;}
        }

        /// <summary>
        /// Gets or sets the SensorValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public object SensorValue { get; set; }


        #endregion
    }
    #endregion


    #region MutliStateDiscreteSensorFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MutliStateDiscreteSensorFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class MutliStateDiscreteSensorFunctionModel : DiscreteSensorFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MutliStateDiscreteSensorFunctionModel" /> class.
        /// </summary>
        public MutliStateDiscreteSensorFunctionModel() : this((MutliStateDiscreteSensorFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MutliStateDiscreteSensorFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MutliStateDiscreteSensorFunctionModel(MutliStateDiscreteSensorFunctionModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                SensorValue = template.SensorValue;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the SensorValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new object SensorValue
        {
            get {return (Variant) (base.SensorValue??Variant.Null );}
            set {base.SensorValue = value;}
        }


        #endregion
    }
    #endregion


    #region TwoStateDiscreteSensorFunctionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.TwoStateDiscreteSensorFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class TwoStateDiscreteSensorFunctionModel : DiscreteSensorFunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="TwoStateDiscreteSensorFunctionModel" /> class.
        /// </summary>
        public TwoStateDiscreteSensorFunctionModel() : this((TwoStateDiscreteSensorFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TwoStateDiscreteSensorFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public TwoStateDiscreteSensorFunctionModel(TwoStateDiscreteSensorFunctionModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                SensorValue = template.SensorValue;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the SensorValue
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public new TwoStateDiscreteModel SensorValue
        {
            get {return (TwoStateDiscreteModel) base.SensorValue;}
            set {base.SensorValue = value;}
        }


        #endregion
    }
    #endregion


    #region CoverFunctionModel
    /// <summary>
    /// Controls a cover e.g., lid or door.
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.CoverFunctionType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class CoverFunctionModel : FunctionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="CoverFunctionModel" /> class.
        /// </summary>
        public CoverFunctionModel() : this((CoverFunctionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoverFunctionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public CoverFunctionModel(CoverFunctionModel template) : base(template)
        {
            if (template == null)
            {
                Operational = new FunctionalGroupModel();
                StateMachine = new CoverStateMachineModel();
            }
            else
            {
                Operational = new FunctionalGroupModel(template.Operational);
                StateMachine = new CoverStateMachineModel(template.StateMachine);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Operational
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public FunctionalGroupModel Operational { get; set; }

        /// <summary>
        /// Gets or sets the StateMachine
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public CoverStateMachineModel StateMachine { get; set; }


        #endregion
    }
    #endregion


    #region ProgramManagerModel
    /// <summary>
    /// The functional unit's program manager.
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ProgramManagerType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class ProgramManagerModel : TopologyElementModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramManagerModel" /> class.
        /// </summary>
        public ProgramManagerModel() : this((ProgramManagerModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramManagerModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ProgramManagerModel(ProgramManagerModel template) : base(template)
        {
            if (template == null)
            {
                ActiveProgram = new ActiveProgramModel();
                ProgramTemplateSet = new ProgramTemplateSetModel();
                ResultSet = new ResultSetModel();
            }
            else
            {
                ActiveProgram = new ActiveProgramModel(template.ActiveProgram);
                ProgramTemplateSet = new ProgramTemplateSetModel(template.ProgramTemplateSet);
                ResultSet = new ResultSetModel(template.ResultSet);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the ActiveProgram
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public ActiveProgramModel ActiveProgram { get; set; }

        /// <summary>
        /// Gets or sets the ProgramTemplateSet
        /// </summary>
        /// <details>
        /// Program templates.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public ProgramTemplateSetModel ProgramTemplateSet { get; set; }

        /// <summary>
        /// Gets or sets the ResultSet
        /// </summary>
        /// <details>
        /// Results of recent program runs.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public ResultSetModel ResultSet { get; set; }


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IProgramManagerMethods implemention = ProgramManagerMethods;

            if (implemention == null)
            {
                implemention = this as IProgramManagerMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.ProgramManagerType_ProgramTemplateSet_Download, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                string Name;
                Variant Properties;
                byte[] Data;
                Variant Data2;
                StatusCode ret = implemention.ProgramTemplateSet_Download(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString(), out Name, out Properties, out Data, out Data2);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(Name);
                    outputArguments[ 1 ] = Properties;
                    outputArguments[ 2 ] = new Variant(Data);
                    outputArguments[ 3 ] = Data2;
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.ProgramManagerType_ProgramTemplateSet_Remove, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.ProgramTemplateSet_Remove(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.ProgramManagerType_ProgramTemplateSet_Upload, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.ProgramTemplateSet_Upload(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString(), inputArguments[1], inputArguments[2].ToByteString());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the ProgramManager methods.
        /// </summary>
        /// <value>
        /// The ProgramManager methods.
        /// </value>
        public IProgramManagerMethods ProgramManagerMethods { get; set; }

        /// <summary>
        /// Sets the method dispatcher for children.
        /// </summary>
        /// <remarks>
        /// This method must be called to be able to call methods that
        /// are defined at object of the ProgramManagerType.
        /// </remarks>
        /// <param name="nodeManager">The NodeManager where LinkModelToNode is called.</param>
        /// <param name="nodeId">The NodeId that is used for calling LinkModelToNode.</param>
        public virtual void SetMethodDispatchers(
            BaseNodeManager nodeManager,
            NodeId nodeId)
        {
            nodeManager.SetChildUserData(
                nodeId,
                new QualifiedName(BrowseNames.ProgramTemplateSet, (ushort)nodeManager.Server.NamespaceUris.IndexOf(Namespaces.Lads)),
                this);
        }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the ProgramManagerModel object.
    /// </summary>
    public interface IProgramManagerMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="Name"></param>
        /// <param name="Name">out: </param>
        /// <param name="Properties">out: </param>
        /// <param name="Data">out: </param>
        /// <param name="Data2">out: </param>
        /// <returns></returns>
        StatusCode ProgramTemplateSet_Download(
            RequestContext context,
            ProgramManagerModel model,
            string Name,
            out string Name,
            out Variant Properties,
            out byte[] Data,
            out Variant Data2
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="Name"></param>
        /// <returns></returns>
        StatusCode ProgramTemplateSet_Remove(
            RequestContext context,
            ProgramManagerModel model,
            string Name
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="Name"></param>
        /// <param name="Properties"></param>
        /// <param name="Data"></param>
        /// <returns></returns>
        StatusCode ProgramTemplateSet_Upload(
            RequestContext context,
            ProgramManagerModel model,
            string Name,
            Variant Properties,
            byte[] Data
            );

    }

    #endregion


    #region MaintenanceTaskModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MaintenanceTaskType, NamespaceUri=UnifiedAutomation.Lads.Namespaces.Lads)]
    public partial class MaintenanceTaskModel : MaintenanceRequiredAlarmModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MaintenanceTaskModel" /> class.
        /// </summary>
        public MaintenanceTaskModel() : this((MaintenanceTaskModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MaintenanceTaskModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MaintenanceTaskModel(MaintenanceTaskModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

            if (template == null)
            {
                MaintenanceState = new MaintenanceEventStateMachineModel();
            }
            else
            {
                if (template.ConfigurationChanged != null)
                {
                    ConfigurationChanged = template.ConfigurationChanged;
                }
                if (template.EstimatedDowntime != null)
                {
                    EstimatedDowntime = template.EstimatedDowntime;
                }
                if (template.LastExecutionDate != null)
                {
                    LastExecutionDate = template.LastExecutionDate;
                }
                if (template.LastOperatingCycles != null)
                {
                    LastOperatingCycles = template.LastOperatingCycles;
                }
                if (template.LastOperatingTime != null)
                {
                    LastOperatingTime = template.LastOperatingTime;
                }
                if (template.MaintenanceMethod != null)
                {
                    MaintenanceMethod = template.MaintenanceMethod;
                }
                MaintenanceState = new MaintenanceEventStateMachineModel(template.MaintenanceState);
                if (template.MaintenanceSupplier != null)
                {
                    MaintenanceSupplier = template.MaintenanceSupplier.Clone() as NameNodeIdDataType;
                }
                if (template.NextOperatingCycles != null)
                {
                    NextOperatingCycles = template.NextOperatingCycles;
                }
                if (template.NextOperatingTime != null)
                {
                    NextOperatingTime = template.NextOperatingTime;
                }
                if (template.PartsOfAssetReplaced != null)
                {
                    PartsOfAssetReplaced = template.PartsOfAssetReplaced.Clone() as NameNodeIdDataType[];
                }
                if (template.PartsOfAssetServiced != null)
                {
                    PartsOfAssetServiced = template.PartsOfAssetServiced.Clone() as NameNodeIdDataType[];
                }
                if (template.PlannedDate != null)
                {
                    PlannedDate = template.PlannedDate;
                }
                if (template.QualificationOfPersonnel != null)
                {
                    QualificationOfPersonnel = template.QualificationOfPersonnel.Clone() as NameNodeIdDataType;
                }
                if (template.RecurrencePeriod != null)
                {
                    RecurrencePeriod = template.RecurrencePeriod;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the ConfigurationChanged
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public bool? ConfigurationChanged { get; set; }

        /// <summary>
        /// Gets or sets the EstimatedDowntime
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public double? EstimatedDowntime { get; set; }

        /// <summary>
        /// Gets or sets the LastExecutionDate
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public DateTime? LastExecutionDate { get; set; }

        /// <summary>
        /// Gets or sets the LastOperatingCycles
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public uint? LastOperatingCycles { get; set; }

        /// <summary>
        /// Gets or sets the LastOperatingTime
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double? LastOperatingTime { get; set; }

        /// <summary>
        /// Gets or sets the MaintenanceMethod
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public MaintenanceMethodEnum? MaintenanceMethod { get; set; }

        /// <summary>
        /// Gets or sets the MaintenanceState
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public MaintenanceEventStateMachineModel MaintenanceState { get; set; }

        /// <summary>
        /// Gets or sets the MaintenanceSupplier
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public NameNodeIdDataType MaintenanceSupplier { get; set; }

        /// <summary>
        /// Gets or sets the NextOperatingCycles
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public uint? NextOperatingCycles { get; set; }

        /// <summary>
        /// Gets or sets the NextOperatingTime
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double? NextOperatingTime { get; set; }

        /// <summary>
        /// Gets or sets the PartsOfAssetReplaced
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public NameNodeIdDataType[] PartsOfAssetReplaced { get; set; }

        /// <summary>
        /// Gets or sets the PartsOfAssetServiced
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public NameNodeIdDataType[] PartsOfAssetServiced { get; set; }

        /// <summary>
        /// Gets or sets the PlannedDate
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public DateTime? PlannedDate { get; set; }

        /// <summary>
        /// Gets or sets the QualificationOfPersonnel
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public NameNodeIdDataType QualificationOfPersonnel { get; set; }

        /// <summary>
        /// Gets or sets the RecurrencePeriod
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Lads)]
        public double? RecurrencePeriod { get; set; }


        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }

            // ConfigurationChanged
            if (this.ConfigurationChanged != null)
            {
                if (m_FieldHandles.ConfigurationChanged == 0)
                {
                    Error. Invalid BrowseName NamespaceIndex. Template line 130.
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.ConfigurationChanged))
                {
                    e.Set(m_FieldHandles.ConfigurationChanged, this.ConfigurationChanged.Value);
                }
            }

            // EstimatedDowntime
            if (this.EstimatedDowntime != null)
            {
                if (m_FieldHandles.EstimatedDowntime == 0)
                {
                    Error. Invalid BrowseName NamespaceIndex. Template line 130.
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.EstimatedDowntime))
                {
                    e.Set(m_FieldHandles.EstimatedDowntime, this.EstimatedDowntime.Value);
                }
            }

            // LastExecutionDate
            if (this.LastExecutionDate != null)
            {
                if (m_FieldHandles.LastExecutionDate == 0)
                {
                    string name = AbsoluteName.ToString(new AbsoluteName(BrowseNames.LastExecutionDate, Namespaces.Lads), e.Manager.NamespaceUris);
                    m_FieldHandles.LastExecutionDate = e.Manager.CreateFieldHandle(name);
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.LastExecutionDate))
                {
                    e.Set(m_FieldHandles.LastExecutionDate, this.LastExecutionDate.Value);
                }
            }

            // LastOperatingCycles
            if (this.LastOperatingCycles != null)
            {
                if (m_FieldHandles.LastOperatingCycles == 0)
                {
                    string name = AbsoluteName.ToString(new AbsoluteName(BrowseNames.LastOperatingCycles, Namespaces.Lads), e.Manager.NamespaceUris);
                    m_FieldHandles.LastOperatingCycles = e.Manager.CreateFieldHandle(name);
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.LastOperatingCycles))
                {
                    e.Set(m_FieldHandles.LastOperatingCycles, this.LastOperatingCycles.Value);
                }
            }

            // LastOperatingTime
            if (this.LastOperatingTime != null)
            {
                if (m_FieldHandles.LastOperatingTime == 0)
                {
                    string name = AbsoluteName.ToString(new AbsoluteName(BrowseNames.LastOperatingTime, Namespaces.Lads), e.Manager.NamespaceUris);
                    m_FieldHandles.LastOperatingTime = e.Manager.CreateFieldHandle(name);
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.LastOperatingTime))
                {
                    e.Set(m_FieldHandles.LastOperatingTime, this.LastOperatingTime.Value);
                }
            }

            // MaintenanceMethod
            if (this.MaintenanceMethod != null)
            {
                if (m_FieldHandles.MaintenanceMethod == 0)
                {
                    Error. Invalid BrowseName NamespaceIndex. Template line 130.
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.MaintenanceMethod))
                {
                    e.Set(m_FieldHandles.MaintenanceMethod, (int) this.MaintenanceMethod);
                }
            }

            // MaintenanceSupplier
            if (this.MaintenanceSupplier != null)
            {
                if (m_FieldHandles.MaintenanceSupplier == 0)
                {
                    Error. Invalid BrowseName NamespaceIndex. Template line 130.
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.MaintenanceSupplier))
                {
                    e.Set(m_FieldHandles.MaintenanceSupplier, new Variant(this.MaintenanceSupplier));
                }
            }

            // NextOperatingCycles
            if (this.NextOperatingCycles != null)
            {
                if (m_FieldHandles.NextOperatingCycles == 0)
                {
                    string name = AbsoluteName.ToString(new AbsoluteName(BrowseNames.NextOperatingCycles, Namespaces.Lads), e.Manager.NamespaceUris);
                    m_FieldHandles.NextOperatingCycles = e.Manager.CreateFieldHandle(name);
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.NextOperatingCycles))
                {
                    e.Set(m_FieldHandles.NextOperatingCycles, this.NextOperatingCycles.Value);
                }
            }

            // NextOperatingTime
            if (this.NextOperatingTime != null)
            {
                if (m_FieldHandles.NextOperatingTime == 0)
                {
                    string name = AbsoluteName.ToString(new AbsoluteName(BrowseNames.NextOperatingTime, Namespaces.Lads), e.Manager.NamespaceUris);
                    m_FieldHandles.NextOperatingTime = e.Manager.CreateFieldHandle(name);
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.NextOperatingTime))
                {
                    e.Set(m_FieldHandles.NextOperatingTime, this.NextOperatingTime.Value);
                }
            }

            // PartsOfAssetReplaced
            if (this.PartsOfAssetReplaced != null)
            {
                if (m_FieldHandles.PartsOfAssetReplaced == 0)
                {
                    Error. Invalid BrowseName NamespaceIndex. Template line 130.
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.PartsOfAssetReplaced))
                {
                    e.Set(m_FieldHandles.PartsOfAssetReplaced, new Variant((IEnumerable<IEncodeable>)this.PartsOfAssetReplaced));
                }
            }

            // PartsOfAssetServiced
            if (this.PartsOfAssetServiced != null)
            {
                if (m_FieldHandles.PartsOfAssetServiced == 0)
                {
                    Error. Invalid BrowseName NamespaceIndex. Template line 130.
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.PartsOfAssetServiced))
                {
                    e.Set(m_FieldHandles.PartsOfAssetServiced, new Variant((IEnumerable<IEncodeable>)this.PartsOfAssetServiced));
                }
            }

            // PlannedDate
            if (this.PlannedDate != null)
            {
                if (m_FieldHandles.PlannedDate == 0)
                {
                    Error. Invalid BrowseName NamespaceIndex. Template line 130.
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.PlannedDate))
                {
                    e.Set(m_FieldHandles.PlannedDate, this.PlannedDate.Value);
                }
            }

            // QualificationOfPersonnel
            if (this.QualificationOfPersonnel != null)
            {
                if (m_FieldHandles.QualificationOfPersonnel == 0)
                {
                    Error. Invalid BrowseName NamespaceIndex. Template line 130.
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.QualificationOfPersonnel))
                {
                    e.Set(m_FieldHandles.QualificationOfPersonnel, new Variant(this.QualificationOfPersonnel));
                }
            }

            // RecurrencePeriod
            if (this.RecurrencePeriod != null)
            {
                if (m_FieldHandles.RecurrencePeriod == 0)
                {
                    string name = AbsoluteName.ToString(new AbsoluteName(BrowseNames.RecurrencePeriod, Namespaces.Lads), e.Manager.NamespaceUris);
                    m_FieldHandles.RecurrencePeriod = e.Manager.CreateFieldHandle(name);
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.RecurrencePeriod))
                {
                    e.Set(m_FieldHandles.RecurrencePeriod, this.RecurrencePeriod.Value);
                }
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
            public int ConfigurationChanged;
            public int EstimatedDowntime;
            public int LastExecutionDate;
            public int LastOperatingCycles;
            public int LastOperatingTime;
            public int MaintenanceMethod;
            public int MaintenanceSupplier;
            public int NextOperatingCycles;
            public int NextOperatingTime;
            public int PartsOfAssetReplaced;
            public int PartsOfAssetServiced;
            public int PlannedDate;
            public int QualificationOfPersonnel;
            public int RecurrencePeriod;
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public override CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public override StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IMaintenanceTaskMethods implemention = ConditionMethods as IMaintenanceTaskMethods;

            if (implemention == null)
            {
                implemention = this as IMaintenanceTaskMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.MaintenanceTaskType_Reset, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Reset(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.MaintenanceTaskType_Start, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Start(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(UnifiedAutomation.Lads.Methods.MaintenanceTaskType_Stop, UnifiedAutomation.Lads.Namespaces.Lads).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.Stop(context, this, inputArguments[0].GetValue<MaintenanceTaskStopResultEnum>(new MaintenanceTaskStopResultEnum()), inputArguments[1].ToLocalizedText());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return base.DispatchMethod(
                context,
                methodHandle,
                inputArguments,
                inputArgumentResults,
                outputArguments);
        }

        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the MaintenanceTaskModel object.
    /// </summary>
    public interface IMaintenanceTaskMethods : IAlarmConditionMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Reset(
            RequestContext context,
            MaintenanceTaskModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Start(
            RequestContext context,
            MaintenanceTaskModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="MaintenanceTaskStopResult"></param>
        /// <param name="Comment"></param>
        /// <returns></returns>
        StatusCode Stop(
            RequestContext context,
            MaintenanceTaskModel model,
            MaintenanceTaskStopResultEnum MaintenanceTaskStopResult,
            LocalizedText Comment
            );

    }

    #endregion



}
