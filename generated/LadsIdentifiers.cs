/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.8, using .NET Server 3.2.0 template (version 0)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**
**     Generated by gresser <enrico.gresser@brand.de>
** </auto-generated>
**
** Copyright (c) 2006-2023 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://opcfoundation.org/UA/LADS/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
** Created: 25.03.2023
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Runtime.Serialization;
using UnifiedAutomation.UaBase;

namespace UnifiedAutomation.Lads
{
    #region DataType Identifiers
    /// <summary>
    /// A class that declares constants for all DataTypes in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.8")]
    public static partial class DataTypes
    {
        /// <summary>
        /// The identifier for the MaintenanceTaskStopResultEnum DataType.
        /// </summary>
        public const uint MaintenanceTaskStopResultEnum = 3000;

        /// <summary>
        /// The identifier for the KeyValueType DataType.
        /// </summary>
        public const uint KeyValueType = 3003;

        /// <summary>
        /// The identifier for the SampleInfoType DataType.
        /// </summary>
        public const uint SampleInfoType = 3002;

    }
    #endregion

    #region Object Identifiers
    /// <summary>
    /// A class that declares constants for all Objects in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.8")]
    public static partial class Objects
    {
        /// <summary>
        /// The identifier for the MaintenanceState Object.
        /// </summary>
        public const uint MaintenanceTaskType_MaintenanceState = 5066;

        /// <summary>
        /// The identifier for the ProgramTemplate Object.
        /// </summary>
        public const uint ActiveProgramType_ProgramTemplate = 5247;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint ControllerParameterType_Operational = 5018;

        /// <summary>
        /// The identifier for the &lt;MaintenanceTask&gt; Object.
        /// </summary>
        public const uint LADSMaintenanceSetType_S_MaintenanceTask_ = 5063;

        /// <summary>
        /// The identifier for the &lt;SetElement&gt; Object.
        /// </summary>
        public const uint SetType_S_SetElement_ = 5014;

        /// <summary>
        /// The identifier for the &lt;SetElement&gt; Object.
        /// </summary>
        public const uint ControllerParameterSetType_S_SetElement_ = 5023;

        /// <summary>
        /// The identifier for the &lt;SetElement&gt; Object.
        /// </summary>
        public const uint FunctionalUnitSetType_S_SetElement_ = 5016;

        /// <summary>
        /// The identifier for the &lt;SetElement&gt; Object.
        /// </summary>
        public const uint FunctionSetType_S_SetElement_ = 5027;

        /// <summary>
        /// The identifier for the AlarmMonitor Object.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor = 5068;

        /// <summary>
        /// The identifier for the LimitState Object.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_LimitState = 5071;

        /// <summary>
        /// The identifier for the TargetValueSet Object.
        /// </summary>
        public const uint AnalogControlFunctionWithComposedTargetValueType_TargetValueSet = 5087;

        /// <summary>
        /// The identifier for the &lt;Data&gt; Object.
        /// </summary>
        public const uint VariableSetType_S_Data_ = 5086;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType_Operational = 5059;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint AnalogControlFunctionType_Operational = 5009;

        /// <summary>
        /// The identifier for the ContollerTuningParameter Object.
        /// </summary>
        public const uint BaseControlFunctionType_ContollerTuningParameter = 5001;

        /// <summary>
        /// The identifier for the ControllerModeSet Object.
        /// </summary>
        public const uint MultiModeAnalogControlFunctionType_ControllerModeSet = 5076;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint MultiModeAnalogControlFunctionType_Operational = 5058;

        /// <summary>
        /// The identifier for the ControllerParameterSet Object.
        /// </summary>
        public const uint MultiParameterAnalogControlFunctionType_ControllerParameterSet = 5080;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint BaseControlFunctionType_Operational = 5046;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_Operational = 5017;

        /// <summary>
        /// The identifier for the StateMachine Object.
        /// </summary>
        public const uint BaseControlFunctionType_StateMachine = 5038;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint TimerFunctionType_Operational = 5113;

        /// <summary>
        /// The identifier for the AlarmMonitor Object.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor = 5069;

        /// <summary>
        /// The identifier for the LimitState Object.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_LimitState = 5070;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint AnalogSensorArrayFunctionType_Operational = 5006;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint AnalogSensorFunctionType_Operational = 5024;

        /// <summary>
        /// The identifier for the Calibration Object.
        /// </summary>
        public const uint BaseSensorFunctionType_Calibration = 5135;

        /// <summary>
        /// The identifier for the Configuration Object.
        /// </summary>
        public const uint BaseSensorFunctionType_Configuration = 5030;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint DiscreteSensorFunctionType_Operational = 5061;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint BaseSensorFunctionType_Operational = 5011;

        /// <summary>
        /// The identifier for the Tuning Object.
        /// </summary>
        public const uint BaseSensorFunctionType_Tuning = 5010;

        /// <summary>
        /// The identifier for the Configuration Object.
        /// </summary>
        public const uint FunctionType_Configuration = 5012;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint CoverFunctionType_Operational = 5064;

        /// <summary>
        /// The identifier for the StateMachine Object.
        /// </summary>
        public const uint CoverFunctionType_StateMachine = 5055;

        /// <summary>
        /// The identifier for the Closed Object.
        /// </summary>
        public const uint CoverStateMachineType_Closed = 5028;

        /// <summary>
        /// The identifier for the ClosedToError Object.
        /// </summary>
        public const uint CoverStateMachineType_ClosedToError = 5079;

        /// <summary>
        /// The identifier for the Error Object.
        /// </summary>
        public const uint CoverStateMachineType_Error = 5050;

        /// <summary>
        /// The identifier for the ClosedToLocked Object.
        /// </summary>
        public const uint CoverStateMachineType_ClosedToLocked = 5075;

        /// <summary>
        /// The identifier for the Locked Object.
        /// </summary>
        public const uint CoverStateMachineType_Locked = 5049;

        /// <summary>
        /// The identifier for the ClosedToOpened Object.
        /// </summary>
        public const uint CoverStateMachineType_ClosedToOpened = 5074;

        /// <summary>
        /// The identifier for the Opened Object.
        /// </summary>
        public const uint CoverStateMachineType_Opened = 5025;

        /// <summary>
        /// The identifier for the ErrorToOpened Object.
        /// </summary>
        public const uint CoverStateMachineType_ErrorToOpened = 5082;

        /// <summary>
        /// The identifier for the LockedToClosed Object.
        /// </summary>
        public const uint CoverStateMachineType_LockedToClosed = 5077;

        /// <summary>
        /// The identifier for the LockedToError Object.
        /// </summary>
        public const uint CoverStateMachineType_LockedToError = 5078;

        /// <summary>
        /// The identifier for the OpenedToClosed Object.
        /// </summary>
        public const uint CoverStateMachineType_OpenedToClosed = 5000;

        /// <summary>
        /// The identifier for the FunctionSet Object.
        /// </summary>
        public const uint FunctionType_FunctionSet = 5013;

        /// <summary>
        /// The identifier for the ActiveProgram Object.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram = 5190;

        /// <summary>
        /// The identifier for the ProgramTemplateSet Object.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet = 5020;

        /// <summary>
        /// The identifier for the &lt;SetElement&gt; Object.
        /// </summary>
        public const uint ProgramTemplateSetType_S_SetElement_ = 5029;

        /// <summary>
        /// The identifier for the ResultSet Object.
        /// </summary>
        public const uint ProgramManagerType_ResultSet = 5019;

        /// <summary>
        /// The identifier for the &lt;SetElement&gt; Object.
        /// </summary>
        public const uint ResultSetType_S_SetElement_ = 5062;

        /// <summary>
        /// The identifier for the FileSet Object.
        /// </summary>
        public const uint ResultType_FileSet = 5081;

        /// <summary>
        /// The identifier for the &lt;SetElement&gt; Object.
        /// </summary>
        public const uint ResultFileSetType_S_SetElement_ = 5060;

        /// <summary>
        /// The identifier for the File Object.
        /// </summary>
        public const uint ResultFileType_File = 5072;

        /// <summary>
        /// The identifier for the ProgramTemplate Object.
        /// </summary>
        public const uint ResultType_ProgramTemplate = 5112;

        /// <summary>
        /// The identifier for the VariableSet Object.
        /// </summary>
        public const uint ResultType_VariableSet = 5067;

        /// <summary>
        /// The identifier for the Complete Object.
        /// </summary>
        public const uint RunningStateMachineType_Complete = 5128;

        /// <summary>
        /// The identifier for the CompleteToResetting Object.
        /// </summary>
        public const uint RunningStateMachineType_CompleteToResetting = 5035;

        /// <summary>
        /// The identifier for the Resetting Object.
        /// </summary>
        public const uint RunningStateMachineType_Resetting = 5119;

        /// <summary>
        /// The identifier for the Completing Object.
        /// </summary>
        public const uint RunningStateMachineType_Completing = 5127;

        /// <summary>
        /// The identifier for the CompletingToComplete Object.
        /// </summary>
        public const uint RunningStateMachineType_CompletingToComplete = 5034;

        /// <summary>
        /// The identifier for the Execute Object.
        /// </summary>
        public const uint RunningStateMachineType_Execute = 5168;

        /// <summary>
        /// The identifier for the ExecuteToCompleting Object.
        /// </summary>
        public const uint RunningStateMachineType_ExecuteToCompleting = 5033;

        /// <summary>
        /// The identifier for the ExecuteToHolding Object.
        /// </summary>
        public const uint RunningStateMachineType_ExecuteToHolding = 5051;

        /// <summary>
        /// The identifier for the Holding Object.
        /// </summary>
        public const uint RunningStateMachineType_Holding = 5123;

        /// <summary>
        /// The identifier for the ExecuteToSuspending Object.
        /// </summary>
        public const uint RunningStateMachineType_ExecuteToSuspending = 5037;

        /// <summary>
        /// The identifier for the Suspending Object.
        /// </summary>
        public const uint RunningStateMachineType_Suspending = 5118;

        /// <summary>
        /// The identifier for the Held Object.
        /// </summary>
        public const uint RunningStateMachineType_Held = 5124;

        /// <summary>
        /// The identifier for the HeldToUnholding Object.
        /// </summary>
        public const uint RunningStateMachineType_HeldToUnholding = 5053;

        /// <summary>
        /// The identifier for the Unholding Object.
        /// </summary>
        public const uint RunningStateMachineType_Unholding = 5125;

        /// <summary>
        /// The identifier for the HoldingToHeld Object.
        /// </summary>
        public const uint RunningStateMachineType_HoldingToHeld = 5052;

        /// <summary>
        /// The identifier for the Idle Object.
        /// </summary>
        public const uint RunningStateMachineType_Idle = 5120;

        /// <summary>
        /// The identifier for the IdleToStarting Object.
        /// </summary>
        public const uint RunningStateMachineType_IdleToStarting = 5031;

        /// <summary>
        /// The identifier for the Starting Object.
        /// </summary>
        public const uint RunningStateMachineType_Starting = 5117;

        /// <summary>
        /// The identifier for the ResettingToIdle Object.
        /// </summary>
        public const uint RunningStateMachineType_ResettingToIdle = 5036;

        /// <summary>
        /// The identifier for the StartingToExecute Object.
        /// </summary>
        public const uint RunningStateMachineType_StartingToExecute = 5032;

        /// <summary>
        /// The identifier for the StartingToHolding Object.
        /// </summary>
        public const uint RunningStateMachineType_StartingToHolding = 5131;

        /// <summary>
        /// The identifier for the Suspended Object.
        /// </summary>
        public const uint RunningStateMachineType_Suspended = 5121;

        /// <summary>
        /// The identifier for the SuspendedToHolding Object.
        /// </summary>
        public const uint RunningStateMachineType_SuspendedToHolding = 5132;

        /// <summary>
        /// The identifier for the SuspendedToUnsuspending Object.
        /// </summary>
        public const uint RunningStateMachineType_SuspendedToUnsuspending = 5040;

        /// <summary>
        /// The identifier for the Unsuspending Object.
        /// </summary>
        public const uint RunningStateMachineType_Unsuspending = 5122;

        /// <summary>
        /// The identifier for the SuspendingToHolding Object.
        /// </summary>
        public const uint RunningStateMachineType_SuspendingToHolding = 5129;

        /// <summary>
        /// The identifier for the SuspendingToSuspended Object.
        /// </summary>
        public const uint RunningStateMachineType_SuspendingToSuspended = 5039;

        /// <summary>
        /// The identifier for the UnholdingToExecute Object.
        /// </summary>
        public const uint RunningStateMachineType_UnholdingToExecute = 5054;

        /// <summary>
        /// The identifier for the UnholdingToHolding Object.
        /// </summary>
        public const uint RunningStateMachineType_UnholdingToHolding = 5134;

        /// <summary>
        /// The identifier for the UnsuspendingToExecute Object.
        /// </summary>
        public const uint RunningStateMachineType_UnsuspendingToExecute = 5041;

        /// <summary>
        /// The identifier for the UnsuspendingToHolding Object.
        /// </summary>
        public const uint RunningStateMachineType_UnsuspendingToHolding = 5133;

        /// <summary>
        /// The identifier for the &lt;SetElement&gt; Object.
        /// </summary>
        public const uint SupportedPropertiesSetType__SetElement = 5048;

        /// <summary>
        /// The identifier for the FunctionSet Object.
        /// </summary>
        public const uint FunctionalUnitType_FunctionSet = 5008;

        /// <summary>
        /// The identifier for the Identification Object.
        /// </summary>
        public const uint FunctionalUnitType_Identification = 5003;

        /// <summary>
        /// The identifier for the Lock Object.
        /// </summary>
        public const uint FunctionalUnitType_Lock = 5004;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint FunctionalUnitType_Operational = 5007;

        /// <summary>
        /// The identifier for the ProgramManager Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager = 5015;

        /// <summary>
        /// The identifier for the ActiveProgram Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram = 5218;

        /// <summary>
        /// The identifier for the ProgramTemplate Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate = 5250;

        /// <summary>
        /// The identifier for the StateMachine Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine = 5220;

        /// <summary>
        /// The identifier for the RunningStateMachine Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine = 5229;

        /// <summary>
        /// The identifier for the RunningStateMachine Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine = 5233;

        /// <summary>
        /// The identifier for the ProgramTemplateSet Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet = 5021;

        /// <summary>
        /// The identifier for the ResultSet Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ResultSet = 5022;

        /// <summary>
        /// The identifier for the StateMachine Object.
        /// </summary>
        public const uint FunctionalUnitType_StateMachine = 5005;

        /// <summary>
        /// The identifier for the RunningStateMachine Object.
        /// </summary>
        public const uint FunctionalUnitType_StateMachine_RunningStateMachine = 5047;

        /// <summary>
        /// The identifier for the SupportedPropertiesSet Object.
        /// </summary>
        public const uint FunctionalUnitType_SupportedPropertiesSet = 5116;

        /// <summary>
        /// The identifier for the &lt;Component&gt; Object.
        /// </summary>
        public const uint ComponentSetType_S_Component_ = 5065;

        /// <summary>
        /// The identifier for the Components Object.
        /// </summary>
        public const uint LADSComponentType_Components = 5073;

        /// <summary>
        /// The identifier for the DeviceHealthAlarms Object.
        /// </summary>
        public const uint LADSComponentType_DeviceHealthAlarms = 5258;

        /// <summary>
        /// The identifier for the Identification Object.
        /// </summary>
        public const uint LADSComponentType_Identification = 5095;

        /// <summary>
        /// The identifier for the Maintenance Object.
        /// </summary>
        public const uint LADSComponentType_Maintenance = 5106;

        /// <summary>
        /// The identifier for the OperationCounters Object.
        /// </summary>
        public const uint LADSComponentType_OperationCounters = 5109;

        /// <summary>
        /// The identifier for the Aborted Object.
        /// </summary>
        public const uint FunctionalStateMachineType_Aborted = 5160;

        /// <summary>
        /// The identifier for the AbortedToClearing Object.
        /// </summary>
        public const uint FunctionalStateMachineType_AbortedToClearing = 5165;

        /// <summary>
        /// The identifier for the Clearing Object.
        /// </summary>
        public const uint FunctionalStateMachineType_Clearing = 5143;

        /// <summary>
        /// The identifier for the Aborting Object.
        /// </summary>
        public const uint FunctionalStateMachineType_Aborting = 5159;

        /// <summary>
        /// The identifier for the AbortingToAborted Object.
        /// </summary>
        public const uint FunctionalStateMachineType_AbortingToAborted = 5126;

        /// <summary>
        /// The identifier for the ClearingToStopped Object.
        /// </summary>
        public const uint FunctionalStateMachineType_ClearingToStopped = 5104;

        /// <summary>
        /// The identifier for the Stopped Object.
        /// </summary>
        public const uint FunctionalStateMachineType_Stopped = 5085;

        /// <summary>
        /// The identifier for the Running Object.
        /// </summary>
        public const uint FunctionalStateMachineType_Running = 5099;

        /// <summary>
        /// The identifier for the RunningStateMachine Object.
        /// </summary>
        public const uint FunctionalStateMachineType_RunningStateMachine = 5130;

        /// <summary>
        /// The identifier for the RunningToAborting Object.
        /// </summary>
        public const uint FunctionalStateMachineType_RunningToAborting = 5103;

        /// <summary>
        /// The identifier for the RunningToStopping Object.
        /// </summary>
        public const uint FunctionalStateMachineType_RunningToStopping = 5105;

        /// <summary>
        /// The identifier for the Stopping Object.
        /// </summary>
        public const uint FunctionalStateMachineType_Stopping = 5100;

        /// <summary>
        /// The identifier for the StoppedToRunning Object.
        /// </summary>
        public const uint FunctionalStateMachineType_StoppedToRunning = 5102;

        /// <summary>
        /// The identifier for the StoppingToStopped Object.
        /// </summary>
        public const uint FunctionalStateMachineType_StoppingToStopped = 5101;

        /// <summary>
        /// The identifier for the Maintenance Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Maintenance = 5179;

        /// <summary>
        /// The identifier for the MaintenanceToOperating Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_MaintenanceToOperating = 5183;

        /// <summary>
        /// The identifier for the Operating Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Operating = 5178;

        /// <summary>
        /// The identifier for the MaintenanceToShutdown Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_MaintenanceToShutdown = 5185;

        /// <summary>
        /// The identifier for the Shutdown Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Shutdown = 5180;

        /// <summary>
        /// The identifier for the OperatingToMaintenance Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_OperatingToMaintenance = 5182;

        /// <summary>
        /// The identifier for the OperatingToShutdown Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_OperatingToShutdown = 5184;

        /// <summary>
        /// The identifier for the OperatingToStandby Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_OperatingToStandby = 5260;

        /// <summary>
        /// The identifier for the Standby Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Standby = 5259;

        /// <summary>
        /// The identifier for the Powerup Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Powerup = 5177;

        /// <summary>
        /// The identifier for the PowerupToOperating Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_PowerupToOperating = 5181;

        /// <summary>
        /// The identifier for the StandbyToOperating Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_StandbyToOperating = 5083;

        /// <summary>
        /// The identifier for the Components Object.
        /// </summary>
        public const uint LADSDeviceType_Components = 5111;

        /// <summary>
        /// The identifier for the FunctionalUnitSet Object.
        /// </summary>
        public const uint LADSDeviceType_FunctionalUnitSet = 5002;

        /// <summary>
        /// The identifier for the Identification Object.
        /// </summary>
        public const uint LADSDeviceType_Identification = 5096;

        /// <summary>
        /// The identifier for the Maintenance Object.
        /// </summary>
        public const uint LADSDeviceType_Maintenance = 5092;

        /// <summary>
        /// The identifier for the OperationCounters Object.
        /// </summary>
        public const uint LADSDeviceType_OperationCounters = 5108;

        /// <summary>
        /// The identifier for the StateMachine Object.
        /// </summary>
        public const uint LADSDeviceType_StateMachine = 5191;

        /// <summary>
        /// The identifier for the Default Binary Object.
        /// </summary>
        public const uint KeyValueType_Encoding_DefaultBinary = 5045;

        /// <summary>
        /// The identifier for the Default JSON Object.
        /// </summary>
        public const uint KeyValueType_Encoding_DefaultJson = 5057;

        /// <summary>
        /// The identifier for the Default XML Object.
        /// </summary>
        public const uint KeyValueType_Encoding_DefaultXml = 5056;

        /// <summary>
        /// The identifier for the Default Binary Object.
        /// </summary>
        public const uint SampleInfoType_Encoding_DefaultBinary = 5042;

        /// <summary>
        /// The identifier for the Default JSON Object.
        /// </summary>
        public const uint SampleInfoType_Encoding_DefaultJson = 5044;

        /// <summary>
        /// The identifier for the Default XML Object.
        /// </summary>
        public const uint SampleInfoType_Encoding_DefaultXml = 5043;

        /// <summary>
        /// The identifier for the http://opcfoundation.org/UA/LADS/ Object.
        /// </summary>
        public const uint _http___opcfoundation_org_UA_lads_ = 5026;

    }
    #endregion

    #region ObjectType Identifiers
    /// <summary>
    /// A class that declares constants for all ObjectTypes in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.8")]
    public static partial class ObjectTypes
    {
        /// <summary>
        /// The identifier for the ActiveProgramType ObjectType.
        /// </summary>
        public const uint ActiveProgramType = 1040;

        /// <summary>
        /// The identifier for the MaintenanceTaskType ObjectType.
        /// </summary>
        public const uint MaintenanceTaskType = 1028;

        /// <summary>
        /// The identifier for the ControllerParameterType ObjectType.
        /// </summary>
        public const uint ControllerParameterType = 1048;

        /// <summary>
        /// The identifier for the ControllerTuningParameterType ObjectType.
        /// </summary>
        public const uint ControllerTuningParameterType = 1008;

        /// <summary>
        /// The identifier for the PidControllerParameterType ObjectType.
        /// </summary>
        public const uint PidControllerParameterType = 1030;

        /// <summary>
        /// The identifier for the LADSMaintenanceSetType ObjectType.
        /// </summary>
        public const uint LADSMaintenanceSetType = 1027;

        /// <summary>
        /// The identifier for the LADSOperationCountersType ObjectType.
        /// </summary>
        public const uint LADSOperationCountersType = 1034;

        /// <summary>
        /// The identifier for the SetType ObjectType.
        /// </summary>
        public const uint SetType = 1041;

        /// <summary>
        /// The identifier for the ControllerParameterSetType ObjectType.
        /// </summary>
        public const uint ControllerParameterSetType = 1049;

        /// <summary>
        /// The identifier for the FunctionalUnitSetType ObjectType.
        /// </summary>
        public const uint FunctionalUnitSetType = 1023;

        /// <summary>
        /// The identifier for the FunctionSetType ObjectType.
        /// </summary>
        public const uint FunctionSetType = 1026;

        /// <summary>
        /// The identifier for the ProgramTemplateSetType ObjectType.
        /// </summary>
        public const uint ProgramTemplateSetType = 1019;

        /// <summary>
        /// The identifier for the ResultFileSetType ObjectType.
        /// </summary>
        public const uint ResultFileSetType = 1022;

        /// <summary>
        /// The identifier for the ResultSetType ObjectType.
        /// </summary>
        public const uint ResultSetType = 1020;

        /// <summary>
        /// The identifier for the SupportedPropertiesSetType  ObjectType.
        /// </summary>
        public const uint SupportedPropertiesSetType_ = 1033;

        /// <summary>
        /// The identifier for the VariableSetType ObjectType.
        /// </summary>
        public const uint VariableSetType = 61;

        /// <summary>
        /// The identifier for the ComponentSetType ObjectType.
        /// </summary>
        public const uint ComponentSetType = 1025;

        /// <summary>
        /// The identifier for the ProgramTemplateType ObjectType.
        /// </summary>
        public const uint ProgramTemplateType = 1018;

        /// <summary>
        /// The identifier for the ResultFileType ObjectType.
        /// </summary>
        public const uint ResultFileType = 1001;

        /// <summary>
        /// The identifier for the ResultType ObjectType.
        /// </summary>
        public const uint ResultType = 1021;

        /// <summary>
        /// The identifier for the CoverStateMachineType ObjectType.
        /// </summary>
        public const uint CoverStateMachineType = 1010;

        /// <summary>
        /// The identifier for the FunctionalStateMachineType ObjectType.
        /// </summary>
        public const uint FunctionalStateMachineType = 1038;

        /// <summary>
        /// The identifier for the ActiveProgramStateMachineType ObjectType.
        /// </summary>
        public const uint ActiveProgramStateMachineType = 1046;

        /// <summary>
        /// The identifier for the ControlFunctionStateMachineType ObjectType.
        /// </summary>
        public const uint ControlFunctionStateMachineType = 1044;

        /// <summary>
        /// The identifier for the FunctionalUnitStateMachineType ObjectType.
        /// </summary>
        public const uint FunctionalUnitStateMachineType = 1043;

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType ObjectType.
        /// </summary>
        public const uint LADSDeviceStateMachineType = 1039;

        /// <summary>
        /// The identifier for the RunningStateMachineType ObjectType.
        /// </summary>
        public const uint RunningStateMachineType = 1036;

        /// <summary>
        /// The identifier for the SupportedPropertyType ObjectType.
        /// </summary>
        public const uint SupportedPropertyType = 1035;

        /// <summary>
        /// The identifier for the LADSDeviceType ObjectType.
        /// </summary>
        public const uint LADSDeviceType = 1002;

        /// <summary>
        /// The identifier for the LADSComponentType ObjectType.
        /// </summary>
        public const uint LADSComponentType = 1024;

        /// <summary>
        /// The identifier for the FunctionalUnitType ObjectType.
        /// </summary>
        public const uint FunctionalUnitType = 1003;

        /// <summary>
        /// The identifier for the FunctionType ObjectType.
        /// </summary>
        public const uint FunctionType = 1004;

        /// <summary>
        /// The identifier for the BaseControlFunctionType ObjectType.
        /// </summary>
        public const uint BaseControlFunctionType = 1007;

        /// <summary>
        /// The identifier for the AnalogControlFunctionType ObjectType.
        /// </summary>
        public const uint AnalogControlFunctionType = 1009;

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithComposedTargetValueType ObjectType.
        /// </summary>
        public const uint AnalogControlFunctionWithComposedTargetValueType = 1052;

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType ObjectType.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType = 1014;

        /// <summary>
        /// The identifier for the DiscreteControlFunctionType ObjectType.
        /// </summary>
        public const uint DiscreteControlFunctionType = 1017;

        /// <summary>
        /// The identifier for the MultiStateDiscreteControlFunctionType ObjectType.
        /// </summary>
        public const uint MultiStateDiscreteControlFunctionType = 1045;

        /// <summary>
        /// The identifier for the TwoStateDiscreteControlFunctionType ObjectType.
        /// </summary>
        public const uint TwoStateDiscreteControlFunctionType = 1042;

        /// <summary>
        /// The identifier for the MultiModeAnalogControlFunctionType ObjectType.
        /// </summary>
        public const uint MultiModeAnalogControlFunctionType = 1047;

        /// <summary>
        /// The identifier for the MultiParameterAnalogControlFunctionType ObjectType.
        /// </summary>
        public const uint MultiParameterAnalogControlFunctionType = 1050;

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType ObjectType.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType = 1015;

        /// <summary>
        /// The identifier for the StartStopControlFunctionType ObjectType.
        /// </summary>
        public const uint StartStopControlFunctionType = 1032;

        /// <summary>
        /// The identifier for the TimerFunctionType ObjectType.
        /// </summary>
        public const uint TimerFunctionType = 1013;

        /// <summary>
        /// The identifier for the BaseSensorFunctionType ObjectType.
        /// </summary>
        public const uint BaseSensorFunctionType = 1005;

        /// <summary>
        /// The identifier for the AnalogSensorArrayFunctionType ObjectType.
        /// </summary>
        public const uint AnalogSensorArrayFunctionType = 1029;

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType ObjectType.
        /// </summary>
        public const uint AnalogSensorFunctionType = 1016;

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType ObjectType.
        /// </summary>
        public const uint AnalogSensorFunctionWithCompensationType = 1000;

        /// <summary>
        /// The identifier for the DiscreteSensorFunctionType ObjectType.
        /// </summary>
        public const uint DiscreteSensorFunctionType = 1012;

        /// <summary>
        /// The identifier for the MutliStateDiscreteSensorFunctionType ObjectType.
        /// </summary>
        public const uint MutliStateDiscreteSensorFunctionType = 1037;

        /// <summary>
        /// The identifier for the TwoStateDiscreteSensorFunctionType ObjectType.
        /// </summary>
        public const uint TwoStateDiscreteSensorFunctionType = 1031;

        /// <summary>
        /// The identifier for the CoverFunctionType ObjectType.
        /// </summary>
        public const uint CoverFunctionType = 1011;

        /// <summary>
        /// The identifier for the ProgramManagerType ObjectType.
        /// </summary>
        public const uint ProgramManagerType = 1006;

    }
    #endregion

    #region Method Identifiers
    /// <summary>
    /// A class that declares constants for all Methods in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.8")]
    public static partial class Methods
    {
        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint MaintenanceTaskType_Reset = 7003;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint MaintenanceTaskType_Start = 7061;

        /// <summary>
        /// The identifier for the Stop Method.
        /// </summary>
        public const uint MaintenanceTaskType_Stop = 7001;

        /// <summary>
        /// The identifier for the Close Method.
        /// </summary>
        public const uint CoverStateMachineType_Close = 7012;

        /// <summary>
        /// The identifier for the Lock Method.
        /// </summary>
        public const uint CoverStateMachineType_Lock = 7013;

        /// <summary>
        /// The identifier for the Open Method.
        /// </summary>
        public const uint CoverStateMachineType_Open = 7011;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint CoverStateMachineType_Reset = 7000;

        /// <summary>
        /// The identifier for the Unlock Method.
        /// </summary>
        public const uint CoverStateMachineType_Unlock = 7014;

        /// <summary>
        /// The identifier for the Abort Method.
        /// </summary>
        public const uint FunctionalStateMachineType_Abort = 7078;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint ActiveProgramStateMachineType_Start = 7022;

        /// <summary>
        /// The identifier for the Clear Method.
        /// </summary>
        public const uint FunctionalStateMachineType_Clear = 7079;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint ControlFunctionStateMachineType_Start = 7009;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint FunctionalUnitStateMachineType_Start = 7004;

        /// <summary>
        /// The identifier for the StartProgram Method.
        /// </summary>
        public const uint FunctionalUnitStateMachineType_StartProgram = 7010;

        /// <summary>
        /// The identifier for the Stop Method.
        /// </summary>
        public const uint FunctionalStateMachineType_Stop = 7112;

        /// <summary>
        /// The identifier for the GotoMaintenance Method.
        /// </summary>
        public const uint LADSDeviceStateMachineType_GotoMaintenance = 7030;

        /// <summary>
        /// The identifier for the GotoOperating Method.
        /// </summary>
        public const uint LADSDeviceStateMachineType_GotoOperating = 7021;

        /// <summary>
        /// The identifier for the GotoShutdown Method.
        /// </summary>
        public const uint LADSDeviceStateMachineType_GotoShutdown = 7031;

        /// <summary>
        /// The identifier for the GotoStandby Method.
        /// </summary>
        public const uint LADSDeviceStateMachineType_GotoStandby = 7032;

        /// <summary>
        /// The identifier for the Hold Method.
        /// </summary>
        public const uint RunningStateMachineType_Hold = 7074;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint RunningStateMachineType_Reset = 7069;

        /// <summary>
        /// The identifier for the Suspend Method.
        /// </summary>
        public const uint RunningStateMachineType_Suspend = 7073;

        /// <summary>
        /// The identifier for the ToComplete Method.
        /// </summary>
        public const uint RunningStateMachineType_ToComplete = 7070;

        /// <summary>
        /// The identifier for the Unhold Method.
        /// </summary>
        public const uint RunningStateMachineType_Unhold = 7072;

        /// <summary>
        /// The identifier for the Unsuspend Method.
        /// </summary>
        public const uint RunningStateMachineType_Unsuspend = 7075;

        /// <summary>
        /// The identifier for the GotoMaintenance Method.
        /// </summary>
        public const uint LADSDeviceType_StateMachine_GotoMaintenance = 7123;

        /// <summary>
        /// The identifier for the GotoOperating Method.
        /// </summary>
        public const uint LADSDeviceType_StateMachine_GotoOperating = 7124;

        /// <summary>
        /// The identifier for the GotoShutdown Method.
        /// </summary>
        public const uint LADSDeviceType_StateMachine_GotoShutdown = 7125;

        /// <summary>
        /// The identifier for the GotoStandby Method.
        /// </summary>
        public const uint LADSDeviceType_StateMachine_GotoStandby = 7126;

        /// <summary>
        /// The identifier for the BreakLock Method.
        /// </summary>
        public const uint FunctionalUnitType_Lock_BreakLock = 7005;

        /// <summary>
        /// The identifier for the ExitLock Method.
        /// </summary>
        public const uint FunctionalUnitType_Lock_ExitLock = 7006;

        /// <summary>
        /// The identifier for the InitLock Method.
        /// </summary>
        public const uint FunctionalUnitType_Lock_InitLock = 7007;

        /// <summary>
        /// The identifier for the RenewLock Method.
        /// </summary>
        public const uint FunctionalUnitType_Lock_RenewLock = 7008;

        /// <summary>
        /// The identifier for the Abort Method.
        /// </summary>
        public const uint FunctionalUnitType_StateMachine_Abort = 7025;

        /// <summary>
        /// The identifier for the Clear Method.
        /// </summary>
        public const uint FunctionalUnitType_StateMachine_Clear = 7019;

        /// <summary>
        /// The identifier for the Hold Method.
        /// </summary>
        public const uint FunctionalUnitType_StateMachine_RunningStateMachine_Hold = 7026;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint FunctionalUnitType_StateMachine_RunningStateMachine_Reset = 7033;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint FunctionalUnitType_StateMachine_Start = 7020;

        /// <summary>
        /// The identifier for the StartProgram Method.
        /// </summary>
        public const uint FunctionalUnitType_StateMachine_StartProgram = 7023;

        /// <summary>
        /// The identifier for the Stop Method.
        /// </summary>
        public const uint FunctionalUnitType_StateMachine_Stop = 7024;

        /// <summary>
        /// The identifier for the Suspend Method.
        /// </summary>
        public const uint FunctionalUnitType_StateMachine_RunningStateMachine_Suspend = 7034;

        /// <summary>
        /// The identifier for the Unhold Method.
        /// </summary>
        public const uint FunctionalUnitType_StateMachine_RunningStateMachine_Unhold = 7036;

        /// <summary>
        /// The identifier for the Unsuspend Method.
        /// </summary>
        public const uint FunctionalUnitType_StateMachine_RunningStateMachine_Unsuspend = 7037;

        /// <summary>
        /// The identifier for the Abort Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Abort = 7035;

        /// <summary>
        /// The identifier for the Clear Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Clear = 7058;

        /// <summary>
        /// The identifier for the Hold Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Hold = 7097;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Reset = 7104;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Start = 7105;

        /// <summary>
        /// The identifier for the Suspend Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Suspend = 7106;

        /// <summary>
        /// The identifier for the ToComplete Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_ToComplete = 7107;

        /// <summary>
        /// The identifier for the Unhold Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Unhold = 7108;

        /// <summary>
        /// The identifier for the Unsuspend Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Unsuspend = 7109;

        /// <summary>
        /// The identifier for the Download Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download = 7054;

        /// <summary>
        /// The identifier for the Remove Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove = 7055;

        /// <summary>
        /// The identifier for the Upload Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload = 7056;

        /// <summary>
        /// The identifier for the Acknowledge Method.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Acknowledge = 7042;

        /// <summary>
        /// The identifier for the AddComment Method.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_AddComment = 7043;

        /// <summary>
        /// The identifier for the Disable Method.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Disable = 7044;

        /// <summary>
        /// The identifier for the Enable Method.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Enable = 7045;

        /// <summary>
        /// The identifier for the ResetTotalizer Method.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType_ResetTotalizer = 7002;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint BaseControlFunctionType_StateMachine_Reset = 7029;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint BaseControlFunctionType_StateMachine_Start = 7027;

        /// <summary>
        /// The identifier for the Stop Method.
        /// </summary>
        public const uint BaseControlFunctionType_StateMachine_Stop = 7028;

        /// <summary>
        /// The identifier for the Acknowledge Method.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Acknowledge = 7038;

        /// <summary>
        /// The identifier for the AddComment Method.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_AddComment = 7039;

        /// <summary>
        /// The identifier for the Disable Method.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Disable = 7040;

        /// <summary>
        /// The identifier for the Enable Method.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Enable = 7041;

        /// <summary>
        /// The identifier for the Close Method.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Close = 7015;

        /// <summary>
        /// The identifier for the Lock Method.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Lock = 7016;

        /// <summary>
        /// The identifier for the Open Method.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Open = 7017;

        /// <summary>
        /// The identifier for the Unlock Method.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Unlock = 7018;

        /// <summary>
        /// The identifier for the Download Method.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_Download = 7051;

        /// <summary>
        /// The identifier for the Remove Method.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_Remove = 7052;

        /// <summary>
        /// The identifier for the Upload Method.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_Upload = 7053;

    }
    #endregion

    #region ReferenceType Identifiers
    /// <summary>
    /// A class that declares constants for all ReferenceTyped in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.8")]
    public static partial class ReferenceTypes
    {
    }
    #endregion

    #region Variable Identifiers
    /// <summary>
    /// A class that declares constants for all Variables in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.8")]
    public static partial class Variables
    {
        /// <summary>
        /// The identifier for the EnumValues Variable.
        /// </summary>
        public const uint MaintenanceTaskStopResultEnum_EnumValues = 6099;

        /// <summary>
        /// The identifier for the ConfigurationChanged Variable.
        /// </summary>
        public const uint MaintenanceTaskType_ConfigurationChanged = 6097;

        /// <summary>
        /// The identifier for the EstimatedDowntime Variable.
        /// </summary>
        public const uint MaintenanceTaskType_EstimatedDowntime = 6102;

        /// <summary>
        /// The identifier for the LastExecutionDate Variable.
        /// </summary>
        public const uint MaintenanceTaskType_LastExecutionDate = 6360;

        /// <summary>
        /// The identifier for the LastOperatingCycles Variable.
        /// </summary>
        public const uint MaintenanceTaskType_LastOperatingCycles = 6088;

        /// <summary>
        /// The identifier for the LastOperatingTime Variable.
        /// </summary>
        public const uint MaintenanceTaskType_LastOperatingTime = 6081;

        /// <summary>
        /// The identifier for the MaintenanceMethod Variable.
        /// </summary>
        public const uint MaintenanceTaskType_MaintenanceMethod = 6106;

        /// <summary>
        /// The identifier for the MaintenanceSupplier Variable.
        /// </summary>
        public const uint MaintenanceTaskType_MaintenanceSupplier = 6107;

        /// <summary>
        /// The identifier for the NextOperatingCycles Variable.
        /// </summary>
        public const uint MaintenanceTaskType_NextOperatingCycles = 6091;

        /// <summary>
        /// The identifier for the NextOperatingTime Variable.
        /// </summary>
        public const uint MaintenanceTaskType_NextOperatingTime = 6087;

        /// <summary>
        /// The identifier for the PartsOfAssetReplaced Variable.
        /// </summary>
        public const uint MaintenanceTaskType_PartsOfAssetReplaced = 6108;

        /// <summary>
        /// The identifier for the PartsOfAssetServiced Variable.
        /// </summary>
        public const uint MaintenanceTaskType_PartsOfAssetServiced = 6111;

        /// <summary>
        /// The identifier for the PlannedDate Variable.
        /// </summary>
        public const uint MaintenanceTaskType_PlannedDate = 6119;

        /// <summary>
        /// The identifier for the QualificationOfPersonnel Variable.
        /// </summary>
        public const uint MaintenanceTaskType_QualificationOfPersonnel = 6120;

        /// <summary>
        /// The identifier for the RecurrencePeriod Variable.
        /// </summary>
        public const uint MaintenanceTaskType_RecurrencePeriod = 6362;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint MaintenanceTaskType_Stop_InputArguments = 6092;

        /// <summary>
        /// The identifier for the CurrentPauseTime Variable.
        /// </summary>
        public const uint ActiveProgramType_CurrentPauseTime = 6180;

        /// <summary>
        /// The identifier for the CurrentRuntime Variable.
        /// </summary>
        public const uint ActiveProgramType_CurrentRuntime = 6163;

        /// <summary>
        /// The identifier for the CurrentStepName Variable.
        /// </summary>
        public const uint ActiveProgramType_CurrentStepName = 6184;

        /// <summary>
        /// The identifier for the CurrentStepNumber Variable.
        /// </summary>
        public const uint ActiveProgramType_CurrentStepNumber = 6185;

        /// <summary>
        /// The identifier for the CurrentStepRuntime Variable.
        /// </summary>
        public const uint ActiveProgramType_CurrentStepRuntime = 6186;

        /// <summary>
        /// The identifier for the DeviceProgramRunID Variable.
        /// </summary>
        public const uint ActiveProgramType_DeviceProgramRunID = 6126;

        /// <summary>
        /// The identifier for the EstimatedRunTime Variable.
        /// </summary>
        public const uint ActiveProgramType_EstimatedRunTime = 6159;

        /// <summary>
        /// The identifier for the EstimatedStepNumbers Variable.
        /// </summary>
        public const uint ActiveProgramType_EstimatedStepNumbers = 6162;

        /// <summary>
        /// The identifier for the EstimatedStepRuntime Variable.
        /// </summary>
        public const uint ActiveProgramType_EstimatedStepRuntime = 6183;

        /// <summary>
        /// The identifier for the CurrentValue Variable.
        /// </summary>
        public const uint ControllerParameterType_CurrentValue = 6109;

        /// <summary>
        /// The identifier for the TargetValue Variable.
        /// </summary>
        public const uint ControllerParameterType_TargetValue = 6110;

        /// <summary>
        /// The identifier for the CtrlP Variable.
        /// </summary>
        public const uint PidControllerParameterType_CtrlP = 6003;

        /// <summary>
        /// The identifier for the CtrlTd Variable.
        /// </summary>
        public const uint PidControllerParameterType_CtrlTd = 6004;

        /// <summary>
        /// The identifier for the CtrlTi Variable.
        /// </summary>
        public const uint PidControllerParameterType_CtrlTi = 6005;

        /// <summary>
        /// The identifier for the LifeTime Variable.
        /// </summary>
        public const uint LADSOperationCountersType_LifeTime = 6027;

        /// <summary>
        /// The identifier for the OperationCycleCounter Variable.
        /// </summary>
        public const uint LADSOperationCountersType_OperationCycleCounter = 6278;

        /// <summary>
        /// The identifier for the OperationDuration Variable.
        /// </summary>
        public const uint LADSOperationCountersType_OperationDuration = 6279;

        /// <summary>
        /// The identifier for the PowerOnDuration Variable.
        /// </summary>
        public const uint LADSOperationCountersType_PowerOnDuration = 6280;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint SetType_NodeVersion = 6075;

        /// <summary>
        /// The identifier for the &lt;VariableSetElement&gt; Variable.
        /// </summary>
        public const uint VariableSetType_S_VariableSetElement_ = 6082;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint VariableSetType_NodeVersion = 6131;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint ComponentSetType_NodeVersion = 6085;

        /// <summary>
        /// The identifier for the Author Variable.
        /// </summary>
        public const uint ProgramTemplateType_Author = 6348;

        /// <summary>
        /// The identifier for the Created Variable.
        /// </summary>
        public const uint ProgramTemplateType_Created = 6341;

        /// <summary>
        /// The identifier for the Description Variable.
        /// </summary>
        public const uint ProgramTemplateType_Description = 6340;

        /// <summary>
        /// The identifier for the Modified Variable.
        /// </summary>
        public const uint ProgramTemplateType_Modified = 6344;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint ProgramTemplateType_Name = 6259;

        /// <summary>
        /// The identifier for the Status Variable.
        /// </summary>
        public const uint ProgramTemplateType_Status = 6390;

        /// <summary>
        /// The identifier for the TemplateId Variable.
        /// </summary>
        public const uint ProgramTemplateType_TemplateId = 6090;

        /// <summary>
        /// The identifier for the Version Variable.
        /// </summary>
        public const uint ProgramTemplateType_Version = 6346;

        /// <summary>
        /// The identifier for the MimeType Variable.
        /// </summary>
        public const uint ResultFileType_MimeType = 6297;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint ResultFileType_Name = 6298;

        /// <summary>
        /// The identifier for the URL Variable.
        /// </summary>
        public const uint ResultFileType_URL = 6299;

        /// <summary>
        /// The identifier for the Client Variable.
        /// </summary>
        public const uint ResultType_Client = 6281;

        /// <summary>
        /// The identifier for the Description Variable.
        /// </summary>
        public const uint ResultType_Description = 6396;

        /// <summary>
        /// The identifier for the DeviceProgramRunId Variable.
        /// </summary>
        public const uint ResultType_DeviceProgramRunId = 6495;

        /// <summary>
        /// The identifier for the EstimateRuntime Variable.
        /// </summary>
        public const uint ResultType_EstimateRuntime = 6504;

        /// <summary>
        /// The identifier for the JobId Variable.
        /// </summary>
        public const uint ResultType_JobId = 6393;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint ResultType_Name = 6286;

        /// <summary>
        /// The identifier for the Properties Variable.
        /// </summary>
        public const uint ResultType_Properties = 6485;

        /// <summary>
        /// The identifier for the SampleIds Variable.
        /// </summary>
        public const uint ResultType_SampleIds = 6308;

        /// <summary>
        /// The identifier for the Started Variable.
        /// </summary>
        public const uint ResultType_Started = 6307;

        /// <summary>
        /// The identifier for the Stopped Variable.
        /// </summary>
        public const uint ResultType_Stopped = 6394;

        /// <summary>
        /// The identifier for the SupervisoryTaskId Variable.
        /// </summary>
        public const uint ResultType_SupervisoryTaskId = 6487;

        /// <summary>
        /// The identifier for the TotalPauseTime Variable.
        /// </summary>
        public const uint ResultType_TotalPauseTime = 6501;

        /// <summary>
        /// The identifier for the TotalRuntime Variable.
        /// </summary>
        public const uint ResultType_TotalRuntime = 6500;

        /// <summary>
        /// The identifier for the User Variable.
        /// </summary>
        public const uint ResultType_User = 6282;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_Closed_StateNumber = 6044;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_ClosedToError_TransitionNumber = 6467;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_ClosedToLocked_TransitionNumber = 6464;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_ClosedToOpened_TransitionNumber = 6463;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_Error_StateNumber = 6046;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_ErrorToOpened_TransitionNumber = 6476;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_Locked_StateNumber = 6045;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_LockedToClosed_TransitionNumber = 6465;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_LockedToError_TransitionNumber = 6466;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_Opened_StateNumber = 6043;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_OpenedToClosed_TransitionNumber = 6000;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint CoverStateMachineType_Reset_InputArguments = 6477;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint CoverStateMachineType_Reset_OutputArguments = 6481;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_Aborted_StateNumber = 6475;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_AbortedToClearing_TransitionNumber = 6486;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_Aborting_StateNumber = 6474;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_AbortingToAborted_TransitionNumber = 6432;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ActiveProgramStateMachineType_Start_InputArguments = 6133;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint ActiveProgramStateMachineType_Start_OutputArguments = 6134;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_AvailableStates = 6473;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_AvailableTransitions = 6472;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_Clearing_StateNumber = 6449;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_ClearingToStopped_TransitionNumber = 6529;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ControlFunctionStateMachineType_Start_InputArguments = 6129;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint ControlFunctionStateMachineType_Start_OutputArguments = 6130;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_CurrentState = 6100;

        /// <summary>
        /// The identifier for the EffectiveDisplayName Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_CurrentState_EffectiveDisplayName = 6101;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitStateMachineType_Start_InputArguments = 6127;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitStateMachineType_Start_OutputArguments = 6128;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitStateMachineType_StartProgram_InputArguments = 6098;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitStateMachineType_StartProgram_OutputArguments = 6121;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_Running_StateNumber = 6509;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_RunningToAborting_TransitionNumber = 6528;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_RunningToStopping_TransitionNumber = 6534;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_Stopped_StateNumber = 6508;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_StoppedToRunning_TransitionNumber = 6513;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_Stopping_StateNumber = 6511;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint FunctionalStateMachineType_StoppingToStopped_TransitionNumber = 6512;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Maintenance_StateNumber = 6350;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_MaintenanceToOperating_TransitionNumber = 6354;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_MaintenanceToShutdown_TransitionNumber = 6356;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Operating_StateNumber = 6330;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_OperatingToMaintenance_TransitionNumber = 6353;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_OperatingToShutdown_TransitionNumber = 6355;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_OperatingToStandby_TransitionNumber = 6556;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Powerup_StateNumber = 6329;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_PowerupToOperating_TransitionNumber = 6352;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Shutdown_StateNumber = 6351;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Standby_StateNumber = 6525;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_StandbyToOperating_TransitionNumber = 6482;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_Complete_StateNumber = 6434;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_CompleteToResetting_TransitionNumber = 6060;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_Completing_StateNumber = 6433;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_CompletingToComplete_TransitionNumber = 6050;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_Execute_StateNumber = 6489;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_ExecuteToCompleting_TransitionNumber = 6049;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_ExecuteToHolding_TransitionNumber = 6076;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_ExecuteToSuspending_TransitionNumber = 6070;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_Held_StateNumber = 6430;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_HeldToUnholding_TransitionNumber = 6078;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_Holding_StateNumber = 6429;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_HoldingToHeld_TransitionNumber = 6077;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_Idle_StateNumber = 6426;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_IdleToStarting_TransitionNumber = 6047;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_Resetting_StateNumber = 6425;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_ResettingToIdle_TransitionNumber = 6061;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_Starting_StateNumber = 6423;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_StartingToExecute_TransitionNumber = 6048;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_StartingToHolding_TransitionNumber = 6116;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_Suspended_StateNumber = 6427;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_SuspendedToHolding_TransitionNumber = 6117;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_SuspendedToUnsuspending_TransitionNumber = 6072;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_Suspending_StateNumber = 6424;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_SuspendingToHolding_TransitionNumber = 6115;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_SuspendingToSuspended_TransitionNumber = 6071;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_Unholding_StateNumber = 6431;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_UnholdingToExecute_TransitionNumber = 6114;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_UnholdingToHolding_TransitionNumber = 6275;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_Unsuspending_StateNumber = 6428;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_UnsuspendingToExecute_TransitionNumber = 6073;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint RunningStateMachineType_UnsuspendingToHolding_TransitionNumber = 6118;

        /// <summary>
        /// The identifier for the AssetId Variable.
        /// </summary>
        public const uint LADSDeviceType_AssetId = 6068;

        /// <summary>
        /// The identifier for the ComponentName Variable.
        /// </summary>
        public const uint LADSDeviceType_ComponentName = 6069;

        /// <summary>
        /// The identifier for the DeviceClass Variable.
        /// </summary>
        public const uint LADSDeviceType_DeviceClass = 6083;

        /// <summary>
        /// The identifier for the DeviceHealth Variable.
        /// </summary>
        public const uint LADSDeviceType_DeviceHealth = 6086;

        /// <summary>
        /// The identifier for the DeviceManual Variable.
        /// </summary>
        public const uint LADSDeviceType_DeviceManual = 6051;

        /// <summary>
        /// The identifier for the DeviceRevision Variable.
        /// </summary>
        public const uint LADSDeviceType_DeviceRevision = 6062;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint LADSDeviceType_FunctionalUnitSet_NodeVersion = 6103;

        /// <summary>
        /// The identifier for the HardwareRevision Variable.
        /// </summary>
        public const uint LADSDeviceType_HardwareRevision = 6093;

        /// <summary>
        /// The identifier for the HierarchicalLocation Variable.
        /// </summary>
        public const uint LADSDeviceType_HierarchicalLocation = 6029;

        /// <summary>
        /// The identifier for the Manufacturer Variable.
        /// </summary>
        public const uint LADSDeviceType_Manufacturer = 6009;

        /// <summary>
        /// The identifier for the ManufacturerUri Variable.
        /// </summary>
        public const uint LADSDeviceType_ManufacturerUri = 6094;

        /// <summary>
        /// The identifier for the Model Variable.
        /// </summary>
        public const uint LADSDeviceType_Model = 6010;

        /// <summary>
        /// The identifier for the OperationalLocation Variable.
        /// </summary>
        public const uint LADSDeviceType_OperationalLocation = 6028;

        /// <summary>
        /// The identifier for the ProductCode Variable.
        /// </summary>
        public const uint LADSDeviceType_ProductCode = 6095;

        /// <summary>
        /// The identifier for the ProductInstanceUri Variable.
        /// </summary>
        public const uint LADSDeviceType_ProductInstanceUri = 6096;

        /// <summary>
        /// The identifier for the RevisionCounter Variable.
        /// </summary>
        public const uint LADSDeviceType_RevisionCounter = 6008;

        /// <summary>
        /// The identifier for the SerialNumber Variable.
        /// </summary>
        public const uint LADSDeviceType_SerialNumber = 6064;

        /// <summary>
        /// The identifier for the SoftwareRevision Variable.
        /// </summary>
        public const uint LADSDeviceType_SoftwareRevision = 6063;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint LADSDeviceType_Maintenance_NodeVersion = 6113;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint LADSDeviceType_StateMachine_CurrentState = 6600;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint LADSDeviceType_StateMachine_CurrentState_Id = 6601;

        /// <summary>
        /// The identifier for the AssetId Variable.
        /// </summary>
        public const uint LADSComponentType_AssetId = 6149;

        /// <summary>
        /// The identifier for the ComponentName Variable.
        /// </summary>
        public const uint LADSComponentType_ComponentName = 6150;

        /// <summary>
        /// The identifier for the DeviceClass Variable.
        /// </summary>
        public const uint LADSComponentType_DeviceClass = 6151;

        /// <summary>
        /// The identifier for the DeviceHealth Variable.
        /// </summary>
        public const uint LADSComponentType_DeviceHealth = 6480;

        /// <summary>
        /// The identifier for the DeviceManual Variable.
        /// </summary>
        public const uint LADSComponentType_DeviceManual = 6152;

        /// <summary>
        /// The identifier for the DeviceRevision Variable.
        /// </summary>
        public const uint LADSComponentType_DeviceRevision = 6153;

        /// <summary>
        /// The identifier for the HardwareRevision Variable.
        /// </summary>
        public const uint LADSComponentType_HardwareRevision = 6154;

        /// <summary>
        /// The identifier for the HierarchicalLocation Variable.
        /// </summary>
        public const uint LADSComponentType_HierarchicalLocation = 6080;

        /// <summary>
        /// The identifier for the Manufacturer Variable.
        /// </summary>
        public const uint LADSComponentType_Manufacturer = 6169;

        /// <summary>
        /// The identifier for the ManufacturerUri Variable.
        /// </summary>
        public const uint LADSComponentType_ManufacturerUri = 6170;

        /// <summary>
        /// The identifier for the Model Variable.
        /// </summary>
        public const uint LADSComponentType_Model = 6171;

        /// <summary>
        /// The identifier for the OperationalLocation Variable.
        /// </summary>
        public const uint LADSComponentType_OperationalLocation = 6074;

        /// <summary>
        /// The identifier for the ProductCode Variable.
        /// </summary>
        public const uint LADSComponentType_ProductCode = 6172;

        /// <summary>
        /// The identifier for the ProductInstanceUri Variable.
        /// </summary>
        public const uint LADSComponentType_ProductInstanceUri = 6173;

        /// <summary>
        /// The identifier for the RevisionCounter Variable.
        /// </summary>
        public const uint LADSComponentType_RevisionCounter = 6174;

        /// <summary>
        /// The identifier for the SerialNumber Variable.
        /// </summary>
        public const uint LADSComponentType_SerialNumber = 6175;

        /// <summary>
        /// The identifier for the SoftwareRevision Variable.
        /// </summary>
        public const uint LADSComponentType_SoftwareRevision = 6176;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint LADSComponentType_Maintenance_NodeVersion = 6189;

        /// <summary>
        /// The identifier for the AssetId Variable.
        /// </summary>
        public const uint FunctionalUnitType_AssetId = 6284;

        /// <summary>
        /// The identifier for the ComponentName Variable.
        /// </summary>
        public const uint FunctionalUnitType_ComponentName = 6285;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_BreakLock_OutputArguments = 6013;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_ExitLock_OutputArguments = 6014;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_InitLock_InputArguments = 6015;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_InitLock_OutputArguments = 6016;

        /// <summary>
        /// The identifier for the Locked Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_Locked = 6017;

        /// <summary>
        /// The identifier for the LockingClient Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_LockingClient = 6018;

        /// <summary>
        /// The identifier for the LockingUser Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_LockingUser = 6019;

        /// <summary>
        /// The identifier for the RemainingLockTime Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_RemainingLockTime = 6020;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_RenewLock_OutputArguments = 6021;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint FunctionalUnitType_StateMachine_CurrentState = 6104;

        /// <summary>
        /// The identifier for the EffectiveDisplayName Variable.
        /// </summary>
        public const uint FunctionalUnitType_StateMachine_CurrentState_EffectiveDisplayName = 6105;

        /// <summary>
        /// The identifier for the Author Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Author = 6574;

        /// <summary>
        /// The identifier for the Created Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Created = 6575;

        /// <summary>
        /// The identifier for the Description Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Description = 6576;

        /// <summary>
        /// The identifier for the Modified Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Modified = 6577;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Name = 6578;

        /// <summary>
        /// The identifier for the Status Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Status = 6579;

        /// <summary>
        /// The identifier for the Type Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Type = 6580;

        /// <summary>
        /// The identifier for the Version Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Version = 6581;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableStates = 6530;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions = 6533;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState = 6538;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id = 6539;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_AvailableStates = 6540;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_AvailableTransitions = 6543;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_CurrentState = 6545;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_CurrentState_Id = 6548;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_AvailableStates = 6549;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_AvailableTransitions = 6550;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_CurrentState = 6555;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_CurrentState_Id = 6565;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Start_InputArguments = 6089;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Start_OutputArguments = 6164;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_InputArguments = 6293;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_OutputArguments = 6294;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_NodeVersion = 6258;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove_InputArguments = 6295;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload_InputArguments = 6296;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ResultSet_NodeVersion = 6052;

        /// <summary>
        /// The identifier for the AckedState Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_AckedState = 6232;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_AckedState_Id = 6233;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Acknowledge_InputArguments = 6234;

        /// <summary>
        /// The identifier for the ActiveState Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_ActiveState = 6224;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_ActiveState_Id = 6225;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_AddComment_InputArguments = 6235;

        /// <summary>
        /// The identifier for the BranchId Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_BranchId = 6236;

        /// <summary>
        /// The identifier for the ClientUserId Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_ClientUserId = 6237;

        /// <summary>
        /// The identifier for the Comment Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Comment = 6238;

        /// <summary>
        /// The identifier for the SourceTimestamp Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Comment_SourceTimestamp = 6239;

        /// <summary>
        /// The identifier for the ConditionClassId Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_ConditionClassId = 6240;

        /// <summary>
        /// The identifier for the ConditionClassName Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_ConditionClassName = 6241;

        /// <summary>
        /// The identifier for the ConditionName Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_ConditionName = 6242;

        /// <summary>
        /// The identifier for the EnabledState Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_EnabledState = 6228;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_EnabledState_Id = 6229;

        /// <summary>
        /// The identifier for the EventId Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_EventId = 6248;

        /// <summary>
        /// The identifier for the EventType Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_EventType = 6249;

        /// <summary>
        /// The identifier for the HighHighLimit Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_HighHighLimit = 6023;

        /// <summary>
        /// The identifier for the HighLimit Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_HighLimit = 6024;

        /// <summary>
        /// The identifier for the InputNode Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_InputNode = 6230;

        /// <summary>
        /// The identifier for the LastSeverity Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_LastSeverity = 6243;

        /// <summary>
        /// The identifier for the SourceTimestamp Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp = 6244;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState = 6226;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState_Id = 6227;

        /// <summary>
        /// The identifier for the LowLimit Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_LowLimit = 6025;

        /// <summary>
        /// The identifier for the LowLowLimit Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_LowLowLimit = 6026;

        /// <summary>
        /// The identifier for the Message Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Message = 6250;

        /// <summary>
        /// The identifier for the Quality Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Quality = 6245;

        /// <summary>
        /// The identifier for the SourceTimestamp Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Quality_SourceTimestamp = 6246;

        /// <summary>
        /// The identifier for the ReceiveTime Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_ReceiveTime = 6251;

        /// <summary>
        /// The identifier for the Retain Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Retain = 6247;

        /// <summary>
        /// The identifier for the SetpointNode Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_SetpointNode = 6223;

        /// <summary>
        /// The identifier for the Severity Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Severity = 6252;

        /// <summary>
        /// The identifier for the SourceName Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_SourceName = 6253;

        /// <summary>
        /// The identifier for the SourceNode Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_SourceNode = 6254;

        /// <summary>
        /// The identifier for the SuppressedOrShelved Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_SuppressedOrShelved = 6231;

        /// <summary>
        /// The identifier for the Time Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Time = 6255;

        /// <summary>
        /// The identifier for the TargetValue Variable.
        /// </summary>
        public const uint AnalogControlFunctionWithComposedTargetValueType_TargetValue = 6132;

        /// <summary>
        /// The identifier for the TotalizedValue Variable.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType_TotalizedValue = 6011;

        /// <summary>
        /// The identifier for the CurrentValue Variable.
        /// </summary>
        public const uint AnalogControlFunctionType_CurrentValue = 6001;

        /// <summary>
        /// The identifier for the TargetValue Variable.
        /// </summary>
        public const uint AnalogControlFunctionType_TargetValue = 6006;

        /// <summary>
        /// The identifier for the CurrentValue Variable.
        /// </summary>
        public const uint DiscreteControlFunctionType_CurrentValue = 6065;

        /// <summary>
        /// The identifier for the CurrentValue Variable.
        /// </summary>
        public const uint MultiStateDiscreteControlFunctionType_CurrentValue = 6067;

        /// <summary>
        /// The identifier for the TargetValue Variable.
        /// </summary>
        public const uint MultiStateDiscreteControlFunctionType_TargetValue = 6124;

        /// <summary>
        /// The identifier for the TargetValue Variable.
        /// </summary>
        public const uint DiscreteControlFunctionType_TargetValue = 6123;

        /// <summary>
        /// The identifier for the CurrentValue Variable.
        /// </summary>
        public const uint TwoStateDiscreteControlFunctionType_CurrentValue = 6066;

        /// <summary>
        /// The identifier for the FalseState Variable.
        /// </summary>
        public const uint TwoStateDiscreteControlFunctionType_CurrentValue_FalseState = 6138;

        /// <summary>
        /// The identifier for the TrueState Variable.
        /// </summary>
        public const uint TwoStateDiscreteControlFunctionType_CurrentValue_TrueState = 6140;

        /// <summary>
        /// The identifier for the TargetValue Variable.
        /// </summary>
        public const uint TwoStateDiscreteControlFunctionType_TargetValue = 6135;

        /// <summary>
        /// The identifier for the FalseState Variable.
        /// </summary>
        public const uint TwoStateDiscreteControlFunctionType_TargetValue_FalseState = 6155;

        /// <summary>
        /// The identifier for the TrueState Variable.
        /// </summary>
        public const uint TwoStateDiscreteControlFunctionType_TargetValue_TrueState = 6156;

        /// <summary>
        /// The identifier for the CurrentMode Variable.
        /// </summary>
        public const uint MultiModeAnalogControlFunctionType_CurrentMode = 6122;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint BaseControlFunctionType_StateMachine_CurrentState = 6079;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseControlFunctionType_StateMachine_CurrentState_Id = 6042;

        /// <summary>
        /// The identifier for the CurrentValue Variable.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_CurrentValue = 6139;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_CurrentValue_EngineeringUnits = 6141;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_CurrentValue_EURange = 6142;

        /// <summary>
        /// The identifier for the DecreaseRate Variable.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_DecreaseRate = 6143;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_DecreaseRate_EngineeringUnits = 6144;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_DecreaseRate_EURange = 6145;

        /// <summary>
        /// The identifier for the DeltaValue Variable.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_DeltaValue = 6146;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_DeltaValue_EngineeringUnits = 6147;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_DeltaValue_EURange = 6148;

        /// <summary>
        /// The identifier for the IncreaseRate Variable.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_IncreaseRate = 6166;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_IncreaseRate_EngineeringUnits = 6167;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_IncreaseRate_EURange = 6168;

        /// <summary>
        /// The identifier for the TargetValue Variable.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_TargetValue = 6333;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_TargetValue_EngineeringUnits = 6334;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint RatebasedAccumulatingControlFunctionType_TargetValue_EURange = 6335;

        /// <summary>
        /// The identifier for the CurrentValue Variable.
        /// </summary>
        public const uint TimerFunctionType_CurrentValue = 6035;

        /// <summary>
        /// The identifier for the DifferenceValue Variable.
        /// </summary>
        public const uint TimerFunctionType_DifferenceValue = 6012;

        /// <summary>
        /// The identifier for the TargetValue Variable.
        /// </summary>
        public const uint TimerFunctionType_TargetValue = 6034;

        /// <summary>
        /// The identifier for the AckedState Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_AckedState = 6199;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_AckedState_Id = 6200;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Acknowledge_InputArguments = 6201;

        /// <summary>
        /// The identifier for the ActiveState Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_ActiveState = 6191;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_ActiveState_Id = 6192;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_AddComment_InputArguments = 6202;

        /// <summary>
        /// The identifier for the BranchId Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_BranchId = 6203;

        /// <summary>
        /// The identifier for the ClientUserId Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_ClientUserId = 6204;

        /// <summary>
        /// The identifier for the Comment Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Comment = 6205;

        /// <summary>
        /// The identifier for the SourceTimestamp Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Comment_SourceTimestamp = 6206;

        /// <summary>
        /// The identifier for the ConditionClassId Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_ConditionClassId = 6207;

        /// <summary>
        /// The identifier for the ConditionClassName Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_ConditionClassName = 6208;

        /// <summary>
        /// The identifier for the ConditionName Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_ConditionName = 6209;

        /// <summary>
        /// The identifier for the EnabledState Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_EnabledState = 6195;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_EnabledState_Id = 6196;

        /// <summary>
        /// The identifier for the EventId Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_EventId = 6215;

        /// <summary>
        /// The identifier for the EventType Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_EventType = 6216;

        /// <summary>
        /// The identifier for the InputNode Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_InputNode = 6197;

        /// <summary>
        /// The identifier for the LastSeverity Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_LastSeverity = 6210;

        /// <summary>
        /// The identifier for the SourceTimestamp Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp = 6211;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState = 6193;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState_Id = 6194;

        /// <summary>
        /// The identifier for the Message Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Message = 6217;

        /// <summary>
        /// The identifier for the Quality Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Quality = 6212;

        /// <summary>
        /// The identifier for the SourceTimestamp Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Quality_SourceTimestamp = 6213;

        /// <summary>
        /// The identifier for the ReceiveTime Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_ReceiveTime = 6218;

        /// <summary>
        /// The identifier for the Retain Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Retain = 6214;

        /// <summary>
        /// The identifier for the Severity Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Severity = 6219;

        /// <summary>
        /// The identifier for the SourceName Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_SourceName = 6220;

        /// <summary>
        /// The identifier for the SourceNode Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_SourceNode = 6221;

        /// <summary>
        /// The identifier for the SuppressedOrShelved Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_SuppressedOrShelved = 6198;

        /// <summary>
        /// The identifier for the Time Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Time = 6222;

        /// <summary>
        /// The identifier for the RawValue Variable.
        /// </summary>
        public const uint AnalogSensorArrayFunctionType_RawValue = 6125;

        /// <summary>
        /// The identifier for the SensorValue Variable.
        /// </summary>
        public const uint AnalogSensorArrayFunctionType_SensorValue = 6032;

        /// <summary>
        /// The identifier for the CompensationValue Variable.
        /// </summary>
        public const uint AnalogSensorFunctionWithCompensationType_CompensationValue = 6037;

        /// <summary>
        /// The identifier for the RawValue Variable.
        /// </summary>
        public const uint AnalogSensorFunctionType_RawValue = 6039;

        /// <summary>
        /// The identifier for the SensorValue Variable.
        /// </summary>
        public const uint AnalogSensorFunctionType_SensorValue = 6033;

        /// <summary>
        /// The identifier for the CalibrationValues Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_CalibrationValues = 6036;

        /// <summary>
        /// The identifier for the IsEnabled Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_Configuration_IsEnabled = 6022;

        /// <summary>
        /// The identifier for the Damping Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_Damping = 6038;

        /// <summary>
        /// The identifier for the SensorValue Variable.
        /// </summary>
        public const uint MutliStateDiscreteSensorFunctionType_SensorValue = 6030;

        /// <summary>
        /// The identifier for the SensorValue Variable.
        /// </summary>
        public const uint DiscreteSensorFunctionType_SensorValue = 6031;

        /// <summary>
        /// The identifier for the SensorValue Variable.
        /// </summary>
        public const uint TwoStateDiscreteSensorFunctionType_SensorValue = 6007;

        /// <summary>
        /// The identifier for the FalseState Variable.
        /// </summary>
        public const uint TwoStateDiscreteSensorFunctionType_SensorValue_FalseState = 6136;

        /// <summary>
        /// The identifier for the TrueState Variable.
        /// </summary>
        public const uint TwoStateDiscreteSensorFunctionType_SensorValue_TrueState = 6137;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_CurrentState = 6112;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_CurrentState_Id = 6040;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint FunctionType_FunctionSet_NodeVersion = 6084;

        /// <summary>
        /// The identifier for the IsEnabled Variable.
        /// </summary>
        public const uint FunctionType_IsEnabled = 6002;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_Download_InputArguments = 6289;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_Download_OutputArguments = 6290;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_NodeVersion = 6257;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_Remove_InputArguments = 6291;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_Upload_InputArguments = 6292;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint ProgramManagerType_ResultSet_NodeVersion = 6041;

        /// <summary>
        /// The identifier for the IsNamespaceSubset Object.
        /// </summary>
        public const uint _http___opcfoundation_org_UA_lads__IsNamespaceSubset = 6053;

        /// <summary>
        /// The identifier for the NamespacePublicationDate Object.
        /// </summary>
        public const uint _http___opcfoundation_org_UA_lads__NamespacePublicationDate = 6054;

        /// <summary>
        /// The identifier for the NamespaceUri Object.
        /// </summary>
        public const uint _http___opcfoundation_org_UA_lads__NamespaceUri = 6055;

        /// <summary>
        /// The identifier for the NamespaceVersion Object.
        /// </summary>
        public const uint _http___opcfoundation_org_UA_lads__NamespaceVersion = 6056;

        /// <summary>
        /// The identifier for the StaticNodeIdTypes Object.
        /// </summary>
        public const uint _http___opcfoundation_org_UA_lads__StaticNodeIdTypes = 6057;

        /// <summary>
        /// The identifier for the StaticNumericNodeIdRange Object.
        /// </summary>
        public const uint _http___opcfoundation_org_UA_lads__StaticNumericNodeIdRange = 6058;

        /// <summary>
        /// The identifier for the StaticStringNodeIdPattern Object.
        /// </summary>
        public const uint _http___opcfoundation_org_UA_lads__StaticStringNodeIdPattern = 6059;

    }
    #endregion

    #region VariableTypes Identifiers
    /// <summary>
    /// A class that declares constants for all VariableTypes in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.8")]
    public static partial class VariableTypes
    {
    }
    #endregion

    #region DataType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all DataTypes in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.8")]
    public static partial class DataTypeIds
    {
        /// <summary>
        /// The identifier for the MaintenanceTaskStopResultEnum DataType.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskStopResultEnum = new ExpandedNodeId(DataTypes.MaintenanceTaskStopResultEnum, Namespaces.Lads);

        /// <summary>
        /// The identifier for the KeyValueType DataType.
        /// </summary>
        public static readonly ExpandedNodeId KeyValueType = new ExpandedNodeId(DataTypes.KeyValueType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the SampleInfoType DataType.
        /// </summary>
        public static readonly ExpandedNodeId SampleInfoType = new ExpandedNodeId(DataTypes.SampleInfoType, Namespaces.Lads);

    }
    #endregion

    #region Method Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Methods in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.8")]
    public static partial class MethodIds
    {
        /// <summary>
        /// The identifier for the MaintenanceTaskType_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_Reset = new ExpandedNodeId(Methods.MaintenanceTaskType_Reset, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_Start = new ExpandedNodeId(Methods.MaintenanceTaskType_Start, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_Stop Method.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_Stop = new ExpandedNodeId(Methods.MaintenanceTaskType_Stop, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Close Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Close = new ExpandedNodeId(Methods.CoverStateMachineType_Close, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Lock Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Lock = new ExpandedNodeId(Methods.CoverStateMachineType_Lock, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Open Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Open = new ExpandedNodeId(Methods.CoverStateMachineType_Open, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Reset = new ExpandedNodeId(Methods.CoverStateMachineType_Reset, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Unlock Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Unlock = new ExpandedNodeId(Methods.CoverStateMachineType_Unlock, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_Abort Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_Abort = new ExpandedNodeId(Methods.FunctionalStateMachineType_Abort, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ActiveProgramStateMachineType_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramStateMachineType_Start = new ExpandedNodeId(Methods.ActiveProgramStateMachineType_Start, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_Clear Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_Clear = new ExpandedNodeId(Methods.FunctionalStateMachineType_Clear, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ControlFunctionStateMachineType_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId ControlFunctionStateMachineType_Start = new ExpandedNodeId(Methods.ControlFunctionStateMachineType_Start, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitStateMachineType_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitStateMachineType_Start = new ExpandedNodeId(Methods.FunctionalUnitStateMachineType_Start, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitStateMachineType_StartProgram Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitStateMachineType_StartProgram = new ExpandedNodeId(Methods.FunctionalUnitStateMachineType_StartProgram, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_Stop Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_Stop = new ExpandedNodeId(Methods.FunctionalStateMachineType_Stop, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_GotoMaintenance Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_GotoMaintenance = new ExpandedNodeId(Methods.LADSDeviceStateMachineType_GotoMaintenance, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_GotoOperating Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_GotoOperating = new ExpandedNodeId(Methods.LADSDeviceStateMachineType_GotoOperating, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_GotoShutdown Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_GotoShutdown = new ExpandedNodeId(Methods.LADSDeviceStateMachineType_GotoShutdown, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_GotoStandby Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_GotoStandby = new ExpandedNodeId(Methods.LADSDeviceStateMachineType_GotoStandby, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Hold Method.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Hold = new ExpandedNodeId(Methods.RunningStateMachineType_Hold, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Reset = new ExpandedNodeId(Methods.RunningStateMachineType_Reset, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Suspend Method.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Suspend = new ExpandedNodeId(Methods.RunningStateMachineType_Suspend, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_ToComplete Method.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_ToComplete = new ExpandedNodeId(Methods.RunningStateMachineType_ToComplete, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Unhold Method.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Unhold = new ExpandedNodeId(Methods.RunningStateMachineType_Unhold, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Unsuspend Method.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Unsuspend = new ExpandedNodeId(Methods.RunningStateMachineType_Unsuspend, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_StateMachine_GotoMaintenance Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_StateMachine_GotoMaintenance = new ExpandedNodeId(Methods.LADSDeviceType_StateMachine_GotoMaintenance, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_StateMachine_GotoOperating Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_StateMachine_GotoOperating = new ExpandedNodeId(Methods.LADSDeviceType_StateMachine_GotoOperating, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_StateMachine_GotoShutdown Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_StateMachine_GotoShutdown = new ExpandedNodeId(Methods.LADSDeviceType_StateMachine_GotoShutdown, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_StateMachine_GotoStandby Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_StateMachine_GotoStandby = new ExpandedNodeId(Methods.LADSDeviceType_StateMachine_GotoStandby, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_BreakLock Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_BreakLock = new ExpandedNodeId(Methods.FunctionalUnitType_Lock_BreakLock, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_ExitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_ExitLock = new ExpandedNodeId(Methods.FunctionalUnitType_Lock_ExitLock, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_InitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_InitLock = new ExpandedNodeId(Methods.FunctionalUnitType_Lock_InitLock, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_RenewLock Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_RenewLock = new ExpandedNodeId(Methods.FunctionalUnitType_Lock_RenewLock, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_StateMachine_Abort Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_StateMachine_Abort = new ExpandedNodeId(Methods.FunctionalUnitType_StateMachine_Abort, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_StateMachine_Clear Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_StateMachine_Clear = new ExpandedNodeId(Methods.FunctionalUnitType_StateMachine_Clear, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_StateMachine_RunningStateMachine_Hold Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_StateMachine_RunningStateMachine_Hold = new ExpandedNodeId(Methods.FunctionalUnitType_StateMachine_RunningStateMachine_Hold, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_StateMachine_RunningStateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_StateMachine_RunningStateMachine_Reset = new ExpandedNodeId(Methods.FunctionalUnitType_StateMachine_RunningStateMachine_Reset, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_StateMachine_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_StateMachine_Start = new ExpandedNodeId(Methods.FunctionalUnitType_StateMachine_Start, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_StateMachine_StartProgram Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_StateMachine_StartProgram = new ExpandedNodeId(Methods.FunctionalUnitType_StateMachine_StartProgram, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_StateMachine_Stop Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_StateMachine_Stop = new ExpandedNodeId(Methods.FunctionalUnitType_StateMachine_Stop, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_StateMachine_RunningStateMachine_Suspend Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_StateMachine_RunningStateMachine_Suspend = new ExpandedNodeId(Methods.FunctionalUnitType_StateMachine_RunningStateMachine_Suspend, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_StateMachine_RunningStateMachine_Unhold Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_StateMachine_RunningStateMachine_Unhold = new ExpandedNodeId(Methods.FunctionalUnitType_StateMachine_RunningStateMachine_Unhold, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_StateMachine_RunningStateMachine_Unsuspend Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_StateMachine_RunningStateMachine_Unsuspend = new ExpandedNodeId(Methods.FunctionalUnitType_StateMachine_RunningStateMachine_Unsuspend, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Abort Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Abort = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Abort, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Clear Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Clear = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Clear, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Hold Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Hold = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Hold, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Reset = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Reset, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Start = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Start, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Suspend Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Suspend = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Suspend, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_ToComplete Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_ToComplete = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_ToComplete, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Unhold Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Unhold = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Unhold, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Unsuspend Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Unsuspend = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Unsuspend, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Acknowledge Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Acknowledge = new ExpandedNodeId(Methods.BaseControlFunctionType_AlarmMonitor_Acknowledge, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_AddComment Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_AddComment = new ExpandedNodeId(Methods.BaseControlFunctionType_AlarmMonitor_AddComment, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Disable Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Disable = new ExpandedNodeId(Methods.BaseControlFunctionType_AlarmMonitor_Disable, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Enable Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Enable = new ExpandedNodeId(Methods.BaseControlFunctionType_AlarmMonitor_Enable, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType_ResetTotalizer Method.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType_ResetTotalizer = new ExpandedNodeId(Methods.AnalogControlFunctionWithTotalizerType_ResetTotalizer, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_StateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_StateMachine_Reset = new ExpandedNodeId(Methods.BaseControlFunctionType_StateMachine_Reset, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_StateMachine_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_StateMachine_Start = new ExpandedNodeId(Methods.BaseControlFunctionType_StateMachine_Start, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_StateMachine_Stop Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_StateMachine_Stop = new ExpandedNodeId(Methods.BaseControlFunctionType_StateMachine_Stop, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Acknowledge Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Acknowledge = new ExpandedNodeId(Methods.BaseSensorFunctionType_AlarmMonitor_Acknowledge, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_AddComment Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_AddComment = new ExpandedNodeId(Methods.BaseSensorFunctionType_AlarmMonitor_AddComment, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Disable Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Disable = new ExpandedNodeId(Methods.BaseSensorFunctionType_AlarmMonitor_Disable, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Enable Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Enable = new ExpandedNodeId(Methods.BaseSensorFunctionType_AlarmMonitor_Enable, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Close Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Close = new ExpandedNodeId(Methods.CoverFunctionType_StateMachine_Close, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Lock Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Lock = new ExpandedNodeId(Methods.CoverFunctionType_StateMachine_Lock, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Open Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Open = new ExpandedNodeId(Methods.CoverFunctionType_StateMachine_Open, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Unlock Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Unlock = new ExpandedNodeId(Methods.CoverFunctionType_StateMachine_Unlock, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_Download Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_Download = new ExpandedNodeId(Methods.ProgramManagerType_ProgramTemplateSet_Download, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_Remove Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_Remove = new ExpandedNodeId(Methods.ProgramManagerType_ProgramTemplateSet_Remove, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_Upload Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_Upload = new ExpandedNodeId(Methods.ProgramManagerType_ProgramTemplateSet_Upload, Namespaces.Lads);

    }
    #endregion

    #region Object Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Objects in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.8")]
    public static partial class ObjectIds
    {
        /// <summary>
        /// The identifier for the MaintenanceTaskType_MaintenanceState Object.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_MaintenanceState = new ExpandedNodeId(Objects.MaintenanceTaskType_MaintenanceState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ActiveProgramType_ProgramTemplate Object.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_ProgramTemplate = new ExpandedNodeId(Objects.ActiveProgramType_ProgramTemplate, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ControllerParameterType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId ControllerParameterType_Operational = new ExpandedNodeId(Objects.ControllerParameterType_Operational, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSMaintenanceSetType_S_MaintenanceTask_ Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSMaintenanceSetType_S_MaintenanceTask_ = new ExpandedNodeId(Objects.LADSMaintenanceSetType_S_MaintenanceTask_, Namespaces.Lads);

        /// <summary>
        /// The identifier for the SetType_S_SetElement_ Object.
        /// </summary>
        public static readonly ExpandedNodeId SetType_S_SetElement_ = new ExpandedNodeId(Objects.SetType_S_SetElement_, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ControllerParameterSetType_S_SetElement_ Object.
        /// </summary>
        public static readonly ExpandedNodeId ControllerParameterSetType_S_SetElement_ = new ExpandedNodeId(Objects.ControllerParameterSetType_S_SetElement_, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_S_SetElement_ Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_S_SetElement_ = new ExpandedNodeId(Objects.FunctionalUnitSetType_S_SetElement_, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionSetType_S_SetElement_ Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionSetType_S_SetElement_ = new ExpandedNodeId(Objects.FunctionSetType_S_SetElement_, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor = new ExpandedNodeId(Objects.BaseControlFunctionType_AlarmMonitor, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_LimitState Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_LimitState = new ExpandedNodeId(Objects.BaseControlFunctionType_AlarmMonitor_LimitState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithComposedTargetValueType_TargetValueSet Object.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithComposedTargetValueType_TargetValueSet = new ExpandedNodeId(Objects.AnalogControlFunctionWithComposedTargetValueType_TargetValueSet, Namespaces.Lads);

        /// <summary>
        /// The identifier for the VariableSetType_S_Data_ Object.
        /// </summary>
        public static readonly ExpandedNodeId VariableSetType_S_Data_ = new ExpandedNodeId(Objects.VariableSetType_S_Data_, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType_Operational = new ExpandedNodeId(Objects.AnalogControlFunctionWithTotalizerType_Operational, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType_Operational = new ExpandedNodeId(Objects.AnalogControlFunctionType_Operational, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_ContollerTuningParameter Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_ContollerTuningParameter = new ExpandedNodeId(Objects.BaseControlFunctionType_ContollerTuningParameter, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MultiModeAnalogControlFunctionType_ControllerModeSet Object.
        /// </summary>
        public static readonly ExpandedNodeId MultiModeAnalogControlFunctionType_ControllerModeSet = new ExpandedNodeId(Objects.MultiModeAnalogControlFunctionType_ControllerModeSet, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MultiModeAnalogControlFunctionType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId MultiModeAnalogControlFunctionType_Operational = new ExpandedNodeId(Objects.MultiModeAnalogControlFunctionType_Operational, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MultiParameterAnalogControlFunctionType_ControllerParameterSet Object.
        /// </summary>
        public static readonly ExpandedNodeId MultiParameterAnalogControlFunctionType_ControllerParameterSet = new ExpandedNodeId(Objects.MultiParameterAnalogControlFunctionType_ControllerParameterSet, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_Operational = new ExpandedNodeId(Objects.BaseControlFunctionType_Operational, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_Operational = new ExpandedNodeId(Objects.RatebasedAccumulatingControlFunctionType_Operational, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_StateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_StateMachine = new ExpandedNodeId(Objects.BaseControlFunctionType_StateMachine, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TimerFunctionType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId TimerFunctionType_Operational = new ExpandedNodeId(Objects.TimerFunctionType_Operational, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor = new ExpandedNodeId(Objects.BaseSensorFunctionType_AlarmMonitor, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_LimitState Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_LimitState = new ExpandedNodeId(Objects.BaseSensorFunctionType_AlarmMonitor_LimitState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogSensorArrayFunctionType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorArrayFunctionType_Operational = new ExpandedNodeId(Objects.AnalogSensorArrayFunctionType_Operational, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionType_Operational = new ExpandedNodeId(Objects.AnalogSensorFunctionType_Operational, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_Calibration Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_Calibration = new ExpandedNodeId(Objects.BaseSensorFunctionType_Calibration, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_Configuration Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_Configuration = new ExpandedNodeId(Objects.BaseSensorFunctionType_Configuration, Namespaces.Lads);

        /// <summary>
        /// The identifier for the DiscreteSensorFunctionType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId DiscreteSensorFunctionType_Operational = new ExpandedNodeId(Objects.DiscreteSensorFunctionType_Operational, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_Operational = new ExpandedNodeId(Objects.BaseSensorFunctionType_Operational, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_Tuning Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_Tuning = new ExpandedNodeId(Objects.BaseSensorFunctionType_Tuning, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionType_Configuration Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionType_Configuration = new ExpandedNodeId(Objects.FunctionType_Configuration, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverFunctionType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_Operational = new ExpandedNodeId(Objects.CoverFunctionType_Operational, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine = new ExpandedNodeId(Objects.CoverFunctionType_StateMachine, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Closed Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Closed = new ExpandedNodeId(Objects.CoverStateMachineType_Closed, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_ClosedToError Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_ClosedToError = new ExpandedNodeId(Objects.CoverStateMachineType_ClosedToError, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Error Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Error = new ExpandedNodeId(Objects.CoverStateMachineType_Error, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_ClosedToLocked Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_ClosedToLocked = new ExpandedNodeId(Objects.CoverStateMachineType_ClosedToLocked, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Locked Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Locked = new ExpandedNodeId(Objects.CoverStateMachineType_Locked, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_ClosedToOpened Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_ClosedToOpened = new ExpandedNodeId(Objects.CoverStateMachineType_ClosedToOpened, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Opened Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Opened = new ExpandedNodeId(Objects.CoverStateMachineType_Opened, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_ErrorToOpened Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_ErrorToOpened = new ExpandedNodeId(Objects.CoverStateMachineType_ErrorToOpened, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_LockedToClosed Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_LockedToClosed = new ExpandedNodeId(Objects.CoverStateMachineType_LockedToClosed, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_LockedToError Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_LockedToError = new ExpandedNodeId(Objects.CoverStateMachineType_LockedToError, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_OpenedToClosed Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_OpenedToClosed = new ExpandedNodeId(Objects.CoverStateMachineType_OpenedToClosed, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionType_FunctionSet Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionType_FunctionSet = new ExpandedNodeId(Objects.FunctionType_FunctionSet, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram = new ExpandedNodeId(Objects.ProgramManagerType_ActiveProgram, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet = new ExpandedNodeId(Objects.ProgramManagerType_ProgramTemplateSet, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_S_SetElement_ Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_S_SetElement_ = new ExpandedNodeId(Objects.ProgramTemplateSetType_S_SetElement_, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramManagerType_ResultSet Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ResultSet = new ExpandedNodeId(Objects.ProgramManagerType_ResultSet, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultSetType_S_SetElement_ Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_S_SetElement_ = new ExpandedNodeId(Objects.ResultSetType_S_SetElement_, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_FileSet Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_FileSet = new ExpandedNodeId(Objects.ResultType_FileSet, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultFileSetType_S_SetElement_ Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileSetType_S_SetElement_ = new ExpandedNodeId(Objects.ResultFileSetType_S_SetElement_, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultFileType_File Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileType_File = new ExpandedNodeId(Objects.ResultFileType_File, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_ProgramTemplate Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_ProgramTemplate = new ExpandedNodeId(Objects.ResultType_ProgramTemplate, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_VariableSet Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_VariableSet = new ExpandedNodeId(Objects.ResultType_VariableSet, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Complete Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Complete = new ExpandedNodeId(Objects.RunningStateMachineType_Complete, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_CompleteToResetting Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_CompleteToResetting = new ExpandedNodeId(Objects.RunningStateMachineType_CompleteToResetting, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Resetting Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Resetting = new ExpandedNodeId(Objects.RunningStateMachineType_Resetting, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Completing Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Completing = new ExpandedNodeId(Objects.RunningStateMachineType_Completing, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_CompletingToComplete Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_CompletingToComplete = new ExpandedNodeId(Objects.RunningStateMachineType_CompletingToComplete, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Execute Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Execute = new ExpandedNodeId(Objects.RunningStateMachineType_Execute, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_ExecuteToCompleting Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_ExecuteToCompleting = new ExpandedNodeId(Objects.RunningStateMachineType_ExecuteToCompleting, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_ExecuteToHolding Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_ExecuteToHolding = new ExpandedNodeId(Objects.RunningStateMachineType_ExecuteToHolding, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Holding Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Holding = new ExpandedNodeId(Objects.RunningStateMachineType_Holding, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_ExecuteToSuspending Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_ExecuteToSuspending = new ExpandedNodeId(Objects.RunningStateMachineType_ExecuteToSuspending, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Suspending Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Suspending = new ExpandedNodeId(Objects.RunningStateMachineType_Suspending, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Held Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Held = new ExpandedNodeId(Objects.RunningStateMachineType_Held, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_HeldToUnholding Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_HeldToUnholding = new ExpandedNodeId(Objects.RunningStateMachineType_HeldToUnholding, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Unholding Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Unholding = new ExpandedNodeId(Objects.RunningStateMachineType_Unholding, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_HoldingToHeld Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_HoldingToHeld = new ExpandedNodeId(Objects.RunningStateMachineType_HoldingToHeld, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Idle Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Idle = new ExpandedNodeId(Objects.RunningStateMachineType_Idle, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_IdleToStarting Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_IdleToStarting = new ExpandedNodeId(Objects.RunningStateMachineType_IdleToStarting, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Starting Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Starting = new ExpandedNodeId(Objects.RunningStateMachineType_Starting, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_ResettingToIdle Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_ResettingToIdle = new ExpandedNodeId(Objects.RunningStateMachineType_ResettingToIdle, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_StartingToExecute Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_StartingToExecute = new ExpandedNodeId(Objects.RunningStateMachineType_StartingToExecute, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_StartingToHolding Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_StartingToHolding = new ExpandedNodeId(Objects.RunningStateMachineType_StartingToHolding, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Suspended Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Suspended = new ExpandedNodeId(Objects.RunningStateMachineType_Suspended, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_SuspendedToHolding Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_SuspendedToHolding = new ExpandedNodeId(Objects.RunningStateMachineType_SuspendedToHolding, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_SuspendedToUnsuspending Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_SuspendedToUnsuspending = new ExpandedNodeId(Objects.RunningStateMachineType_SuspendedToUnsuspending, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Unsuspending Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Unsuspending = new ExpandedNodeId(Objects.RunningStateMachineType_Unsuspending, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_SuspendingToHolding Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_SuspendingToHolding = new ExpandedNodeId(Objects.RunningStateMachineType_SuspendingToHolding, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_SuspendingToSuspended Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_SuspendingToSuspended = new ExpandedNodeId(Objects.RunningStateMachineType_SuspendingToSuspended, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_UnholdingToExecute Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_UnholdingToExecute = new ExpandedNodeId(Objects.RunningStateMachineType_UnholdingToExecute, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_UnholdingToHolding Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_UnholdingToHolding = new ExpandedNodeId(Objects.RunningStateMachineType_UnholdingToHolding, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_UnsuspendingToExecute Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_UnsuspendingToExecute = new ExpandedNodeId(Objects.RunningStateMachineType_UnsuspendingToExecute, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_UnsuspendingToHolding Object.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_UnsuspendingToHolding = new ExpandedNodeId(Objects.RunningStateMachineType_UnsuspendingToHolding, Namespaces.Lads);

        /// <summary>
        /// The identifier for the SupportedPropertiesSetType__SetElement Object.
        /// </summary>
        public static readonly ExpandedNodeId SupportedPropertiesSetType__SetElement = new ExpandedNodeId(Objects.SupportedPropertiesSetType__SetElement, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_FunctionSet Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_FunctionSet = new ExpandedNodeId(Objects.FunctionalUnitType_FunctionSet, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Identification Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Identification = new ExpandedNodeId(Objects.FunctionalUnitType_Identification, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock = new ExpandedNodeId(Objects.FunctionalUnitType_Lock, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Operational = new ExpandedNodeId(Objects.FunctionalUnitType_Operational, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager_ActiveProgram, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager_ProgramTemplateSet, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ResultSet Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ResultSet = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager_ResultSet, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_StateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_StateMachine = new ExpandedNodeId(Objects.FunctionalUnitType_StateMachine, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_StateMachine_RunningStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_StateMachine_RunningStateMachine = new ExpandedNodeId(Objects.FunctionalUnitType_StateMachine_RunningStateMachine, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_SupportedPropertiesSet Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_SupportedPropertiesSet = new ExpandedNodeId(Objects.FunctionalUnitType_SupportedPropertiesSet, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ComponentSetType_S_Component_ Object.
        /// </summary>
        public static readonly ExpandedNodeId ComponentSetType_S_Component_ = new ExpandedNodeId(Objects.ComponentSetType_S_Component_, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_Components Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Components = new ExpandedNodeId(Objects.LADSComponentType_Components, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_DeviceHealthAlarms Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_DeviceHealthAlarms = new ExpandedNodeId(Objects.LADSComponentType_DeviceHealthAlarms, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_Identification Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Identification = new ExpandedNodeId(Objects.LADSComponentType_Identification, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_Maintenance Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Maintenance = new ExpandedNodeId(Objects.LADSComponentType_Maintenance, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_OperationCounters Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_OperationCounters = new ExpandedNodeId(Objects.LADSComponentType_OperationCounters, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_Aborted Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_Aborted = new ExpandedNodeId(Objects.FunctionalStateMachineType_Aborted, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_AbortedToClearing Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_AbortedToClearing = new ExpandedNodeId(Objects.FunctionalStateMachineType_AbortedToClearing, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_Clearing Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_Clearing = new ExpandedNodeId(Objects.FunctionalStateMachineType_Clearing, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_Aborting Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_Aborting = new ExpandedNodeId(Objects.FunctionalStateMachineType_Aborting, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_AbortingToAborted Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_AbortingToAborted = new ExpandedNodeId(Objects.FunctionalStateMachineType_AbortingToAborted, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_ClearingToStopped Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_ClearingToStopped = new ExpandedNodeId(Objects.FunctionalStateMachineType_ClearingToStopped, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_Stopped Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_Stopped = new ExpandedNodeId(Objects.FunctionalStateMachineType_Stopped, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_Running Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_Running = new ExpandedNodeId(Objects.FunctionalStateMachineType_Running, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_RunningStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_RunningStateMachine = new ExpandedNodeId(Objects.FunctionalStateMachineType_RunningStateMachine, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_RunningToAborting Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_RunningToAborting = new ExpandedNodeId(Objects.FunctionalStateMachineType_RunningToAborting, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_RunningToStopping Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_RunningToStopping = new ExpandedNodeId(Objects.FunctionalStateMachineType_RunningToStopping, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_Stopping Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_Stopping = new ExpandedNodeId(Objects.FunctionalStateMachineType_Stopping, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_StoppedToRunning Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_StoppedToRunning = new ExpandedNodeId(Objects.FunctionalStateMachineType_StoppedToRunning, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_StoppingToStopped Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_StoppingToStopped = new ExpandedNodeId(Objects.FunctionalStateMachineType_StoppingToStopped, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Maintenance Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Maintenance = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_Maintenance, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_MaintenanceToOperating Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_MaintenanceToOperating = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_MaintenanceToOperating, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Operating Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Operating = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_Operating, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_MaintenanceToShutdown Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_MaintenanceToShutdown = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_MaintenanceToShutdown, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Shutdown Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Shutdown = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_Shutdown, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_OperatingToMaintenance Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_OperatingToMaintenance = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_OperatingToMaintenance, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_OperatingToShutdown Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_OperatingToShutdown = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_OperatingToShutdown, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_OperatingToStandby Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_OperatingToStandby = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_OperatingToStandby, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Standby Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Standby = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_Standby, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Powerup Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Powerup = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_Powerup, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_PowerupToOperating Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_PowerupToOperating = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_PowerupToOperating, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_StandbyToOperating Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_StandbyToOperating = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_StandbyToOperating, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_Components Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Components = new ExpandedNodeId(Objects.LADSDeviceType_Components, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_FunctionalUnitSet Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_FunctionalUnitSet = new ExpandedNodeId(Objects.LADSDeviceType_FunctionalUnitSet, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_Identification Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Identification = new ExpandedNodeId(Objects.LADSDeviceType_Identification, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_Maintenance Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Maintenance = new ExpandedNodeId(Objects.LADSDeviceType_Maintenance, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_OperationCounters Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_OperationCounters = new ExpandedNodeId(Objects.LADSDeviceType_OperationCounters, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_StateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_StateMachine = new ExpandedNodeId(Objects.LADSDeviceType_StateMachine, Namespaces.Lads);

        /// <summary>
        /// The identifier for the KeyValueType_Encoding_DefaultBinary Object.
        /// </summary>
        public static readonly ExpandedNodeId KeyValueType_Encoding_DefaultBinary = new ExpandedNodeId(Objects.KeyValueType_Encoding_DefaultBinary, Namespaces.Lads);

        /// <summary>
        /// The identifier for the KeyValueType_Encoding_DefaultJson Object.
        /// </summary>
        public static readonly ExpandedNodeId KeyValueType_Encoding_DefaultJson = new ExpandedNodeId(Objects.KeyValueType_Encoding_DefaultJson, Namespaces.Lads);

        /// <summary>
        /// The identifier for the KeyValueType_Encoding_DefaultXml Object.
        /// </summary>
        public static readonly ExpandedNodeId KeyValueType_Encoding_DefaultXml = new ExpandedNodeId(Objects.KeyValueType_Encoding_DefaultXml, Namespaces.Lads);

        /// <summary>
        /// The identifier for the SampleInfoType_Encoding_DefaultBinary Object.
        /// </summary>
        public static readonly ExpandedNodeId SampleInfoType_Encoding_DefaultBinary = new ExpandedNodeId(Objects.SampleInfoType_Encoding_DefaultBinary, Namespaces.Lads);

        /// <summary>
        /// The identifier for the SampleInfoType_Encoding_DefaultJson Object.
        /// </summary>
        public static readonly ExpandedNodeId SampleInfoType_Encoding_DefaultJson = new ExpandedNodeId(Objects.SampleInfoType_Encoding_DefaultJson, Namespaces.Lads);

        /// <summary>
        /// The identifier for the SampleInfoType_Encoding_DefaultXml Object.
        /// </summary>
        public static readonly ExpandedNodeId SampleInfoType_Encoding_DefaultXml = new ExpandedNodeId(Objects.SampleInfoType_Encoding_DefaultXml, Namespaces.Lads);

        /// <summary>
        /// The identifier for the _http___opcfoundation_org_UA_lads_ Object.
        /// </summary>
        public static readonly ExpandedNodeId _http___opcfoundation_org_UA_lads_ = new ExpandedNodeId(Objects._http___opcfoundation_org_UA_lads_, Namespaces.Lads);

    }
    #endregion

    #region ObjectType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Objects in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.8")]
    public static partial class ObjectTypeIds
    {
        /// <summary>
        /// The identifier for the ActiveProgramType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType = new ExpandedNodeId(ObjectTypes.ActiveProgramType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType = new ExpandedNodeId(ObjectTypes.MaintenanceTaskType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ControllerParameterType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ControllerParameterType = new ExpandedNodeId(ObjectTypes.ControllerParameterType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ControllerTuningParameterType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ControllerTuningParameterType = new ExpandedNodeId(ObjectTypes.ControllerTuningParameterType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the PidControllerParameterType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId PidControllerParameterType = new ExpandedNodeId(ObjectTypes.PidControllerParameterType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSMaintenanceSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId LADSMaintenanceSetType = new ExpandedNodeId(ObjectTypes.LADSMaintenanceSetType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSOperationCountersType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId LADSOperationCountersType = new ExpandedNodeId(ObjectTypes.LADSOperationCountersType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the SetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId SetType = new ExpandedNodeId(ObjectTypes.SetType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ControllerParameterSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ControllerParameterSetType = new ExpandedNodeId(ObjectTypes.ControllerParameterSetType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType = new ExpandedNodeId(ObjectTypes.FunctionalUnitSetType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId FunctionSetType = new ExpandedNodeId(ObjectTypes.FunctionSetType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType = new ExpandedNodeId(ObjectTypes.ProgramTemplateSetType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultFileSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileSetType = new ExpandedNodeId(ObjectTypes.ResultFileSetType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType = new ExpandedNodeId(ObjectTypes.ResultSetType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the SupportedPropertiesSetType_ ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId SupportedPropertiesSetType_ = new ExpandedNodeId(ObjectTypes.SupportedPropertiesSetType_, Namespaces.Lads);

        /// <summary>
        /// The identifier for the VariableSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId VariableSetType = new ExpandedNodeId(ObjectTypes.VariableSetType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ComponentSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ComponentSetType = new ExpandedNodeId(ObjectTypes.ComponentSetType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramTemplateType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType = new ExpandedNodeId(ObjectTypes.ProgramTemplateType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultFileType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileType = new ExpandedNodeId(ObjectTypes.ResultFileType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ResultType = new ExpandedNodeId(ObjectTypes.ResultType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType = new ExpandedNodeId(ObjectTypes.CoverStateMachineType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType = new ExpandedNodeId(ObjectTypes.FunctionalStateMachineType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ActiveProgramStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramStateMachineType = new ExpandedNodeId(ObjectTypes.ActiveProgramStateMachineType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ControlFunctionStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ControlFunctionStateMachineType = new ExpandedNodeId(ObjectTypes.ControlFunctionStateMachineType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitStateMachineType = new ExpandedNodeId(ObjectTypes.FunctionalUnitStateMachineType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType = new ExpandedNodeId(ObjectTypes.LADSDeviceStateMachineType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType = new ExpandedNodeId(ObjectTypes.RunningStateMachineType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the SupportedPropertyType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId SupportedPropertyType = new ExpandedNodeId(ObjectTypes.SupportedPropertyType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType = new ExpandedNodeId(ObjectTypes.LADSDeviceType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType = new ExpandedNodeId(ObjectTypes.LADSComponentType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType = new ExpandedNodeId(ObjectTypes.FunctionalUnitType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId FunctionType = new ExpandedNodeId(ObjectTypes.FunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType = new ExpandedNodeId(ObjectTypes.BaseControlFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType = new ExpandedNodeId(ObjectTypes.AnalogControlFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithComposedTargetValueType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithComposedTargetValueType = new ExpandedNodeId(ObjectTypes.AnalogControlFunctionWithComposedTargetValueType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType = new ExpandedNodeId(ObjectTypes.AnalogControlFunctionWithTotalizerType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the DiscreteControlFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId DiscreteControlFunctionType = new ExpandedNodeId(ObjectTypes.DiscreteControlFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MultiStateDiscreteControlFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId MultiStateDiscreteControlFunctionType = new ExpandedNodeId(ObjectTypes.MultiStateDiscreteControlFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TwoStateDiscreteControlFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId TwoStateDiscreteControlFunctionType = new ExpandedNodeId(ObjectTypes.TwoStateDiscreteControlFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MultiModeAnalogControlFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId MultiModeAnalogControlFunctionType = new ExpandedNodeId(ObjectTypes.MultiModeAnalogControlFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MultiParameterAnalogControlFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId MultiParameterAnalogControlFunctionType = new ExpandedNodeId(ObjectTypes.MultiParameterAnalogControlFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType = new ExpandedNodeId(ObjectTypes.RatebasedAccumulatingControlFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the StartStopControlFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId StartStopControlFunctionType = new ExpandedNodeId(ObjectTypes.StartStopControlFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TimerFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId TimerFunctionType = new ExpandedNodeId(ObjectTypes.TimerFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType = new ExpandedNodeId(ObjectTypes.BaseSensorFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogSensorArrayFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorArrayFunctionType = new ExpandedNodeId(ObjectTypes.AnalogSensorArrayFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionType = new ExpandedNodeId(ObjectTypes.AnalogSensorFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionWithCompensationType = new ExpandedNodeId(ObjectTypes.AnalogSensorFunctionWithCompensationType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the DiscreteSensorFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId DiscreteSensorFunctionType = new ExpandedNodeId(ObjectTypes.DiscreteSensorFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MutliStateDiscreteSensorFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId MutliStateDiscreteSensorFunctionType = new ExpandedNodeId(ObjectTypes.MutliStateDiscreteSensorFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TwoStateDiscreteSensorFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId TwoStateDiscreteSensorFunctionType = new ExpandedNodeId(ObjectTypes.TwoStateDiscreteSensorFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType = new ExpandedNodeId(ObjectTypes.CoverFunctionType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramManagerType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType = new ExpandedNodeId(ObjectTypes.ProgramManagerType, Namespaces.Lads);

    }
    #endregion

    #region ReferenceType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all ReferenceTypes in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.8")]
    public static partial class ReferenceTypeIds
    {
    }
    #endregion

    #region Variable Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Variables in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.8")]
    public static partial class VariableIds
    {
        /// <summary>
        /// The identifier for the MaintenanceTaskStopResultEnum_EnumValues Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskStopResultEnum_EnumValues = new ExpandedNodeId(Variables.MaintenanceTaskStopResultEnum_EnumValues, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_ConfigurationChanged Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_ConfigurationChanged = new ExpandedNodeId(Variables.MaintenanceTaskType_ConfigurationChanged, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_EstimatedDowntime Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_EstimatedDowntime = new ExpandedNodeId(Variables.MaintenanceTaskType_EstimatedDowntime, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_LastExecutionDate Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_LastExecutionDate = new ExpandedNodeId(Variables.MaintenanceTaskType_LastExecutionDate, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_LastOperatingCycles Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_LastOperatingCycles = new ExpandedNodeId(Variables.MaintenanceTaskType_LastOperatingCycles, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_LastOperatingTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_LastOperatingTime = new ExpandedNodeId(Variables.MaintenanceTaskType_LastOperatingTime, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_MaintenanceMethod Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_MaintenanceMethod = new ExpandedNodeId(Variables.MaintenanceTaskType_MaintenanceMethod, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_MaintenanceSupplier Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_MaintenanceSupplier = new ExpandedNodeId(Variables.MaintenanceTaskType_MaintenanceSupplier, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_NextOperatingCycles Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_NextOperatingCycles = new ExpandedNodeId(Variables.MaintenanceTaskType_NextOperatingCycles, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_NextOperatingTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_NextOperatingTime = new ExpandedNodeId(Variables.MaintenanceTaskType_NextOperatingTime, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_PartsOfAssetReplaced Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_PartsOfAssetReplaced = new ExpandedNodeId(Variables.MaintenanceTaskType_PartsOfAssetReplaced, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_PartsOfAssetServiced Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_PartsOfAssetServiced = new ExpandedNodeId(Variables.MaintenanceTaskType_PartsOfAssetServiced, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_PlannedDate Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_PlannedDate = new ExpandedNodeId(Variables.MaintenanceTaskType_PlannedDate, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_QualificationOfPersonnel Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_QualificationOfPersonnel = new ExpandedNodeId(Variables.MaintenanceTaskType_QualificationOfPersonnel, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_RecurrencePeriod Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_RecurrencePeriod = new ExpandedNodeId(Variables.MaintenanceTaskType_RecurrencePeriod, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MaintenanceTaskType_Stop_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceTaskType_Stop_InputArguments = new ExpandedNodeId(Variables.MaintenanceTaskType_Stop_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ActiveProgramType_CurrentPauseTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_CurrentPauseTime = new ExpandedNodeId(Variables.ActiveProgramType_CurrentPauseTime, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ActiveProgramType_CurrentRuntime Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_CurrentRuntime = new ExpandedNodeId(Variables.ActiveProgramType_CurrentRuntime, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ActiveProgramType_CurrentStepName Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_CurrentStepName = new ExpandedNodeId(Variables.ActiveProgramType_CurrentStepName, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ActiveProgramType_CurrentStepNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_CurrentStepNumber = new ExpandedNodeId(Variables.ActiveProgramType_CurrentStepNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ActiveProgramType_CurrentStepRuntime Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_CurrentStepRuntime = new ExpandedNodeId(Variables.ActiveProgramType_CurrentStepRuntime, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ActiveProgramType_DeviceProgramRunID Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_DeviceProgramRunID = new ExpandedNodeId(Variables.ActiveProgramType_DeviceProgramRunID, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ActiveProgramType_EstimatedRunTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_EstimatedRunTime = new ExpandedNodeId(Variables.ActiveProgramType_EstimatedRunTime, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ActiveProgramType_EstimatedStepNumbers Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_EstimatedStepNumbers = new ExpandedNodeId(Variables.ActiveProgramType_EstimatedStepNumbers, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ActiveProgramType_EstimatedStepRuntime Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_EstimatedStepRuntime = new ExpandedNodeId(Variables.ActiveProgramType_EstimatedStepRuntime, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ControllerParameterType_CurrentValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControllerParameterType_CurrentValue = new ExpandedNodeId(Variables.ControllerParameterType_CurrentValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ControllerParameterType_TargetValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControllerParameterType_TargetValue = new ExpandedNodeId(Variables.ControllerParameterType_TargetValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the PidControllerParameterType_CtrlP Variable.
        /// </summary>
        public static readonly ExpandedNodeId PidControllerParameterType_CtrlP = new ExpandedNodeId(Variables.PidControllerParameterType_CtrlP, Namespaces.Lads);

        /// <summary>
        /// The identifier for the PidControllerParameterType_CtrlTd Variable.
        /// </summary>
        public static readonly ExpandedNodeId PidControllerParameterType_CtrlTd = new ExpandedNodeId(Variables.PidControllerParameterType_CtrlTd, Namespaces.Lads);

        /// <summary>
        /// The identifier for the PidControllerParameterType_CtrlTi Variable.
        /// </summary>
        public static readonly ExpandedNodeId PidControllerParameterType_CtrlTi = new ExpandedNodeId(Variables.PidControllerParameterType_CtrlTi, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSOperationCountersType_LifeTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSOperationCountersType_LifeTime = new ExpandedNodeId(Variables.LADSOperationCountersType_LifeTime, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSOperationCountersType_OperationCycleCounter Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSOperationCountersType_OperationCycleCounter = new ExpandedNodeId(Variables.LADSOperationCountersType_OperationCycleCounter, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSOperationCountersType_OperationDuration Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSOperationCountersType_OperationDuration = new ExpandedNodeId(Variables.LADSOperationCountersType_OperationDuration, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSOperationCountersType_PowerOnDuration Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSOperationCountersType_PowerOnDuration = new ExpandedNodeId(Variables.LADSOperationCountersType_PowerOnDuration, Namespaces.Lads);

        /// <summary>
        /// The identifier for the SetType_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId SetType_NodeVersion = new ExpandedNodeId(Variables.SetType_NodeVersion, Namespaces.Lads);

        /// <summary>
        /// The identifier for the VariableSetType_S_VariableSetElement_ Variable.
        /// </summary>
        public static readonly ExpandedNodeId VariableSetType_S_VariableSetElement_ = new ExpandedNodeId(Variables.VariableSetType_S_VariableSetElement_, Namespaces.Lads);

        /// <summary>
        /// The identifier for the VariableSetType_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId VariableSetType_NodeVersion = new ExpandedNodeId(Variables.VariableSetType_NodeVersion, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ComponentSetType_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId ComponentSetType_NodeVersion = new ExpandedNodeId(Variables.ComponentSetType_NodeVersion, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Author Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Author = new ExpandedNodeId(Variables.ProgramTemplateType_Author, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Created Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Created = new ExpandedNodeId(Variables.ProgramTemplateType_Created, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Description Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Description = new ExpandedNodeId(Variables.ProgramTemplateType_Description, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Modified Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Modified = new ExpandedNodeId(Variables.ProgramTemplateType_Modified, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Name = new ExpandedNodeId(Variables.ProgramTemplateType_Name, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Status Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Status = new ExpandedNodeId(Variables.ProgramTemplateType_Status, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramTemplateType_TemplateId Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_TemplateId = new ExpandedNodeId(Variables.ProgramTemplateType_TemplateId, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Version Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Version = new ExpandedNodeId(Variables.ProgramTemplateType_Version, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultFileType_MimeType Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileType_MimeType = new ExpandedNodeId(Variables.ResultFileType_MimeType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultFileType_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileType_Name = new ExpandedNodeId(Variables.ResultFileType_Name, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultFileType_URL Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileType_URL = new ExpandedNodeId(Variables.ResultFileType_URL, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_Client Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Client = new ExpandedNodeId(Variables.ResultType_Client, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_Description Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Description = new ExpandedNodeId(Variables.ResultType_Description, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_DeviceProgramRunId Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_DeviceProgramRunId = new ExpandedNodeId(Variables.ResultType_DeviceProgramRunId, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_EstimateRuntime Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_EstimateRuntime = new ExpandedNodeId(Variables.ResultType_EstimateRuntime, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_JobId Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_JobId = new ExpandedNodeId(Variables.ResultType_JobId, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Name = new ExpandedNodeId(Variables.ResultType_Name, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_Properties Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Properties = new ExpandedNodeId(Variables.ResultType_Properties, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_SampleIds Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_SampleIds = new ExpandedNodeId(Variables.ResultType_SampleIds, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_Started Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Started = new ExpandedNodeId(Variables.ResultType_Started, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_Stopped Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Stopped = new ExpandedNodeId(Variables.ResultType_Stopped, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_SupervisoryTaskId Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_SupervisoryTaskId = new ExpandedNodeId(Variables.ResultType_SupervisoryTaskId, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_TotalPauseTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_TotalPauseTime = new ExpandedNodeId(Variables.ResultType_TotalPauseTime, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_TotalRuntime Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_TotalRuntime = new ExpandedNodeId(Variables.ResultType_TotalRuntime, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ResultType_User Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_User = new ExpandedNodeId(Variables.ResultType_User, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Closed_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Closed_StateNumber = new ExpandedNodeId(Variables.CoverStateMachineType_Closed_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_ClosedToError_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_ClosedToError_TransitionNumber = new ExpandedNodeId(Variables.CoverStateMachineType_ClosedToError_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_ClosedToLocked_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_ClosedToLocked_TransitionNumber = new ExpandedNodeId(Variables.CoverStateMachineType_ClosedToLocked_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_ClosedToOpened_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_ClosedToOpened_TransitionNumber = new ExpandedNodeId(Variables.CoverStateMachineType_ClosedToOpened_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Error_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Error_StateNumber = new ExpandedNodeId(Variables.CoverStateMachineType_Error_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_ErrorToOpened_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_ErrorToOpened_TransitionNumber = new ExpandedNodeId(Variables.CoverStateMachineType_ErrorToOpened_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Locked_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Locked_StateNumber = new ExpandedNodeId(Variables.CoverStateMachineType_Locked_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_LockedToClosed_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_LockedToClosed_TransitionNumber = new ExpandedNodeId(Variables.CoverStateMachineType_LockedToClosed_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_LockedToError_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_LockedToError_TransitionNumber = new ExpandedNodeId(Variables.CoverStateMachineType_LockedToError_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Opened_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Opened_StateNumber = new ExpandedNodeId(Variables.CoverStateMachineType_Opened_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_OpenedToClosed_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_OpenedToClosed_TransitionNumber = new ExpandedNodeId(Variables.CoverStateMachineType_OpenedToClosed_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Reset_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Reset_InputArguments = new ExpandedNodeId(Variables.CoverStateMachineType_Reset_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Reset_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Reset_OutputArguments = new ExpandedNodeId(Variables.CoverStateMachineType_Reset_OutputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_Aborted_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_Aborted_StateNumber = new ExpandedNodeId(Variables.FunctionalStateMachineType_Aborted_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_AbortedToClearing_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_AbortedToClearing_TransitionNumber = new ExpandedNodeId(Variables.FunctionalStateMachineType_AbortedToClearing_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_Aborting_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_Aborting_StateNumber = new ExpandedNodeId(Variables.FunctionalStateMachineType_Aborting_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_AbortingToAborted_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_AbortingToAborted_TransitionNumber = new ExpandedNodeId(Variables.FunctionalStateMachineType_AbortingToAborted_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ActiveProgramStateMachineType_Start_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramStateMachineType_Start_InputArguments = new ExpandedNodeId(Variables.ActiveProgramStateMachineType_Start_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ActiveProgramStateMachineType_Start_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramStateMachineType_Start_OutputArguments = new ExpandedNodeId(Variables.ActiveProgramStateMachineType_Start_OutputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_AvailableStates = new ExpandedNodeId(Variables.FunctionalStateMachineType_AvailableStates, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_AvailableTransitions = new ExpandedNodeId(Variables.FunctionalStateMachineType_AvailableTransitions, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_Clearing_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_Clearing_StateNumber = new ExpandedNodeId(Variables.FunctionalStateMachineType_Clearing_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_ClearingToStopped_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_ClearingToStopped_TransitionNumber = new ExpandedNodeId(Variables.FunctionalStateMachineType_ClearingToStopped_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ControlFunctionStateMachineType_Start_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControlFunctionStateMachineType_Start_InputArguments = new ExpandedNodeId(Variables.ControlFunctionStateMachineType_Start_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ControlFunctionStateMachineType_Start_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControlFunctionStateMachineType_Start_OutputArguments = new ExpandedNodeId(Variables.ControlFunctionStateMachineType_Start_OutputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_CurrentState = new ExpandedNodeId(Variables.FunctionalStateMachineType_CurrentState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_CurrentState_EffectiveDisplayName Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_CurrentState_EffectiveDisplayName = new ExpandedNodeId(Variables.FunctionalStateMachineType_CurrentState_EffectiveDisplayName, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitStateMachineType_Start_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitStateMachineType_Start_InputArguments = new ExpandedNodeId(Variables.FunctionalUnitStateMachineType_Start_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitStateMachineType_Start_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitStateMachineType_Start_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitStateMachineType_Start_OutputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitStateMachineType_StartProgram_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitStateMachineType_StartProgram_InputArguments = new ExpandedNodeId(Variables.FunctionalUnitStateMachineType_StartProgram_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitStateMachineType_StartProgram_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitStateMachineType_StartProgram_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitStateMachineType_StartProgram_OutputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_Running_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_Running_StateNumber = new ExpandedNodeId(Variables.FunctionalStateMachineType_Running_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_RunningToAborting_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_RunningToAborting_TransitionNumber = new ExpandedNodeId(Variables.FunctionalStateMachineType_RunningToAborting_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_RunningToStopping_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_RunningToStopping_TransitionNumber = new ExpandedNodeId(Variables.FunctionalStateMachineType_RunningToStopping_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_Stopped_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_Stopped_StateNumber = new ExpandedNodeId(Variables.FunctionalStateMachineType_Stopped_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_StoppedToRunning_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_StoppedToRunning_TransitionNumber = new ExpandedNodeId(Variables.FunctionalStateMachineType_StoppedToRunning_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_Stopping_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_Stopping_StateNumber = new ExpandedNodeId(Variables.FunctionalStateMachineType_Stopping_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalStateMachineType_StoppingToStopped_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalStateMachineType_StoppingToStopped_TransitionNumber = new ExpandedNodeId(Variables.FunctionalStateMachineType_StoppingToStopped_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Maintenance_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Maintenance_StateNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_Maintenance_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_MaintenanceToOperating_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_MaintenanceToOperating_TransitionNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_MaintenanceToOperating_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_MaintenanceToShutdown_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_MaintenanceToShutdown_TransitionNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_MaintenanceToShutdown_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Operating_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Operating_StateNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_Operating_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_OperatingToMaintenance_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_OperatingToMaintenance_TransitionNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_OperatingToMaintenance_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_OperatingToShutdown_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_OperatingToShutdown_TransitionNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_OperatingToShutdown_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_OperatingToStandby_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_OperatingToStandby_TransitionNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_OperatingToStandby_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Powerup_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Powerup_StateNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_Powerup_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_PowerupToOperating_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_PowerupToOperating_TransitionNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_PowerupToOperating_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Shutdown_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Shutdown_StateNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_Shutdown_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Standby_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Standby_StateNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_Standby_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_StandbyToOperating_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_StandbyToOperating_TransitionNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_StandbyToOperating_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Complete_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Complete_StateNumber = new ExpandedNodeId(Variables.RunningStateMachineType_Complete_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_CompleteToResetting_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_CompleteToResetting_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_CompleteToResetting_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Completing_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Completing_StateNumber = new ExpandedNodeId(Variables.RunningStateMachineType_Completing_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_CompletingToComplete_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_CompletingToComplete_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_CompletingToComplete_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Execute_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Execute_StateNumber = new ExpandedNodeId(Variables.RunningStateMachineType_Execute_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_ExecuteToCompleting_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_ExecuteToCompleting_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_ExecuteToCompleting_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_ExecuteToHolding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_ExecuteToHolding_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_ExecuteToHolding_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_ExecuteToSuspending_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_ExecuteToSuspending_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_ExecuteToSuspending_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Held_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Held_StateNumber = new ExpandedNodeId(Variables.RunningStateMachineType_Held_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_HeldToUnholding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_HeldToUnholding_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_HeldToUnholding_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Holding_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Holding_StateNumber = new ExpandedNodeId(Variables.RunningStateMachineType_Holding_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_HoldingToHeld_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_HoldingToHeld_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_HoldingToHeld_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Idle_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Idle_StateNumber = new ExpandedNodeId(Variables.RunningStateMachineType_Idle_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_IdleToStarting_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_IdleToStarting_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_IdleToStarting_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Resetting_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Resetting_StateNumber = new ExpandedNodeId(Variables.RunningStateMachineType_Resetting_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_ResettingToIdle_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_ResettingToIdle_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_ResettingToIdle_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Starting_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Starting_StateNumber = new ExpandedNodeId(Variables.RunningStateMachineType_Starting_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_StartingToExecute_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_StartingToExecute_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_StartingToExecute_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_StartingToHolding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_StartingToHolding_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_StartingToHolding_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Suspended_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Suspended_StateNumber = new ExpandedNodeId(Variables.RunningStateMachineType_Suspended_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_SuspendedToHolding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_SuspendedToHolding_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_SuspendedToHolding_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_SuspendedToUnsuspending_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_SuspendedToUnsuspending_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_SuspendedToUnsuspending_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Suspending_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Suspending_StateNumber = new ExpandedNodeId(Variables.RunningStateMachineType_Suspending_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_SuspendingToHolding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_SuspendingToHolding_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_SuspendingToHolding_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_SuspendingToSuspended_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_SuspendingToSuspended_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_SuspendingToSuspended_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Unholding_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Unholding_StateNumber = new ExpandedNodeId(Variables.RunningStateMachineType_Unholding_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_UnholdingToExecute_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_UnholdingToExecute_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_UnholdingToExecute_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_UnholdingToHolding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_UnholdingToHolding_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_UnholdingToHolding_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_Unsuspending_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_Unsuspending_StateNumber = new ExpandedNodeId(Variables.RunningStateMachineType_Unsuspending_StateNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_UnsuspendingToExecute_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_UnsuspendingToExecute_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_UnsuspendingToExecute_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RunningStateMachineType_UnsuspendingToHolding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId RunningStateMachineType_UnsuspendingToHolding_TransitionNumber = new ExpandedNodeId(Variables.RunningStateMachineType_UnsuspendingToHolding_TransitionNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_AssetId Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_AssetId = new ExpandedNodeId(Variables.LADSDeviceType_AssetId, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_ComponentName Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_ComponentName = new ExpandedNodeId(Variables.LADSDeviceType_ComponentName, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_DeviceClass Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_DeviceClass = new ExpandedNodeId(Variables.LADSDeviceType_DeviceClass, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_DeviceHealth Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_DeviceHealth = new ExpandedNodeId(Variables.LADSDeviceType_DeviceHealth, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_DeviceManual Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_DeviceManual = new ExpandedNodeId(Variables.LADSDeviceType_DeviceManual, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_DeviceRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_DeviceRevision = new ExpandedNodeId(Variables.LADSDeviceType_DeviceRevision, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_FunctionalUnitSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_FunctionalUnitSet_NodeVersion = new ExpandedNodeId(Variables.LADSDeviceType_FunctionalUnitSet_NodeVersion, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_HardwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_HardwareRevision = new ExpandedNodeId(Variables.LADSDeviceType_HardwareRevision, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_HierarchicalLocation Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_HierarchicalLocation = new ExpandedNodeId(Variables.LADSDeviceType_HierarchicalLocation, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Manufacturer = new ExpandedNodeId(Variables.LADSDeviceType_Manufacturer, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_ManufacturerUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_ManufacturerUri = new ExpandedNodeId(Variables.LADSDeviceType_ManufacturerUri, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_Model Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Model = new ExpandedNodeId(Variables.LADSDeviceType_Model, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_OperationalLocation Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_OperationalLocation = new ExpandedNodeId(Variables.LADSDeviceType_OperationalLocation, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_ProductCode Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_ProductCode = new ExpandedNodeId(Variables.LADSDeviceType_ProductCode, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_ProductInstanceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_ProductInstanceUri = new ExpandedNodeId(Variables.LADSDeviceType_ProductInstanceUri, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_RevisionCounter Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_RevisionCounter = new ExpandedNodeId(Variables.LADSDeviceType_RevisionCounter, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_SerialNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_SerialNumber = new ExpandedNodeId(Variables.LADSDeviceType_SerialNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_SoftwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_SoftwareRevision = new ExpandedNodeId(Variables.LADSDeviceType_SoftwareRevision, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_Maintenance_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Maintenance_NodeVersion = new ExpandedNodeId(Variables.LADSDeviceType_Maintenance_NodeVersion, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_StateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_StateMachine_CurrentState = new ExpandedNodeId(Variables.LADSDeviceType_StateMachine_CurrentState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSDeviceType_StateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_StateMachine_CurrentState_Id = new ExpandedNodeId(Variables.LADSDeviceType_StateMachine_CurrentState_Id, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_AssetId Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_AssetId = new ExpandedNodeId(Variables.LADSComponentType_AssetId, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_ComponentName Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_ComponentName = new ExpandedNodeId(Variables.LADSComponentType_ComponentName, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_DeviceClass Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_DeviceClass = new ExpandedNodeId(Variables.LADSComponentType_DeviceClass, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_DeviceHealth Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_DeviceHealth = new ExpandedNodeId(Variables.LADSComponentType_DeviceHealth, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_DeviceManual Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_DeviceManual = new ExpandedNodeId(Variables.LADSComponentType_DeviceManual, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_DeviceRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_DeviceRevision = new ExpandedNodeId(Variables.LADSComponentType_DeviceRevision, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_HardwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_HardwareRevision = new ExpandedNodeId(Variables.LADSComponentType_HardwareRevision, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_HierarchicalLocation Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_HierarchicalLocation = new ExpandedNodeId(Variables.LADSComponentType_HierarchicalLocation, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Manufacturer = new ExpandedNodeId(Variables.LADSComponentType_Manufacturer, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_ManufacturerUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_ManufacturerUri = new ExpandedNodeId(Variables.LADSComponentType_ManufacturerUri, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_Model Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Model = new ExpandedNodeId(Variables.LADSComponentType_Model, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_OperationalLocation Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_OperationalLocation = new ExpandedNodeId(Variables.LADSComponentType_OperationalLocation, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_ProductCode Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_ProductCode = new ExpandedNodeId(Variables.LADSComponentType_ProductCode, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_ProductInstanceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_ProductInstanceUri = new ExpandedNodeId(Variables.LADSComponentType_ProductInstanceUri, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_RevisionCounter Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_RevisionCounter = new ExpandedNodeId(Variables.LADSComponentType_RevisionCounter, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_SerialNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_SerialNumber = new ExpandedNodeId(Variables.LADSComponentType_SerialNumber, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_SoftwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_SoftwareRevision = new ExpandedNodeId(Variables.LADSComponentType_SoftwareRevision, Namespaces.Lads);

        /// <summary>
        /// The identifier for the LADSComponentType_Maintenance_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Maintenance_NodeVersion = new ExpandedNodeId(Variables.LADSComponentType_Maintenance_NodeVersion, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_AssetId Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_AssetId = new ExpandedNodeId(Variables.FunctionalUnitType_AssetId, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ComponentName Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ComponentName = new ExpandedNodeId(Variables.FunctionalUnitType_ComponentName, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_BreakLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_BreakLock_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_BreakLock_OutputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_ExitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_ExitLock_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_ExitLock_OutputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_InitLock_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_InitLock_InputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_InitLock_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_InitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_InitLock_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_InitLock_OutputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_Locked Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_Locked = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_Locked, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_LockingClient Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_LockingClient = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_LockingClient, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_LockingUser Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_LockingUser = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_LockingUser, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_RemainingLockTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_RemainingLockTime = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_RemainingLockTime, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_RenewLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_RenewLock_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_RenewLock_OutputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_StateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_StateMachine_CurrentState = new ExpandedNodeId(Variables.FunctionalUnitType_StateMachine_CurrentState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_StateMachine_CurrentState_EffectiveDisplayName Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_StateMachine_CurrentState_EffectiveDisplayName = new ExpandedNodeId(Variables.FunctionalUnitType_StateMachine_CurrentState_EffectiveDisplayName, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Author Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Author = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Author, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Created Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Created = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Created, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Description Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Description = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Description, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Modified Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Modified = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Modified, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Name = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Name, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Status Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Status = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Status, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Type Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Type = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Type, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Version Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Version = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Version, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableStates = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableStates, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_AvailableStates = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_AvailableStates, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_AvailableTransitions = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_AvailableTransitions, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_CurrentState = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_CurrentState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_CurrentState_Id = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_CurrentState_Id, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_AvailableStates = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_AvailableStates, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_AvailableTransitions = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_AvailableTransitions, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_CurrentState = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_CurrentState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_CurrentState_Id = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_CurrentState_Id, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Start_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Start_InputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Start_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Start_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Start_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_RunningStateMachine_RunningStateMachine_Start_OutputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_InputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_OutputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_NodeVersion = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ProgramTemplateSet_NodeVersion, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove_InputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload_InputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ResultSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ResultSet_NodeVersion = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ResultSet_NodeVersion, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_AckedState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_AckedState = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_AckedState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_AckedState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_AckedState_Id = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_AckedState_Id, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Acknowledge_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Acknowledge_InputArguments = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Acknowledge_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_ActiveState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_ActiveState = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_ActiveState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_ActiveState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_ActiveState_Id = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_ActiveState_Id, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_AddComment_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_AddComment_InputArguments = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_AddComment_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_BranchId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_BranchId = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_BranchId, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_ClientUserId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_ClientUserId = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_ClientUserId, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Comment Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Comment = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Comment, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Comment_SourceTimestamp Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Comment_SourceTimestamp = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Comment_SourceTimestamp, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_ConditionClassId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_ConditionClassId = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_ConditionClassId, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_ConditionClassName Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_ConditionClassName = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_ConditionClassName, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_ConditionName Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_ConditionName = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_ConditionName, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_EnabledState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_EnabledState = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_EnabledState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_EnabledState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_EnabledState_Id = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_EnabledState_Id, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_EventId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_EventId = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_EventId, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_EventType Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_EventType = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_EventType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_HighHighLimit Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_HighHighLimit = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_HighHighLimit, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_HighLimit Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_HighLimit = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_HighLimit, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_InputNode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_InputNode = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_InputNode, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_LastSeverity Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_LastSeverity = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_LastSeverity, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState_Id = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState_Id, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_LowLimit Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_LowLimit = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_LowLimit, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_LowLowLimit Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_LowLowLimit = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_LowLowLimit, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Message Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Message = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Message, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Quality Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Quality = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Quality, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Quality_SourceTimestamp Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Quality_SourceTimestamp = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Quality_SourceTimestamp, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_ReceiveTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_ReceiveTime = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_ReceiveTime, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Retain Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Retain = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Retain, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_SetpointNode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_SetpointNode = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_SetpointNode, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Severity Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Severity = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Severity, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_SourceName Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_SourceName = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_SourceName, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_SourceNode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_SourceNode = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_SourceNode, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_SuppressedOrShelved Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_SuppressedOrShelved = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_SuppressedOrShelved, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Time Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Time = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Time, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithComposedTargetValueType_TargetValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithComposedTargetValueType_TargetValue = new ExpandedNodeId(Variables.AnalogControlFunctionWithComposedTargetValueType_TargetValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType_TotalizedValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType_TotalizedValue = new ExpandedNodeId(Variables.AnalogControlFunctionWithTotalizerType_TotalizedValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType_CurrentValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType_CurrentValue = new ExpandedNodeId(Variables.AnalogControlFunctionType_CurrentValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType_TargetValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType_TargetValue = new ExpandedNodeId(Variables.AnalogControlFunctionType_TargetValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the DiscreteControlFunctionType_CurrentValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId DiscreteControlFunctionType_CurrentValue = new ExpandedNodeId(Variables.DiscreteControlFunctionType_CurrentValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MultiStateDiscreteControlFunctionType_CurrentValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId MultiStateDiscreteControlFunctionType_CurrentValue = new ExpandedNodeId(Variables.MultiStateDiscreteControlFunctionType_CurrentValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MultiStateDiscreteControlFunctionType_TargetValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId MultiStateDiscreteControlFunctionType_TargetValue = new ExpandedNodeId(Variables.MultiStateDiscreteControlFunctionType_TargetValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the DiscreteControlFunctionType_TargetValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId DiscreteControlFunctionType_TargetValue = new ExpandedNodeId(Variables.DiscreteControlFunctionType_TargetValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TwoStateDiscreteControlFunctionType_CurrentValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId TwoStateDiscreteControlFunctionType_CurrentValue = new ExpandedNodeId(Variables.TwoStateDiscreteControlFunctionType_CurrentValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TwoStateDiscreteControlFunctionType_CurrentValue_FalseState Variable.
        /// </summary>
        public static readonly ExpandedNodeId TwoStateDiscreteControlFunctionType_CurrentValue_FalseState = new ExpandedNodeId(Variables.TwoStateDiscreteControlFunctionType_CurrentValue_FalseState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TwoStateDiscreteControlFunctionType_CurrentValue_TrueState Variable.
        /// </summary>
        public static readonly ExpandedNodeId TwoStateDiscreteControlFunctionType_CurrentValue_TrueState = new ExpandedNodeId(Variables.TwoStateDiscreteControlFunctionType_CurrentValue_TrueState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TwoStateDiscreteControlFunctionType_TargetValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId TwoStateDiscreteControlFunctionType_TargetValue = new ExpandedNodeId(Variables.TwoStateDiscreteControlFunctionType_TargetValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TwoStateDiscreteControlFunctionType_TargetValue_FalseState Variable.
        /// </summary>
        public static readonly ExpandedNodeId TwoStateDiscreteControlFunctionType_TargetValue_FalseState = new ExpandedNodeId(Variables.TwoStateDiscreteControlFunctionType_TargetValue_FalseState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TwoStateDiscreteControlFunctionType_TargetValue_TrueState Variable.
        /// </summary>
        public static readonly ExpandedNodeId TwoStateDiscreteControlFunctionType_TargetValue_TrueState = new ExpandedNodeId(Variables.TwoStateDiscreteControlFunctionType_TargetValue_TrueState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MultiModeAnalogControlFunctionType_CurrentMode Variable.
        /// </summary>
        public static readonly ExpandedNodeId MultiModeAnalogControlFunctionType_CurrentMode = new ExpandedNodeId(Variables.MultiModeAnalogControlFunctionType_CurrentMode, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_StateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_StateMachine_CurrentState = new ExpandedNodeId(Variables.BaseControlFunctionType_StateMachine_CurrentState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_StateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_StateMachine_CurrentState_Id = new ExpandedNodeId(Variables.BaseControlFunctionType_StateMachine_CurrentState_Id, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_CurrentValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_CurrentValue = new ExpandedNodeId(Variables.RatebasedAccumulatingControlFunctionType_CurrentValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_CurrentValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_CurrentValue_EngineeringUnits = new ExpandedNodeId(Variables.RatebasedAccumulatingControlFunctionType_CurrentValue_EngineeringUnits, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_CurrentValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_CurrentValue_EURange = new ExpandedNodeId(Variables.RatebasedAccumulatingControlFunctionType_CurrentValue_EURange, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_DecreaseRate Variable.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_DecreaseRate = new ExpandedNodeId(Variables.RatebasedAccumulatingControlFunctionType_DecreaseRate, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_DecreaseRate_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_DecreaseRate_EngineeringUnits = new ExpandedNodeId(Variables.RatebasedAccumulatingControlFunctionType_DecreaseRate_EngineeringUnits, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_DecreaseRate_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_DecreaseRate_EURange = new ExpandedNodeId(Variables.RatebasedAccumulatingControlFunctionType_DecreaseRate_EURange, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_DeltaValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_DeltaValue = new ExpandedNodeId(Variables.RatebasedAccumulatingControlFunctionType_DeltaValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_DeltaValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_DeltaValue_EngineeringUnits = new ExpandedNodeId(Variables.RatebasedAccumulatingControlFunctionType_DeltaValue_EngineeringUnits, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_DeltaValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_DeltaValue_EURange = new ExpandedNodeId(Variables.RatebasedAccumulatingControlFunctionType_DeltaValue_EURange, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_IncreaseRate Variable.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_IncreaseRate = new ExpandedNodeId(Variables.RatebasedAccumulatingControlFunctionType_IncreaseRate, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_IncreaseRate_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_IncreaseRate_EngineeringUnits = new ExpandedNodeId(Variables.RatebasedAccumulatingControlFunctionType_IncreaseRate_EngineeringUnits, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_IncreaseRate_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_IncreaseRate_EURange = new ExpandedNodeId(Variables.RatebasedAccumulatingControlFunctionType_IncreaseRate_EURange, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_TargetValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_TargetValue = new ExpandedNodeId(Variables.RatebasedAccumulatingControlFunctionType_TargetValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_TargetValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_TargetValue_EngineeringUnits = new ExpandedNodeId(Variables.RatebasedAccumulatingControlFunctionType_TargetValue_EngineeringUnits, Namespaces.Lads);

        /// <summary>
        /// The identifier for the RatebasedAccumulatingControlFunctionType_TargetValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId RatebasedAccumulatingControlFunctionType_TargetValue_EURange = new ExpandedNodeId(Variables.RatebasedAccumulatingControlFunctionType_TargetValue_EURange, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TimerFunctionType_CurrentValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId TimerFunctionType_CurrentValue = new ExpandedNodeId(Variables.TimerFunctionType_CurrentValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TimerFunctionType_DifferenceValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId TimerFunctionType_DifferenceValue = new ExpandedNodeId(Variables.TimerFunctionType_DifferenceValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TimerFunctionType_TargetValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId TimerFunctionType_TargetValue = new ExpandedNodeId(Variables.TimerFunctionType_TargetValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_AckedState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_AckedState = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_AckedState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_AckedState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_AckedState_Id = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_AckedState_Id, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Acknowledge_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Acknowledge_InputArguments = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Acknowledge_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_ActiveState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_ActiveState = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_ActiveState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_ActiveState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_ActiveState_Id = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_ActiveState_Id, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_AddComment_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_AddComment_InputArguments = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_AddComment_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_BranchId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_BranchId = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_BranchId, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_ClientUserId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_ClientUserId = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_ClientUserId, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Comment Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Comment = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Comment, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Comment_SourceTimestamp Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Comment_SourceTimestamp = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Comment_SourceTimestamp, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_ConditionClassId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_ConditionClassId = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_ConditionClassId, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_ConditionClassName Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_ConditionClassName = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_ConditionClassName, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_ConditionName Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_ConditionName = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_ConditionName, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_EnabledState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_EnabledState = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_EnabledState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_EnabledState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_EnabledState_Id = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_EnabledState_Id, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_EventId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_EventId = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_EventId, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_EventType Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_EventType = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_EventType, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_InputNode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_InputNode = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_InputNode, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_LastSeverity Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_LastSeverity = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_LastSeverity, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState_Id = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState_Id, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Message Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Message = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Message, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Quality Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Quality = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Quality, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Quality_SourceTimestamp Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Quality_SourceTimestamp = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Quality_SourceTimestamp, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_ReceiveTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_ReceiveTime = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_ReceiveTime, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Retain Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Retain = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Retain, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Severity Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Severity = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Severity, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_SourceName Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_SourceName = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_SourceName, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_SourceNode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_SourceNode = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_SourceNode, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_SuppressedOrShelved Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_SuppressedOrShelved = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_SuppressedOrShelved, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Time Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Time = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Time, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogSensorArrayFunctionType_RawValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorArrayFunctionType_RawValue = new ExpandedNodeId(Variables.AnalogSensorArrayFunctionType_RawValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogSensorArrayFunctionType_SensorValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorArrayFunctionType_SensorValue = new ExpandedNodeId(Variables.AnalogSensorArrayFunctionType_SensorValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType_CompensationValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionWithCompensationType_CompensationValue = new ExpandedNodeId(Variables.AnalogSensorFunctionWithCompensationType_CompensationValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType_RawValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionType_RawValue = new ExpandedNodeId(Variables.AnalogSensorFunctionType_RawValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType_SensorValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionType_SensorValue = new ExpandedNodeId(Variables.AnalogSensorFunctionType_SensorValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_CalibrationValues Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_CalibrationValues = new ExpandedNodeId(Variables.BaseSensorFunctionType_CalibrationValues, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_Configuration_IsEnabled Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_Configuration_IsEnabled = new ExpandedNodeId(Variables.BaseSensorFunctionType_Configuration_IsEnabled, Namespaces.Lads);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_Damping Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_Damping = new ExpandedNodeId(Variables.BaseSensorFunctionType_Damping, Namespaces.Lads);

        /// <summary>
        /// The identifier for the MutliStateDiscreteSensorFunctionType_SensorValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId MutliStateDiscreteSensorFunctionType_SensorValue = new ExpandedNodeId(Variables.MutliStateDiscreteSensorFunctionType_SensorValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the DiscreteSensorFunctionType_SensorValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId DiscreteSensorFunctionType_SensorValue = new ExpandedNodeId(Variables.DiscreteSensorFunctionType_SensorValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TwoStateDiscreteSensorFunctionType_SensorValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId TwoStateDiscreteSensorFunctionType_SensorValue = new ExpandedNodeId(Variables.TwoStateDiscreteSensorFunctionType_SensorValue, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TwoStateDiscreteSensorFunctionType_SensorValue_FalseState Variable.
        /// </summary>
        public static readonly ExpandedNodeId TwoStateDiscreteSensorFunctionType_SensorValue_FalseState = new ExpandedNodeId(Variables.TwoStateDiscreteSensorFunctionType_SensorValue_FalseState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the TwoStateDiscreteSensorFunctionType_SensorValue_TrueState Variable.
        /// </summary>
        public static readonly ExpandedNodeId TwoStateDiscreteSensorFunctionType_SensorValue_TrueState = new ExpandedNodeId(Variables.TwoStateDiscreteSensorFunctionType_SensorValue_TrueState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_CurrentState = new ExpandedNodeId(Variables.CoverFunctionType_StateMachine_CurrentState, Namespaces.Lads);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_CurrentState_Id = new ExpandedNodeId(Variables.CoverFunctionType_StateMachine_CurrentState_Id, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionType_FunctionSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionType_FunctionSet_NodeVersion = new ExpandedNodeId(Variables.FunctionType_FunctionSet_NodeVersion, Namespaces.Lads);

        /// <summary>
        /// The identifier for the FunctionType_IsEnabled Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionType_IsEnabled = new ExpandedNodeId(Variables.FunctionType_IsEnabled, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_Download_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_Download_InputArguments = new ExpandedNodeId(Variables.ProgramManagerType_ProgramTemplateSet_Download_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_Download_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_Download_OutputArguments = new ExpandedNodeId(Variables.ProgramManagerType_ProgramTemplateSet_Download_OutputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_NodeVersion = new ExpandedNodeId(Variables.ProgramManagerType_ProgramTemplateSet_NodeVersion, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_Remove_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_Remove_InputArguments = new ExpandedNodeId(Variables.ProgramManagerType_ProgramTemplateSet_Remove_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_Upload_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_Upload_InputArguments = new ExpandedNodeId(Variables.ProgramManagerType_ProgramTemplateSet_Upload_InputArguments, Namespaces.Lads);

        /// <summary>
        /// The identifier for the ProgramManagerType_ResultSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ResultSet_NodeVersion = new ExpandedNodeId(Variables.ProgramManagerType_ResultSet_NodeVersion, Namespaces.Lads);

        /// <summary>
        /// The identifier for the _http___opcfoundation_org_UA_lads__IsNamespaceSubset Variable.
        /// </summary>
        public static readonly ExpandedNodeId _http___opcfoundation_org_UA_lads__IsNamespaceSubset = new ExpandedNodeId(Variables._http___opcfoundation_org_UA_lads__IsNamespaceSubset, Namespaces.Lads);

        /// <summary>
        /// The identifier for the _http___opcfoundation_org_UA_lads__NamespacePublicationDate Variable.
        /// </summary>
        public static readonly ExpandedNodeId _http___opcfoundation_org_UA_lads__NamespacePublicationDate = new ExpandedNodeId(Variables._http___opcfoundation_org_UA_lads__NamespacePublicationDate, Namespaces.Lads);

        /// <summary>
        /// The identifier for the _http___opcfoundation_org_UA_lads__NamespaceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId _http___opcfoundation_org_UA_lads__NamespaceUri = new ExpandedNodeId(Variables._http___opcfoundation_org_UA_lads__NamespaceUri, Namespaces.Lads);

        /// <summary>
        /// The identifier for the _http___opcfoundation_org_UA_lads__NamespaceVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId _http___opcfoundation_org_UA_lads__NamespaceVersion = new ExpandedNodeId(Variables._http___opcfoundation_org_UA_lads__NamespaceVersion, Namespaces.Lads);

        /// <summary>
        /// The identifier for the _http___opcfoundation_org_UA_lads__StaticNodeIdTypes Variable.
        /// </summary>
        public static readonly ExpandedNodeId _http___opcfoundation_org_UA_lads__StaticNodeIdTypes = new ExpandedNodeId(Variables._http___opcfoundation_org_UA_lads__StaticNodeIdTypes, Namespaces.Lads);

        /// <summary>
        /// The identifier for the _http___opcfoundation_org_UA_lads__StaticNumericNodeIdRange Variable.
        /// </summary>
        public static readonly ExpandedNodeId _http___opcfoundation_org_UA_lads__StaticNumericNodeIdRange = new ExpandedNodeId(Variables._http___opcfoundation_org_UA_lads__StaticNumericNodeIdRange, Namespaces.Lads);

        /// <summary>
        /// The identifier for the _http___opcfoundation_org_UA_lads__StaticStringNodeIdPattern Variable.
        /// </summary>
        public static readonly ExpandedNodeId _http___opcfoundation_org_UA_lads__StaticStringNodeIdPattern = new ExpandedNodeId(Variables._http___opcfoundation_org_UA_lads__StaticStringNodeIdPattern, Namespaces.Lads);

    }
    #endregion

    #region VariableType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all VariableType in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.8")]
    public static partial class VariableTypeIds
    {
    }
    #endregion

    #region BrowseName Declarations
    /// <summary>
    /// Declares all of the BrowseNames used in the Model.
    /// </summary>
    public static partial class BrowseNames
    {
        /// <summary>
        /// The BrowseName for the 0 component.
        /// </summary>
        public const string S0 = "0";
        /// <summary>
        /// The BrowseName for the &lt;Component&gt; component.
        /// </summary>
        public const string S_Component_ = "<Component>";
        /// <summary>
        /// The BrowseName for the &lt;Data&gt; component.
        /// </summary>
        public const string S_Data_ = "<Data>";
        /// <summary>
        /// The BrowseName for the &lt;Link&gt; component.
        /// </summary>
        public const string Link = "<Link>";
        /// <summary>
        /// The BrowseName for the &lt;MaintenanceTask&gt; component.
        /// </summary>
        public const string S_MaintenanceTask_ = "<MaintenanceTask>";
        /// <summary>
        /// The BrowseName for the &lt;SetElement&gt; component.
        /// </summary>
        public const string SetElement = "<SetElement>";
        /// <summary>
        /// The BrowseName for the &lt;VariableSetElement&gt; component.
        /// </summary>
        public const string S_VariableSetElement_ = "<VariableSetElement>";
        /// <summary>
        /// The BrowseName for the Abort component.
        /// </summary>
        public const string Abort = "Abort";
        /// <summary>
        /// The BrowseName for the Aborted component.
        /// </summary>
        public const string Aborted = "Aborted";
        /// <summary>
        /// The BrowseName for the AbortedToClearing component.
        /// </summary>
        public const string AbortedToClearing = "AbortedToClearing";
        /// <summary>
        /// The BrowseName for the Aborting component.
        /// </summary>
        public const string Aborting = "Aborting";
        /// <summary>
        /// The BrowseName for the AbortingToAborted component.
        /// </summary>
        public const string AbortingToAborted = "AbortingToAborted";
        /// <summary>
        /// The BrowseName for the ActiveProgram component.
        /// </summary>
        public const string ActiveProgram = "ActiveProgram";
        /// <summary>
        /// The BrowseName for the ActiveProgramStateMachineType component.
        /// </summary>
        public const string ActiveProgramStateMachineType = "ActiveProgramStateMachineType";
        /// <summary>
        /// The BrowseName for the ActiveProgramType component.
        /// </summary>
        public const string ActiveProgramType = "ActiveProgramType";
        /// <summary>
        /// The BrowseName for the AddLink component.
        /// </summary>
        public const string AddLink = "AddLink";
        /// <summary>
        /// The BrowseName for the AlarmMonitor component.
        /// </summary>
        public const string AlarmMonitor = "AlarmMonitor";
        /// <summary>
        /// The BrowseName for the AnalogControlFunctionType component.
        /// </summary>
        public const string AnalogControlFunctionType = "AnalogControlFunctionType";
        /// <summary>
        /// The BrowseName for the AnalogControlFunctionWithComposedTargetValueType component.
        /// </summary>
        public const string AnalogControlFunctionWithComposedTargetValueType = "AnalogControlFunctionWithComposedTargetValueType";
        /// <summary>
        /// The BrowseName for the AnalogControlFunctionWithTotalizerType component.
        /// </summary>
        public const string AnalogControlFunctionWithTotalizerType = "AnalogControlFunctionWithTotalizerType";
        /// <summary>
        /// The BrowseName for the AnalogSensorArrayFunctionType component.
        /// </summary>
        public const string AnalogSensorArrayFunctionType = "AnalogSensorArrayFunctionType";
        /// <summary>
        /// The BrowseName for the AnalogSensorFunctionType component.
        /// </summary>
        public const string AnalogSensorFunctionType = "AnalogSensorFunctionType";
        /// <summary>
        /// The BrowseName for the AnalogSensorFunctionWithCompensationType component.
        /// </summary>
        public const string AnalogSensorFunctionWithCompensationType = "AnalogSensorFunctionWithCompensationType";
        /// <summary>
        /// The BrowseName for the Assets component.
        /// </summary>
        public const string Assets = "Assets";
        /// <summary>
        /// The BrowseName for the AssetsByAssetId component.
        /// </summary>
        public const string AssetsByAssetId = "AssetsByAssetId";
        /// <summary>
        /// The BrowseName for the AssetsByProductInstanceUri component.
        /// </summary>
        public const string AssetsByProductInstanceUri = "AssetsByProductInstanceUri";
        /// <summary>
        /// The BrowseName for the Author component.
        /// </summary>
        public const string Author = "Author";
        /// <summary>
        /// The BrowseName for the BadConfigurationConditionClassType component.
        /// </summary>
        public const string BadConfigurationConditionClassType = "BadConfigurationConditionClassType";
        /// <summary>
        /// The BrowseName for the BaseControlFunctionType component.
        /// </summary>
        public const string BaseControlFunctionType = "BaseControlFunctionType";
        /// <summary>
        /// The BrowseName for the BaseSensorFunctionType component.
        /// </summary>
        public const string BaseSensorFunctionType = "BaseSensorFunctionType";
        /// <summary>
        /// The BrowseName for the Calibration component.
        /// </summary>
        public const string Calibration = "Calibration";
        /// <summary>
        /// The BrowseName for the CalibrationDueConditionClassType component.
        /// </summary>
        public const string CalibrationDueConditionClassType = "CalibrationDueConditionClassType";
        /// <summary>
        /// The BrowseName for the CalibrationValues component.
        /// </summary>
        public const string CalibrationValues = "CalibrationValues";
        /// <summary>
        /// The BrowseName for the Clear component.
        /// </summary>
        public const string Clear = "Clear";
        /// <summary>
        /// The BrowseName for the Clearing component.
        /// </summary>
        public const string Clearing = "Clearing";
        /// <summary>
        /// The BrowseName for the ClearingToStopped component.
        /// </summary>
        public const string ClearingToStopped = "ClearingToStopped";
        /// <summary>
        /// The BrowseName for the Client component.
        /// </summary>
        public const string Client = "Client";
        /// <summary>
        /// The BrowseName for the Close component.
        /// </summary>
        public const string Close = "Close";
        /// <summary>
        /// The BrowseName for the Closed component.
        /// </summary>
        public const string Closed = "Closed";
        /// <summary>
        /// The BrowseName for the ClosedToError component.
        /// </summary>
        public const string ClosedToError = "ClosedToError";
        /// <summary>
        /// The BrowseName for the ClosedToLocked component.
        /// </summary>
        public const string ClosedToLocked = "ClosedToLocked";
        /// <summary>
        /// The BrowseName for the ClosedToOpened component.
        /// </summary>
        public const string ClosedToOpened = "ClosedToOpened";
        /// <summary>
        /// The BrowseName for the CompensationValue component.
        /// </summary>
        public const string CompensationValue = "CompensationValue";
        /// <summary>
        /// The BrowseName for the Complete component.
        /// </summary>
        public const string Complete = "Complete";
        /// <summary>
        /// The BrowseName for the CompleteToResetting component.
        /// </summary>
        public const string CompleteToResetting = "CompleteToResetting";
        /// <summary>
        /// The BrowseName for the Completing component.
        /// </summary>
        public const string Completing = "Completing";
        /// <summary>
        /// The BrowseName for the CompletingToComplete component.
        /// </summary>
        public const string CompletingToComplete = "CompletingToComplete";
        /// <summary>
        /// The BrowseName for the ComponentSetType component.
        /// </summary>
        public const string ComponentSetType = "ComponentSetType";
        /// <summary>
        /// The BrowseName for the Components component.
        /// </summary>
        public const string Components = "Components";
        /// <summary>
        /// The BrowseName for the Configuration component.
        /// </summary>
        public const string Configuration = "Configuration";
        /// <summary>
        /// The BrowseName for the ConfigurationChanged component.
        /// </summary>
        public const string ConfigurationChanged = "ConfigurationChanged";
        /// <summary>
        /// The BrowseName for the ConnectionFailureConditionClassType component.
        /// </summary>
        public const string ConnectionFailureConditionClassType = "ConnectionFailureConditionClassType";
        /// <summary>
        /// The BrowseName for the Contains component.
        /// </summary>
        public const string Contains = "Contains";
        /// <summary>
        /// The BrowseName for the ContollerTuningParameter component.
        /// </summary>
        public const string ContollerTuningParameter = "ContollerTuningParameter";
        /// <summary>
        /// The BrowseName for the ControlFunctionStateMachineType component.
        /// </summary>
        public const string ControlFunctionStateMachineType = "ControlFunctionStateMachineType";
        /// <summary>
        /// The BrowseName for the ControllerModeSet component.
        /// </summary>
        public const string ControllerModeSet = "ControllerModeSet";
        /// <summary>
        /// The BrowseName for the ControllerParameterSet component.
        /// </summary>
        public const string ControllerParameterSet = "ControllerParameterSet";
        /// <summary>
        /// The BrowseName for the ControllerParameterSetType component.
        /// </summary>
        public const string ControllerParameterSetType = "ControllerParameterSetType";
        /// <summary>
        /// The BrowseName for the ControllerParameterType component.
        /// </summary>
        public const string ControllerParameterType = "ControllerParameterType";
        /// <summary>
        /// The BrowseName for the ControllerTuningParameterType component.
        /// </summary>
        public const string ControllerTuningParameterType = "ControllerTuningParameterType";
        /// <summary>
        /// The BrowseName for the CoverFunctionType component.
        /// </summary>
        public const string CoverFunctionType = "CoverFunctionType";
        /// <summary>
        /// The BrowseName for the CoverStateMachineType component.
        /// </summary>
        public const string CoverStateMachineType = "CoverStateMachineType";
        /// <summary>
        /// The BrowseName for the Created component.
        /// </summary>
        public const string Created = "Created";
        /// <summary>
        /// The BrowseName for the CtrlP component.
        /// </summary>
        public const string CtrlP = "CtrlP";
        /// <summary>
        /// The BrowseName for the CtrlTd component.
        /// </summary>
        public const string CtrlTd = "CtrlTd";
        /// <summary>
        /// The BrowseName for the CtrlTi component.
        /// </summary>
        public const string CtrlTi = "CtrlTi";
        /// <summary>
        /// The BrowseName for the CurrentMode component.
        /// </summary>
        public const string CurrentMode = "CurrentMode";
        /// <summary>
        /// The BrowseName for the CurrentPauseTime component.
        /// </summary>
        public const string CurrentPauseTime = "CurrentPauseTime";
        /// <summary>
        /// The BrowseName for the CurrentRuntime component.
        /// </summary>
        public const string CurrentRuntime = "CurrentRuntime";
        /// <summary>
        /// The BrowseName for the CurrentStepName component.
        /// </summary>
        public const string CurrentStepName = "CurrentStepName";
        /// <summary>
        /// The BrowseName for the CurrentStepNumber component.
        /// </summary>
        public const string CurrentStepNumber = "CurrentStepNumber";
        /// <summary>
        /// The BrowseName for the CurrentStepRuntime component.
        /// </summary>
        public const string CurrentStepRuntime = "CurrentStepRuntime";
        /// <summary>
        /// The BrowseName for the CurrentValue component.
        /// </summary>
        public const string CurrentValue = "CurrentValue";
        /// <summary>
        /// The BrowseName for the Damping component.
        /// </summary>
        public const string Damping = "Damping";
        /// <summary>
        /// The BrowseName for the DecreaseRate component.
        /// </summary>
        public const string DecreaseRate = "DecreaseRate";
        /// <summary>
        /// The BrowseName for the DeltaValue component.
        /// </summary>
        public const string DeltaValue = "DeltaValue";
        /// <summary>
        /// The BrowseName for the Description component.
        /// </summary>
        public const string Description = "Description";
        /// <summary>
        /// The BrowseName for the DeviceProgramRunID component.
        /// </summary>
        public const string DeviceProgramRunID = "DeviceProgramRunID";
        /// <summary>
        /// The BrowseName for the DeviceProgramRunId component.
        /// </summary>
        public const string DeviceProgramRunId = "DeviceProgramRunId";
        /// <summary>
        /// The BrowseName for the DifferenceValue component.
        /// </summary>
        public const string DifferenceValue = "DifferenceValue";
        /// <summary>
        /// The BrowseName for the DiscreteControlFunctionType component.
        /// </summary>
        public const string DiscreteControlFunctionType = "DiscreteControlFunctionType";
        /// <summary>
        /// The BrowseName for the DiscreteSensorFunctionType component.
        /// </summary>
        public const string DiscreteSensorFunctionType = "DiscreteSensorFunctionType";
        /// <summary>
        /// The BrowseName for the DocumentationLinksType component.
        /// </summary>
        public const string DocumentationLinksType = "DocumentationLinksType";
        /// <summary>
        /// The BrowseName for the Download component.
        /// </summary>
        public const string Download = "Download";
        /// <summary>
        /// The BrowseName for the Error component.
        /// </summary>
        public const string Error = "Error";
        /// <summary>
        /// The BrowseName for the ErrorToOpened component.
        /// </summary>
        public const string ErrorToOpened = "ErrorToOpened";
        /// <summary>
        /// The BrowseName for the EstimateRuntime component.
        /// </summary>
        public const string EstimateRuntime = "EstimateRuntime";
        /// <summary>
        /// The BrowseName for the EstimatedDowntime component.
        /// </summary>
        public const string EstimatedDowntime = "EstimatedDowntime";
        /// <summary>
        /// The BrowseName for the EstimatedRunTime component.
        /// </summary>
        public const string EstimatedRunTime = "EstimatedRunTime";
        /// <summary>
        /// The BrowseName for the EstimatedStepNumbers component.
        /// </summary>
        public const string EstimatedStepNumbers = "EstimatedStepNumbers";
        /// <summary>
        /// The BrowseName for the EstimatedStepRuntime component.
        /// </summary>
        public const string EstimatedStepRuntime = "EstimatedStepRuntime";
        /// <summary>
        /// The BrowseName for the Execute component.
        /// </summary>
        public const string Execute = "Execute";
        /// <summary>
        /// The BrowseName for the ExecuteToCompleting component.
        /// </summary>
        public const string ExecuteToCompleting = "ExecuteToCompleting";
        /// <summary>
        /// The BrowseName for the ExecuteToHolding component.
        /// </summary>
        public const string ExecuteToHolding = "ExecuteToHolding";
        /// <summary>
        /// The BrowseName for the ExecuteToSuspending component.
        /// </summary>
        public const string ExecuteToSuspending = "ExecuteToSuspending";
        /// <summary>
        /// The BrowseName for the Executing component.
        /// </summary>
        public const string Executing = "Executing";
        /// <summary>
        /// The BrowseName for the ExternalCheckConditionClassType component.
        /// </summary>
        public const string ExternalCheckConditionClassType = "ExternalCheckConditionClassType";
        /// <summary>
        /// The BrowseName for the File component.
        /// </summary>
        public const string File = "File";
        /// <summary>
        /// The BrowseName for the FileSet component.
        /// </summary>
        public const string FileSet = "FileSet";
        /// <summary>
        /// The BrowseName for the Finished component.
        /// </summary>
        public const string Finished = "Finished";
        /// <summary>
        /// The BrowseName for the FlashUpdateFailedConditionClassType component.
        /// </summary>
        public const string FlashUpdateFailedConditionClassType = "FlashUpdateFailedConditionClassType";
        /// <summary>
        /// The BrowseName for the FlashUpdateInProgressConditionClassType component.
        /// </summary>
        public const string FlashUpdateInProgressConditionClassType = "FlashUpdateInProgressConditionClassType";
        /// <summary>
        /// The BrowseName for the FromExecutingToExecuting component.
        /// </summary>
        public const string FromExecutingToExecuting = "FromExecutingToExecuting";
        /// <summary>
        /// The BrowseName for the FromExecutingToFinished component.
        /// </summary>
        public const string FromExecutingToFinished = "FromExecutingToFinished";
        /// <summary>
        /// The BrowseName for the FromExecutingToNotAvailable component.
        /// </summary>
        public const string FromExecutingToNotAvailable = "FromExecutingToNotAvailable";
        /// <summary>
        /// The BrowseName for the FromExecutingToNotExecuting component.
        /// </summary>
        public const string FromExecutingToNotExecuting = "FromExecutingToNotExecuting";
        /// <summary>
        /// The BrowseName for the FromExecutingToOutOfService component.
        /// </summary>
        public const string FromExecutingToOutOfService = "FromExecutingToOutOfService";
        /// <summary>
        /// The BrowseName for the FromFinishedToPlanned component.
        /// </summary>
        public const string FromFinishedToPlanned = "FromFinishedToPlanned";
        /// <summary>
        /// The BrowseName for the FromMaintenanceToMaintenance component.
        /// </summary>
        public const string FromMaintenanceToMaintenance = "FromMaintenanceToMaintenance";
        /// <summary>
        /// The BrowseName for the FromMaintenanceToNone component.
        /// </summary>
        public const string FromMaintenanceToNone = "FromMaintenanceToNone";
        /// <summary>
        /// The BrowseName for the FromMaintenanceToProcessing component.
        /// </summary>
        public const string FromMaintenanceToProcessing = "FromMaintenanceToProcessing";
        /// <summary>
        /// The BrowseName for the FromMaintenanceToSetup component.
        /// </summary>
        public const string FromMaintenanceToSetup = "FromMaintenanceToSetup";
        /// <summary>
        /// The BrowseName for the FromNoneToMaintenance component.
        /// </summary>
        public const string FromNoneToMaintenance = "FromNoneToMaintenance";
        /// <summary>
        /// The BrowseName for the FromNoneToNone component.
        /// </summary>
        public const string FromNoneToNone = "FromNoneToNone";
        /// <summary>
        /// The BrowseName for the FromNoneToProcessing component.
        /// </summary>
        public const string FromNoneToProcessing = "FromNoneToProcessing";
        /// <summary>
        /// The BrowseName for the FromNoneToSetup component.
        /// </summary>
        public const string FromNoneToSetup = "FromNoneToSetup";
        /// <summary>
        /// The BrowseName for the FromNotAvailableToExecuting component.
        /// </summary>
        public const string FromNotAvailableToExecuting = "FromNotAvailableToExecuting";
        /// <summary>
        /// The BrowseName for the FromNotAvailableToNotAvailable component.
        /// </summary>
        public const string FromNotAvailableToNotAvailable = "FromNotAvailableToNotAvailable";
        /// <summary>
        /// The BrowseName for the FromNotAvailableToNotExecuting component.
        /// </summary>
        public const string FromNotAvailableToNotExecuting = "FromNotAvailableToNotExecuting";
        /// <summary>
        /// The BrowseName for the FromNotAvailableToOutOfService component.
        /// </summary>
        public const string FromNotAvailableToOutOfService = "FromNotAvailableToOutOfService";
        /// <summary>
        /// The BrowseName for the FromNotExecutingToExecuting component.
        /// </summary>
        public const string FromNotExecutingToExecuting = "FromNotExecutingToExecuting";
        /// <summary>
        /// The BrowseName for the FromNotExecutingToNotAvailable component.
        /// </summary>
        public const string FromNotExecutingToNotAvailable = "FromNotExecutingToNotAvailable";
        /// <summary>
        /// The BrowseName for the FromNotExecutingToNotExecuting component.
        /// </summary>
        public const string FromNotExecutingToNotExecuting = "FromNotExecutingToNotExecuting";
        /// <summary>
        /// The BrowseName for the FromNotExecutingToOutOfService component.
        /// </summary>
        public const string FromNotExecutingToOutOfService = "FromNotExecutingToOutOfService";
        /// <summary>
        /// The BrowseName for the FromOutOfServiceToExecuting component.
        /// </summary>
        public const string FromOutOfServiceToExecuting = "FromOutOfServiceToExecuting";
        /// <summary>
        /// The BrowseName for the FromOutOfServiceToNotAvailable component.
        /// </summary>
        public const string FromOutOfServiceToNotAvailable = "FromOutOfServiceToNotAvailable";
        /// <summary>
        /// The BrowseName for the FromOutOfServiceToNotExecuting component.
        /// </summary>
        public const string FromOutOfServiceToNotExecuting = "FromOutOfServiceToNotExecuting";
        /// <summary>
        /// The BrowseName for the FromOutOfServiceToOutOfService component.
        /// </summary>
        public const string FromOutOfServiceToOutOfService = "FromOutOfServiceToOutOfService";
        /// <summary>
        /// The BrowseName for the FromPlannedToExecuting component.
        /// </summary>
        public const string FromPlannedToExecuting = "FromPlannedToExecuting";
        /// <summary>
        /// The BrowseName for the FromProcessingToMaintenance component.
        /// </summary>
        public const string FromProcessingToMaintenance = "FromProcessingToMaintenance";
        /// <summary>
        /// The BrowseName for the FromProcessingToNone component.
        /// </summary>
        public const string FromProcessingToNone = "FromProcessingToNone";
        /// <summary>
        /// The BrowseName for the FromProcessingToProcessing component.
        /// </summary>
        public const string FromProcessingToProcessing = "FromProcessingToProcessing";
        /// <summary>
        /// The BrowseName for the FromProcessingToSetup component.
        /// </summary>
        public const string FromProcessingToSetup = "FromProcessingToSetup";
        /// <summary>
        /// The BrowseName for the FromSetupToMaintenance component.
        /// </summary>
        public const string FromSetupToMaintenance = "FromSetupToMaintenance";
        /// <summary>
        /// The BrowseName for the FromSetupToNone component.
        /// </summary>
        public const string FromSetupToNone = "FromSetupToNone";
        /// <summary>
        /// The BrowseName for the FromSetupToProcessing component.
        /// </summary>
        public const string FromSetupToProcessing = "FromSetupToProcessing";
        /// <summary>
        /// The BrowseName for the FromSetupToSetup component.
        /// </summary>
        public const string FromSetupToSetup = "FromSetupToSetup";
        /// <summary>
        /// The BrowseName for the FunctionSet component.
        /// </summary>
        public const string FunctionSet = "FunctionSet";
        /// <summary>
        /// The BrowseName for the FunctionSetType component.
        /// </summary>
        public const string FunctionSetType = "FunctionSetType";
        /// <summary>
        /// The BrowseName for the FunctionType component.
        /// </summary>
        public const string FunctionType = "FunctionType";
        /// <summary>
        /// The BrowseName for the FunctionalStateMachineType component.
        /// </summary>
        public const string FunctionalStateMachineType = "FunctionalStateMachineType";
        /// <summary>
        /// The BrowseName for the FunctionalUnitSet component.
        /// </summary>
        public const string FunctionalUnitSet = "FunctionalUnitSet";
        /// <summary>
        /// The BrowseName for the FunctionalUnitSetType component.
        /// </summary>
        public const string FunctionalUnitSetType = "FunctionalUnitSetType";
        /// <summary>
        /// The BrowseName for the FunctionalUnitStateMachineType component.
        /// </summary>
        public const string FunctionalUnitStateMachineType = "FunctionalUnitStateMachineType";
        /// <summary>
        /// The BrowseName for the FunctionalUnitType component.
        /// </summary>
        public const string FunctionalUnitType = "FunctionalUnitType";
        /// <summary>
        /// The BrowseName for the GotoMaintenance component.
        /// </summary>
        public const string GotoMaintenance = "GotoMaintenance";
        /// <summary>
        /// The BrowseName for the GotoOperating component.
        /// </summary>
        public const string GotoOperating = "GotoOperating";
        /// <summary>
        /// The BrowseName for the GotoShutdown component.
        /// </summary>
        public const string GotoShutdown = "GotoShutdown";
        /// <summary>
        /// The BrowseName for the GotoStandby component.
        /// </summary>
        public const string GotoStandby = "GotoStandby";
        /// <summary>
        /// The BrowseName for the Held component.
        /// </summary>
        public const string Held = "Held";
        /// <summary>
        /// The BrowseName for the HeldToUnholding component.
        /// </summary>
        public const string HeldToUnholding = "HeldToUnholding";
        /// <summary>
        /// The BrowseName for the HierarchicalContains component.
        /// </summary>
        public const string HierarchicalContains = "HierarchicalContains";
        /// <summary>
        /// The BrowseName for the HierarchicalLocation component.
        /// </summary>
        public const string HierarchicalLocation = "HierarchicalLocation";
        /// <summary>
        /// The BrowseName for the HierarchicalLocations component.
        /// </summary>
        public const string HierarchicalLocations = "HierarchicalLocations";
        /// <summary>
        /// The BrowseName for the Hold component.
        /// </summary>
        public const string Hold = "Hold";
        /// <summary>
        /// The BrowseName for the Holding component.
        /// </summary>
        public const string Holding = "Holding";
        /// <summary>
        /// The BrowseName for the HoldingToHeld component.
        /// </summary>
        public const string HoldingToHeld = "HoldingToHeld";
        /// <summary>
        /// The BrowseName for the IMachineTagNameplateType component.
        /// </summary>
        public const string IMachineTagNameplateType = "IMachineTagNameplateType";
        /// <summary>
        /// The BrowseName for the IMachineVendorNameplateType component.
        /// </summary>
        public const string IMachineVendorNameplateType = "IMachineVendorNameplateType";
        /// <summary>
        /// The BrowseName for the IMachineryItemVendorNameplateType component.
        /// </summary>
        public const string IMachineryItemVendorNameplateType = "IMachineryItemVendorNameplateType";
        /// <summary>
        /// The BrowseName for the IMaintenanceEventType component.
        /// </summary>
        public const string IMaintenanceEventType = "IMaintenanceEventType";
        /// <summary>
        /// The BrowseName for the IRootCauseIndicationType component.
        /// </summary>
        public const string IRootCauseIndicationType = "IRootCauseIndicationType";
        /// <summary>
        /// The BrowseName for the Idle component.
        /// </summary>
        public const string Idle = "Idle";
        /// <summary>
        /// The BrowseName for the IdleToStarting component.
        /// </summary>
        public const string IdleToStarting = "IdleToStarting";
        /// <summary>
        /// The BrowseName for the ImprovementConditionClassType component.
        /// </summary>
        public const string ImprovementConditionClassType = "ImprovementConditionClassType";
        /// <summary>
        /// The BrowseName for the IncreaseRate component.
        /// </summary>
        public const string IncreaseRate = "IncreaseRate";
        /// <summary>
        /// The BrowseName for the InitialOperationDate component.
        /// </summary>
        public const string InitialOperationDate = "InitialOperationDate";
        /// <summary>
        /// The BrowseName for the InspectionConditionClassType component.
        /// </summary>
        public const string InspectionConditionClassType = "InspectionConditionClassType";
        /// <summary>
        /// The BrowseName for the IsEnabled component.
        /// </summary>
        public const string IsEnabled = "IsEnabled";
        /// <summary>
        /// The BrowseName for the JobId component.
        /// </summary>
        public const string JobId = "JobId";
        /// <summary>
        /// The BrowseName for the KeyValueType component.
        /// </summary>
        public const string KeyValueType = "KeyValueType";
        /// <summary>
        /// The BrowseName for the LADSComponentType component.
        /// </summary>
        public const string LADSComponentType = "LADSComponentType";
        /// <summary>
        /// The BrowseName for the LADSDeviceStateMachineType component.
        /// </summary>
        public const string LADSDeviceStateMachineType = "LADSDeviceStateMachineType";
        /// <summary>
        /// The BrowseName for the LADSDeviceType component.
        /// </summary>
        public const string LADSDeviceType = "LADSDeviceType";
        /// <summary>
        /// The BrowseName for the LADSMaintenanceSetType component.
        /// </summary>
        public const string LADSMaintenanceSetType = "LADSMaintenanceSetType";
        /// <summary>
        /// The BrowseName for the LADSOperationCountersType component.
        /// </summary>
        public const string LADSOperationCountersType = "LADSOperationCountersType";
        /// <summary>
        /// The BrowseName for the LastExecutionDate component.
        /// </summary>
        public const string LastExecutionDate = "LastExecutionDate";
        /// <summary>
        /// The BrowseName for the LastOperatingCycles component.
        /// </summary>
        public const string LastOperatingCycles = "LastOperatingCycles";
        /// <summary>
        /// The BrowseName for the LastOperatingTime component.
        /// </summary>
        public const string LastOperatingTime = "LastOperatingTime";
        /// <summary>
        /// The BrowseName for the LifeTime component.
        /// </summary>
        public const string LifeTime = "LifeTime";
        /// <summary>
        /// The BrowseName for the Location component.
        /// </summary>
        public const string Location = "Location";
        /// <summary>
        /// The BrowseName for the Lock component.
        /// </summary>
        public const string Lock = "Lock";
        /// <summary>
        /// The BrowseName for the Locked component.
        /// </summary>
        public const string Locked = "Locked";
        /// <summary>
        /// The BrowseName for the LockedToClosed component.
        /// </summary>
        public const string LockedToClosed = "LockedToClosed";
        /// <summary>
        /// The BrowseName for the LockedToError component.
        /// </summary>
        public const string LockedToError = "LockedToError";
        /// <summary>
        /// The BrowseName for the MachineComponentsType component.
        /// </summary>
        public const string MachineComponentsType = "MachineComponentsType";
        /// <summary>
        /// The BrowseName for the MachineIdentificationType component.
        /// </summary>
        public const string MachineIdentificationType = "MachineIdentificationType";
        /// <summary>
        /// The BrowseName for the MachineryComponentIdentificationType component.
        /// </summary>
        public const string MachineryComponentIdentificationType = "MachineryComponentIdentificationType";
        /// <summary>
        /// The BrowseName for the MachineryItemIdentificationType component.
        /// </summary>
        public const string MachineryItemIdentificationType = "MachineryItemIdentificationType";
        /// <summary>
        /// The BrowseName for the MachineryItemState_StateMachineType component.
        /// </summary>
        public const string MachineryItemState_StateMachineType = "MachineryItemState_StateMachineType";
        /// <summary>
        /// The BrowseName for the MachineryOperationModeStateMachineType component.
        /// </summary>
        public const string MachineryOperationModeStateMachineType = "MachineryOperationModeStateMachineType";
        /// <summary>
        /// The BrowseName for the Machines component.
        /// </summary>
        public const string Machines = "Machines";
        /// <summary>
        /// The BrowseName for the Maintenance component.
        /// </summary>
        public const string Maintenance = "Maintenance";
        /// <summary>
        /// The BrowseName for the MaintenanceEventStateMachineType component.
        /// </summary>
        public const string MaintenanceEventStateMachineType = "MaintenanceEventStateMachineType";
        /// <summary>
        /// The BrowseName for the MaintenanceMethod component.
        /// </summary>
        public const string MaintenanceMethod = "MaintenanceMethod";
        /// <summary>
        /// The BrowseName for the MaintenanceMethodEnum component.
        /// </summary>
        public const string MaintenanceMethodEnum = "MaintenanceMethodEnum";
        /// <summary>
        /// The BrowseName for the MaintenanceState component.
        /// </summary>
        public const string MaintenanceState = "MaintenanceState";
        /// <summary>
        /// The BrowseName for the MaintenanceSupplier component.
        /// </summary>
        public const string MaintenanceSupplier = "MaintenanceSupplier";
        /// <summary>
        /// The BrowseName for the MaintenanceTaskStopResultEnum component.
        /// </summary>
        public const string MaintenanceTaskStopResultEnum = "MaintenanceTaskStopResultEnum";
        /// <summary>
        /// The BrowseName for the MaintenanceTaskType component.
        /// </summary>
        public const string MaintenanceTaskType = "MaintenanceTaskType";
        /// <summary>
        /// The BrowseName for the MaintenanceToOperating component.
        /// </summary>
        public const string MaintenanceToOperating = "MaintenanceToOperating";
        /// <summary>
        /// The BrowseName for the MaintenanceToShutdown component.
        /// </summary>
        public const string MaintenanceToShutdown = "MaintenanceToShutdown";
        /// <summary>
        /// The BrowseName for the MimeType component.
        /// </summary>
        public const string MimeType = "MimeType";
        /// <summary>
        /// The BrowseName for the Modified component.
        /// </summary>
        public const string Modified = "Modified";
        /// <summary>
        /// The BrowseName for the MonthOfConstruction component.
        /// </summary>
        public const string MonthOfConstruction = "MonthOfConstruction";
        /// <summary>
        /// The BrowseName for the MultiModeAnalogControlFunctionType component.
        /// </summary>
        public const string MultiModeAnalogControlFunctionType = "MultiModeAnalogControlFunctionType";
        /// <summary>
        /// The BrowseName for the MultiParameterAnalogControlFunctionType component.
        /// </summary>
        public const string MultiParameterAnalogControlFunctionType = "MultiParameterAnalogControlFunctionType";
        /// <summary>
        /// The BrowseName for the MultiStateDiscreteControlFunctionType component.
        /// </summary>
        public const string MultiStateDiscreteControlFunctionType = "MultiStateDiscreteControlFunctionType";
        /// <summary>
        /// The BrowseName for the MutliStateDiscreteSensorFunctionType component.
        /// </summary>
        public const string MutliStateDiscreteSensorFunctionType = "MutliStateDiscreteSensorFunctionType";
        /// <summary>
        /// The BrowseName for the Name component.
        /// </summary>
        public const string Name = "Name";
        /// <summary>
        /// The BrowseName for the NameNodeIdDataType component.
        /// </summary>
        public const string NameNodeIdDataType = "NameNodeIdDataType";
        /// <summary>
        /// The BrowseName for the NextOperatingCycles component.
        /// </summary>
        public const string NextOperatingCycles = "NextOperatingCycles";
        /// <summary>
        /// The BrowseName for the NextOperatingTime component.
        /// </summary>
        public const string NextOperatingTime = "NextOperatingTime";
        /// <summary>
        /// The BrowseName for the NodeVersion component.
        /// </summary>
        public const string NodeVersion = "NodeVersion";
        /// <summary>
        /// The BrowseName for the None component.
        /// </summary>
        public const string None = "None";
        /// <summary>
        /// The BrowseName for the NotAvailable component.
        /// </summary>
        public const string NotAvailable = "NotAvailable";
        /// <summary>
        /// The BrowseName for the NotExecuting component.
        /// </summary>
        public const string NotExecuting = "NotExecuting";
        /// <summary>
        /// The BrowseName for the Open component.
        /// </summary>
        public const string Open = "Open";
        /// <summary>
        /// The BrowseName for the Opened component.
        /// </summary>
        public const string Opened = "Opened";
        /// <summary>
        /// The BrowseName for the OpenedToClosed component.
        /// </summary>
        public const string OpenedToClosed = "OpenedToClosed";
        /// <summary>
        /// The BrowseName for the Operating component.
        /// </summary>
        public const string Operating = "Operating";
        /// <summary>
        /// The BrowseName for the OperatingToMaintenance component.
        /// </summary>
        public const string OperatingToMaintenance = "OperatingToMaintenance";
        /// <summary>
        /// The BrowseName for the OperatingToShutdown component.
        /// </summary>
        public const string OperatingToShutdown = "OperatingToShutdown";
        /// <summary>
        /// The BrowseName for the OperatingToStandby component.
        /// </summary>
        public const string OperatingToStandby = "OperatingToStandby";
        /// <summary>
        /// The BrowseName for the OperationCounters component.
        /// </summary>
        public const string OperationCounters = "OperationCounters";
        /// <summary>
        /// The BrowseName for the Operational component.
        /// </summary>
        public const string Operational = "Operational";
        /// <summary>
        /// The BrowseName for the OperationalContains component.
        /// </summary>
        public const string OperationalContains = "OperationalContains";
        /// <summary>
        /// The BrowseName for the OperationalLocation component.
        /// </summary>
        public const string OperationalLocation = "OperationalLocation";
        /// <summary>
        /// The BrowseName for the OperationalLocations component.
        /// </summary>
        public const string OperationalLocations = "OperationalLocations";
        /// <summary>
        /// The BrowseName for the OutOfMemoryConditionClassType component.
        /// </summary>
        public const string OutOfMemoryConditionClassType = "OutOfMemoryConditionClassType";
        /// <summary>
        /// The BrowseName for the OutOfResourcesConditionClassType component.
        /// </summary>
        public const string OutOfResourcesConditionClassType = "OutOfResourcesConditionClassType";
        /// <summary>
        /// The BrowseName for the OutOfService component.
        /// </summary>
        public const string OutOfService = "OutOfService";
        /// <summary>
        /// The BrowseName for the OverTemperatureConditionClassType component.
        /// </summary>
        public const string OverTemperatureConditionClassType = "OverTemperatureConditionClassType";
        /// <summary>
        /// The BrowseName for the PartsOfAssetReplaced component.
        /// </summary>
        public const string PartsOfAssetReplaced = "PartsOfAssetReplaced";
        /// <summary>
        /// The BrowseName for the PartsOfAssetServiced component.
        /// </summary>
        public const string PartsOfAssetServiced = "PartsOfAssetServiced";
        /// <summary>
        /// The BrowseName for the PidControllerParameterType component.
        /// </summary>
        public const string PidControllerParameterType = "PidControllerParameterType";
        /// <summary>
        /// The BrowseName for the Planned component.
        /// </summary>
        public const string Planned = "Planned";
        /// <summary>
        /// The BrowseName for the PlannedDate component.
        /// </summary>
        public const string PlannedDate = "PlannedDate";
        /// <summary>
        /// The BrowseName for the PotentialRootCauses component.
        /// </summary>
        public const string PotentialRootCauses = "PotentialRootCauses";
        /// <summary>
        /// The BrowseName for the Powerup component.
        /// </summary>
        public const string Powerup = "Powerup";
        /// <summary>
        /// The BrowseName for the PowerupToOperating component.
        /// </summary>
        public const string PowerupToOperating = "PowerupToOperating";
        /// <summary>
        /// The BrowseName for the Processing component.
        /// </summary>
        public const string Processing = "Processing";
        /// <summary>
        /// The BrowseName for the ProgramManager component.
        /// </summary>
        public const string ProgramManager = "ProgramManager";
        /// <summary>
        /// The BrowseName for the ProgramManagerType component.
        /// </summary>
        public const string ProgramManagerType = "ProgramManagerType";
        /// <summary>
        /// The BrowseName for the ProgramTemplate component.
        /// </summary>
        public const string ProgramTemplate = "ProgramTemplate";
        /// <summary>
        /// The BrowseName for the ProgramTemplateSet component.
        /// </summary>
        public const string ProgramTemplateSet = "ProgramTemplateSet";
        /// <summary>
        /// The BrowseName for the ProgramTemplateSetType component.
        /// </summary>
        public const string ProgramTemplateSetType = "ProgramTemplateSetType";
        /// <summary>
        /// The BrowseName for the ProgramTemplateType component.
        /// </summary>
        public const string ProgramTemplateType = "ProgramTemplateType";
        /// <summary>
        /// The BrowseName for the Properties component.
        /// </summary>
        public const string Properties = "Properties";
        /// <summary>
        /// The BrowseName for the QualificationOfPersonnel component.
        /// </summary>
        public const string QualificationOfPersonnel = "QualificationOfPersonnel";
        /// <summary>
        /// The BrowseName for the RatebasedAccumulatingControlFunctionType component.
        /// </summary>
        public const string RatebasedAccumulatingControlFunctionType = "RatebasedAccumulatingControlFunctionType";
        /// <summary>
        /// The BrowseName for the RawValue component.
        /// </summary>
        public const string RawValue = "RawValue";
        /// <summary>
        /// The BrowseName for the RecurrencePeriod component.
        /// </summary>
        public const string RecurrencePeriod = "RecurrencePeriod";
        /// <summary>
        /// The BrowseName for the Remove component.
        /// </summary>
        public const string Remove = "Remove";
        /// <summary>
        /// The BrowseName for the RemoveLink component.
        /// </summary>
        public const string RemoveLink = "RemoveLink";
        /// <summary>
        /// The BrowseName for the RepairConditionClassType component.
        /// </summary>
        public const string RepairConditionClassType = "RepairConditionClassType";
        /// <summary>
        /// The BrowseName for the Reset component.
        /// </summary>
        public const string Reset = "Reset";
        /// <summary>
        /// The BrowseName for the ResetTotalizer component.
        /// </summary>
        public const string ResetTotalizer = "ResetTotalizer";
        /// <summary>
        /// The BrowseName for the Resetting component.
        /// </summary>
        public const string Resetting = "Resetting";
        /// <summary>
        /// The BrowseName for the ResettingToIdle component.
        /// </summary>
        public const string ResettingToIdle = "ResettingToIdle";
        /// <summary>
        /// The BrowseName for the ResultFileSetType component.
        /// </summary>
        public const string ResultFileSetType = "ResultFileSetType";
        /// <summary>
        /// The BrowseName for the ResultFileType component.
        /// </summary>
        public const string ResultFileType = "ResultFileType";
        /// <summary>
        /// The BrowseName for the ResultSet component.
        /// </summary>
        public const string ResultSet = "ResultSet";
        /// <summary>
        /// The BrowseName for the ResultSetType component.
        /// </summary>
        public const string ResultSetType = "ResultSetType";
        /// <summary>
        /// The BrowseName for the ResultType component.
        /// </summary>
        public const string ResultType = "ResultType";
        /// <summary>
        /// The BrowseName for the RootCauseDataType component.
        /// </summary>
        public const string RootCauseDataType = "RootCauseDataType";
        /// <summary>
        /// The BrowseName for the Running component.
        /// </summary>
        public const string Running = "Running";
        /// <summary>
        /// The BrowseName for the RunningStateMachine component.
        /// </summary>
        public const string RunningStateMachine = "RunningStateMachine";
        /// <summary>
        /// The BrowseName for the RunningStateMachineType component.
        /// </summary>
        public const string RunningStateMachineType = "RunningStateMachineType";
        /// <summary>
        /// The BrowseName for the RunningToAborting component.
        /// </summary>
        public const string RunningToAborting = "RunningToAborting";
        /// <summary>
        /// The BrowseName for the RunningToStopping component.
        /// </summary>
        public const string RunningToStopping = "RunningToStopping";
        /// <summary>
        /// The BrowseName for the SampleIds component.
        /// </summary>
        public const string SampleIds = "SampleIds";
        /// <summary>
        /// The BrowseName for the SampleInfoType component.
        /// </summary>
        public const string SampleInfoType = "SampleInfoType";
        /// <summary>
        /// The BrowseName for the SelfTestFailureConditionClassType component.
        /// </summary>
        public const string SelfTestFailureConditionClassType = "SelfTestFailureConditionClassType";
        /// <summary>
        /// The BrowseName for the SensorValue component.
        /// </summary>
        public const string SensorValue = "SensorValue";
        /// <summary>
        /// The BrowseName for the ServicingConditionClassType component.
        /// </summary>
        public const string ServicingConditionClassType = "ServicingConditionClassType";
        /// <summary>
        /// The BrowseName for the SetType component.
        /// </summary>
        public const string SetType = "SetType";
        /// <summary>
        /// The BrowseName for the Setup component.
        /// </summary>
        public const string Setup = "Setup";
        /// <summary>
        /// The BrowseName for the Shutdown component.
        /// </summary>
        public const string Shutdown = "Shutdown";
        /// <summary>
        /// The BrowseName for the Standby component.
        /// </summary>
        public const string Standby = "Standby";
        /// <summary>
        /// The BrowseName for the StandbyToOperating component.
        /// </summary>
        public const string StandbyToOperating = "StandbyToOperating";
        /// <summary>
        /// The BrowseName for the Start component.
        /// </summary>
        public const string Start = "Start";
        /// <summary>
        /// The BrowseName for the StartProgram component.
        /// </summary>
        public const string StartProgram = "StartProgram";
        /// <summary>
        /// The BrowseName for the StartStopControlFunctionType component.
        /// </summary>
        public const string StartStopControlFunctionType = "StartStopControlFunctionType";
        /// <summary>
        /// The BrowseName for the Started component.
        /// </summary>
        public const string Started = "Started";
        /// <summary>
        /// The BrowseName for the Starting component.
        /// </summary>
        public const string Starting = "Starting";
        /// <summary>
        /// The BrowseName for the StartingToExecute component.
        /// </summary>
        public const string StartingToExecute = "StartingToExecute";
        /// <summary>
        /// The BrowseName for the StartingToHolding component.
        /// </summary>
        public const string StartingToHolding = "StartingToHolding";
        /// <summary>
        /// The BrowseName for the StateMachine component.
        /// </summary>
        public const string StateMachine = "StateMachine";
        /// <summary>
        /// The BrowseName for the Status component.
        /// </summary>
        public const string Status = "Status";
        /// <summary>
        /// The BrowseName for the Stop component.
        /// </summary>
        public const string Stop = "Stop";
        /// <summary>
        /// The BrowseName for the Stopped component.
        /// </summary>
        public const string Stopped = "Stopped";
        /// <summary>
        /// The BrowseName for the StoppedToRunning component.
        /// </summary>
        public const string StoppedToRunning = "StoppedToRunning";
        /// <summary>
        /// The BrowseName for the Stopping component.
        /// </summary>
        public const string Stopping = "Stopping";
        /// <summary>
        /// The BrowseName for the StoppingToStopped component.
        /// </summary>
        public const string StoppingToStopped = "StoppingToStopped";
        /// <summary>
        /// The BrowseName for the SupervisoryTaskId component.
        /// </summary>
        public const string SupervisoryTaskId = "SupervisoryTaskId";
        /// <summary>
        /// The BrowseName for the SupportedPropertiesSet component.
        /// </summary>
        public const string SupportedPropertiesSet = "SupportedPropertiesSet";
        /// <summary>
        /// The BrowseName for the SupportedPropertiesSetType  component.
        /// </summary>
        public const string SupportedPropertiesSetType_ = "SupportedPropertiesSetType ";
        /// <summary>
        /// The BrowseName for the SupportedPropertyType component.
        /// </summary>
        public const string SupportedPropertyType = "SupportedPropertyType";
        /// <summary>
        /// The BrowseName for the Suspend component.
        /// </summary>
        public const string Suspend = "Suspend";
        /// <summary>
        /// The BrowseName for the Suspended component.
        /// </summary>
        public const string Suspended = "Suspended";
        /// <summary>
        /// The BrowseName for the SuspendedToHolding component.
        /// </summary>
        public const string SuspendedToHolding = "SuspendedToHolding";
        /// <summary>
        /// The BrowseName for the SuspendedToUnsuspending component.
        /// </summary>
        public const string SuspendedToUnsuspending = "SuspendedToUnsuspending";
        /// <summary>
        /// The BrowseName for the Suspending component.
        /// </summary>
        public const string Suspending = "Suspending";
        /// <summary>
        /// The BrowseName for the SuspendingToHolding component.
        /// </summary>
        public const string SuspendingToHolding = "SuspendingToHolding";
        /// <summary>
        /// The BrowseName for the SuspendingToSuspended component.
        /// </summary>
        public const string SuspendingToSuspended = "SuspendingToSuspended";
        /// <summary>
        /// The BrowseName for the TargetValue component.
        /// </summary>
        public const string TargetValue = "TargetValue";
        /// <summary>
        /// The BrowseName for the TargetValueSet component.
        /// </summary>
        public const string TargetValueSet = "TargetValueSet";
        /// <summary>
        /// The BrowseName for the TemplateId component.
        /// </summary>
        public const string TemplateId = "TemplateId";
        /// <summary>
        /// The BrowseName for the TimerFunctionType component.
        /// </summary>
        public const string TimerFunctionType = "TimerFunctionType";
        /// <summary>
        /// The BrowseName for the ToComplete component.
        /// </summary>
        public const string ToComplete = "ToComplete";
        /// <summary>
        /// The BrowseName for the TotalPauseTime component.
        /// </summary>
        public const string TotalPauseTime = "TotalPauseTime";
        /// <summary>
        /// The BrowseName for the TotalRuntime component.
        /// </summary>
        public const string TotalRuntime = "TotalRuntime";
        /// <summary>
        /// The BrowseName for the TotalizedValue component.
        /// </summary>
        public const string TotalizedValue = "TotalizedValue";
        /// <summary>
        /// The BrowseName for the Tuning component.
        /// </summary>
        public const string Tuning = "Tuning";
        /// <summary>
        /// The BrowseName for the TwoStateDiscreteControlFunctionType component.
        /// </summary>
        public const string TwoStateDiscreteControlFunctionType = "TwoStateDiscreteControlFunctionType";
        /// <summary>
        /// The BrowseName for the TwoStateDiscreteSensorFunctionType component.
        /// </summary>
        public const string TwoStateDiscreteSensorFunctionType = "TwoStateDiscreteSensorFunctionType";
        /// <summary>
        /// The BrowseName for the Type component.
        /// </summary>
        public const string Type = "Type";
        /// <summary>
        /// The BrowseName for the TypeDictionary component.
        /// </summary>
        public const string TypeDictionary_XmlSchema = "TypeDictionary";
        /// <summary>
        /// The BrowseName for the URL component.
        /// </summary>
        public const string URL = "URL";
        /// <summary>
        /// The BrowseName for the Unhold component.
        /// </summary>
        public const string Unhold = "Unhold";
        /// <summary>
        /// The BrowseName for the Unholding component.
        /// </summary>
        public const string Unholding = "Unholding";
        /// <summary>
        /// The BrowseName for the UnholdingToExecute component.
        /// </summary>
        public const string UnholdingToExecute = "UnholdingToExecute";
        /// <summary>
        /// The BrowseName for the UnholdingToHolding component.
        /// </summary>
        public const string UnholdingToHolding = "UnholdingToHolding";
        /// <summary>
        /// The BrowseName for the Unlock component.
        /// </summary>
        public const string Unlock = "Unlock";
        /// <summary>
        /// The BrowseName for the Unsuspend component.
        /// </summary>
        public const string Unsuspend = "Unsuspend";
        /// <summary>
        /// The BrowseName for the Unsuspending component.
        /// </summary>
        public const string Unsuspending = "Unsuspending";
        /// <summary>
        /// The BrowseName for the UnsuspendingToExecute component.
        /// </summary>
        public const string UnsuspendingToExecute = "UnsuspendingToExecute";
        /// <summary>
        /// The BrowseName for the UnsuspendingToHolding component.
        /// </summary>
        public const string UnsuspendingToHolding = "UnsuspendingToHolding";
        /// <summary>
        /// The BrowseName for the Upload component.
        /// </summary>
        public const string Upload = "Upload";
        /// <summary>
        /// The BrowseName for the User component.
        /// </summary>
        public const string User = "User";
        /// <summary>
        /// The BrowseName for the VariableSet component.
        /// </summary>
        public const string VariableSet = "VariableSet";
        /// <summary>
        /// The BrowseName for the VariableSetType component.
        /// </summary>
        public const string VariableSetType = "VariableSetType";
        /// <summary>
        /// The BrowseName for the Version component.
        /// </summary>
        public const string Version = "Version";
        /// <summary>
        /// The BrowseName for the YearOfConstruction component.
        /// </summary>
        public const string YearOfConstruction = "YearOfConstruction";
        /// <summary>
        /// The BrowseName for the http://opcfoundation.org/UA/AMB/ component.
        /// </summary>
        public const string http___opcfoundation_org_UA_AMB_ = "http://opcfoundation.org/UA/AMB/";
        /// <summary>
        /// The BrowseName for the http://opcfoundation.org/UA/LADS/ component.
        /// </summary>
        public const string http___opcfoundation_org_UA_lads_ = "http://opcfoundation.org/UA/LADS/";
        /// <summary>
        /// The BrowseName for the http://opcfoundation.org/UA/Machinery/ component.
        /// </summary>
        public const string http___opcfoundation_org_UA_Machinery_ = "http://opcfoundation.org/UA/Machinery/";
    }
    #endregion

    #region Namespace Declarations
    /// <summary>
    /// Defines constants for all namespaces referenced by the Model.
    /// </summary>
    public static partial class Namespaces
    {
        /// <summary>
        /// The URI for the OpcUa namespace (.NET code namespace is 'Opc.Ua').
        /// </summary>
        public const string OpcUa = "http://opcfoundation.org/UA/";

        /// <summary>
        /// The URI for the OpcUaXsd namespace (.NET code namespace is 'Opc.Ua').
        /// </summary>
        public const string OpcUaXsd = "http://opcfoundation.org/UA/2008/02/Types.xsd";

        /// <summary>
        /// The URI for the UaBase namespace.
        /// </summary>
        public const string UaBase = "http://opcfoundation.org/UA/AMB/";

        /// <summary>
        /// The URI for the UaBaseXsd namespace.
        /// </summary>
        public const string UaBaseXsd = "http://opcfoundation.org/UA/AMB/Types.xsd";

        /// <summary>
        /// The URI for the UaBase namespace.
        /// </summary>
        public const string UaBase = "http://opcfoundation.org/UA/Machinery/";

        /// <summary>
        /// The URI for the UaBaseXsd namespace.
        /// </summary>
        public const string UaBaseXsd = "http://opcfoundation.org/UA/Machinery/Types.xsd";

        /// <summary>
        /// The URI for the Lads namespace.
        /// </summary>
        public const string Lads = "http://opcfoundation.org/UA/LADS/";

        /// <summary>
        /// The URI for the LadsXsd namespace.
        /// </summary>
        public const string LadsXsd = "http://opcfoundation.org/UA/LADS/Types.xsd";
    }
    #endregion
}

