/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.8, using .NET Server 3.2.0 template (version 0)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**
**     Generated by gresser <enrico.gresser@brand.de>
** </auto-generated>
**
** Copyright (c) 2006-2023 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://opcfoundation.org/UA/Machinery/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
** Created: 25.03.2023
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using ;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;

namespace UnifiedAutomation.UaBase
{
    #region IMachineTagNameplateModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Machinery/v101/docs/8.5
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.IMachineTagNameplateType, NamespaceUri=UnifiedAutomation.UaBase.Namespaces.UaBase)]
    public partial class IMachineTagNameplateModel : ITagNameplateModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="IMachineTagNameplateModel" /> class.
        /// </summary>
        public IMachineTagNameplateModel() : this((IMachineTagNameplateModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IMachineTagNameplateModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public IMachineTagNameplateModel(IMachineTagNameplateModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.Location != null)
                {
                    Location = template.Location.Clone() as string;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Location
        /// </summary>
        /// <details>
        /// To be used by end users to store the location of the machine in a scheme specific to the end user Servers shall support at least 60 Unicode characters for the clients writing this value, this means clients can expect to be able to write strings with a length of 60 Unicode characters into that field.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public string Location { get; set; }


        #endregion
    }
    #endregion


    #region IMachineryItemVendorNameplateModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Machinery/v101/docs/8.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.IMachineryItemVendorNameplateType, NamespaceUri=UnifiedAutomation.UaBase.Namespaces.UaBase)]
    public partial class IMachineryItemVendorNameplateModel : IVendorNameplateModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="IMachineryItemVendorNameplateModel" /> class.
        /// </summary>
        public IMachineryItemVendorNameplateModel() : this((IMachineryItemVendorNameplateModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IMachineryItemVendorNameplateModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public IMachineryItemVendorNameplateModel(IMachineryItemVendorNameplateModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.InitialOperationDate != null)
                {
                    InitialOperationDate = template.InitialOperationDate;
                }
                Manufacturer = template.Manufacturer == null ? null : template.Manufacturer.Clone() as LocalizedText;
                if (template.MonthOfConstruction != null)
                {
                    MonthOfConstruction = template.MonthOfConstruction;
                }
                SerialNumber = template.SerialNumber == null ? null : template.SerialNumber.Clone() as string;
                if (template.YearOfConstruction != null)
                {
                    YearOfConstruction = template.YearOfConstruction;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the InitialOperationDate
        /// </summary>
        /// <details>
        /// The date, when the MachineryItem was switched on the first time after it has left the manufacturer plant.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public DateTime? InitialOperationDate { get; set; }

        /// <summary>
        /// Gets or sets the Manufacturer
        /// </summary>
        /// <details>
        /// A human-readable, localized name of the manufacturer of the MachineryItem.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new LocalizedText Manufacturer
        {
            get {return (LocalizedText)base.Manufacturer;}
            set {base.Manufacturer = value;}
        }

        /// <summary>
        /// Gets or sets the MonthOfConstruction
        /// </summary>
        /// <details>
        /// The month in which the manufacturing process of the MachineryItem has been completed. It shall be a number between 1 and 12, representing the month from January to December.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public byte? MonthOfConstruction { get; set; }

        /// <summary>
        /// Gets or sets the SerialNumber
        /// </summary>
        /// <details>
        /// A string containing a unique production number of the manufacturer of the MachineryItem. The global uniqueness of the serial number is only given in the context of the manufacturer, and potentially the model. The value shall not change during the life-cycle of the MachineryItem.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string SerialNumber
        {
            get {return (string)base.SerialNumber;}
            set {base.SerialNumber = value;}
        }

        /// <summary>
        /// Gets or sets the YearOfConstruction
        /// </summary>
        /// <details>
        /// The year (Gregorian calendar) in which the manufacturing process of the MachineryItem has been completed. It shall be a four-digit number and never change during the life-cycle of a MachineryItem.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public ushort? YearOfConstruction { get; set; }


        #endregion
    }
    #endregion


    #region IMachineVendorNameplateModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Machinery/v101/docs/8.4
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.IMachineVendorNameplateType, NamespaceUri=UnifiedAutomation.UaBase.Namespaces.UaBase)]
    public partial class IMachineVendorNameplateModel : IMachineryItemVendorNameplateModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="IMachineVendorNameplateModel" /> class.
        /// </summary>
        public IMachineVendorNameplateModel() : this((IMachineVendorNameplateModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IMachineVendorNameplateModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public IMachineVendorNameplateModel(IMachineVendorNameplateModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                ProductInstanceUri = template.ProductInstanceUri == null ? null : template.ProductInstanceUri.Clone() as string;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the ProductInstanceUri
        /// </summary>
        /// <details>
        /// A globally unique resource identifier provided by the manufacturer of the machine
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string ProductInstanceUri
        {
            get {return (string)base.ProductInstanceUri;}
            set {base.ProductInstanceUri = value;}
        }


        #endregion
    }
    #endregion


    #region MachineryItemIdentificationModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Machinery/v101/docs/8.3
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MachineryItemIdentificationType, NamespaceUri=UnifiedAutomation.UaBase.Namespaces.UaBase)]
    public partial class MachineryItemIdentificationModel : FunctionalGroupModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineryItemIdentificationModel" /> class.
        /// </summary>
        public MachineryItemIdentificationModel() : this((MachineryItemIdentificationModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MachineryItemIdentificationModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MachineryItemIdentificationModel(MachineryItemIdentificationModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.AssetId != null)
                {
                    AssetId = template.AssetId.Clone() as string;
                }
                if (template.ComponentName != null)
                {
                    ComponentName = template.ComponentName.Clone() as LocalizedText;
                }
                if (template.DeviceClass != null)
                {
                    DeviceClass = template.DeviceClass.Clone() as string;
                }
                if (template.HardwareRevision != null)
                {
                    HardwareRevision = template.HardwareRevision.Clone() as string;
                }
                if (template.InitialOperationDate != null)
                {
                    InitialOperationDate = template.InitialOperationDate;
                }
                Manufacturer = template.Manufacturer == null ? null : template.Manufacturer.Clone() as LocalizedText;
                if (template.ManufacturerUri != null)
                {
                    ManufacturerUri = template.ManufacturerUri.Clone() as string;
                }
                if (template.Model != null)
                {
                    Model = template.Model.Clone() as LocalizedText;
                }
                if (template.MonthOfConstruction != null)
                {
                    MonthOfConstruction = template.MonthOfConstruction;
                }
                if (template.ProductCode != null)
                {
                    ProductCode = template.ProductCode.Clone() as string;
                }
                if (template.ProductInstanceUri != null)
                {
                    ProductInstanceUri = template.ProductInstanceUri.Clone() as string;
                }
                SerialNumber = template.SerialNumber == null ? null : template.SerialNumber.Clone() as string;
                if (template.SoftwareRevision != null)
                {
                    SoftwareRevision = template.SoftwareRevision.Clone() as string;
                }
                if (template.YearOfConstruction != null)
                {
                    YearOfConstruction = template.YearOfConstruction;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the AssetId
        /// </summary>
        /// <details>
        /// To be used by end users to store a unique identification in the context of their overall application. Servers shall support at least 40 Unicode characters for the clients writing this value, this means clients can expect to be able to write strings with a length of 40 Unicode characters into that field.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or sets the ComponentName
        /// </summary>
        /// <details>
        /// To be used by end users to store a human-readable localized text for the MachineryItem. The minimum number of locales supported for this property shall be two. Servers shall support at least 40 Unicode characters for the clients writing the text part of each locale, this means clients can expect to be able to write texts with a length of 40 Unicode characters into that field.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public LocalizedText ComponentName { get; set; }

        /// <summary>
        /// Gets or sets the DeviceClass
        /// </summary>
        /// <details>
        /// Indicates in which domain or for what purpose the MachineryItem is used.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public string DeviceClass { get; set; }

        /// <summary>
        /// Gets or sets the HardwareRevision
        /// </summary>
        /// <details>
        /// A string representation of the revision level of the hardware of a MachineryItem. Hardware is physical equipment, as opposed to programs, procedures, rules and associated documentation. Many machines will not provide such information due to the modular and configurable nature of the machine.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public string HardwareRevision { get; set; }

        /// <summary>
        /// Gets or sets the InitialOperationDate
        /// </summary>
        /// <details>
        /// The date, when the MachineryItem was switched on the first time after it has left the manufacturer plant.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public DateTime? InitialOperationDate { get; set; }

        /// <summary>
        /// Gets or sets the Manufacturer
        /// </summary>
        /// <details>
        /// A human-readable, localized name of the manufacturer of the MachineryItem.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public LocalizedText Manufacturer { get; set; }

        /// <summary>
        /// Gets or sets the ManufacturerUri
        /// </summary>
        /// <details>
        /// A globally unique identifier of the manufacturer of the MachineryItem.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public string ManufacturerUri { get; set; }

        /// <summary>
        /// Gets or sets the Model
        /// </summary>
        /// <details>
        /// A human-readable, localized name of the model of the MachineryItem.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public LocalizedText Model { get; set; }

        /// <summary>
        /// Gets or sets the MonthOfConstruction
        /// </summary>
        /// <details>
        /// The month in which the manufacturing process of the MachineryItem has been completed. It shall be a number between 1 and 12, representing the month from January to December.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public byte? MonthOfConstruction { get; set; }

        /// <summary>
        /// Gets or sets the ProductCode
        /// </summary>
        /// <details>
        /// A machine-readable string of the model of the MachineryItem, that might include options like the hardware configuration of the model. This information might be provided by the ERP system of the vendor. For example, it can be used as order information.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or sets the ProductInstanceUri
        /// </summary>
        /// <details>
        /// A globally unique resource identifier provided by the manufacturer of the MachineryItem.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public string ProductInstanceUri { get; set; }

        /// <summary>
        /// Gets or sets the SerialNumber
        /// </summary>
        /// <details>
        /// A string containing a unique production number of the manufacturer of the MachineryItem. The global uniqueness of the serial number is only given in the context of the manufacturer, and potentially the model. The value shall not change during the life-cycle of the MachineryItem.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or sets the SoftwareRevision
        /// </summary>
        /// <details>
        /// A string representation of the revision level of a MachineryItem. In most cases, MachineryItems consist of several software components. In that case, information about the software components might be provided as additional information in the address space, including individual revision information. In that case, this property is either not provided or provides an overall software revision level. The value might change during the life-cycle of a MachineryItem.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public string SoftwareRevision { get; set; }

        /// <summary>
        /// Gets or sets the YearOfConstruction
        /// </summary>
        /// <details>
        /// The year (Gregorian calendar) in which the manufacturing process of the MachineryItem has been completed. It shall be a four-digit number and never change during the life-cycle of a MachineryItem.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public ushort? YearOfConstruction { get; set; }


        #endregion
    }
    #endregion


    #region MachineIdentificationModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Machinery/v101/docs/8.6
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MachineIdentificationType, NamespaceUri=UnifiedAutomation.UaBase.Namespaces.UaBase)]
    public partial class MachineIdentificationModel : MachineryItemIdentificationModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineIdentificationModel" /> class.
        /// </summary>
        public MachineIdentificationModel() : this((MachineIdentificationModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MachineIdentificationModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MachineIdentificationModel(MachineIdentificationModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.Location != null)
                {
                    Location = template.Location.Clone() as string;
                }
                ProductInstanceUri = template.ProductInstanceUri == null ? null : template.ProductInstanceUri.Clone() as string;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Location
        /// </summary>
        /// <details>
        /// To be used by end users to store the location of the machine in a scheme specific to the end user. Servers shall support at least 60 Unicode characters for the clients writing this value, this means clients can expect to be able to write strings with a length of 60 Unicode characters into that field.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.UaBase)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the ProductInstanceUri
        /// </summary>
        /// <details>
        /// A globally unique resource identifier provided by the manufacturer of the machine
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public new string ProductInstanceUri
        {
            get {return (string)base.ProductInstanceUri;}
            set {base.ProductInstanceUri = value;}
        }


        #endregion
    }
    #endregion


    #region MachineryComponentIdentificationModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Machinery/v101/docs/10.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MachineryComponentIdentificationType, NamespaceUri=UnifiedAutomation.UaBase.Namespaces.UaBase)]
    public partial class MachineryComponentIdentificationModel : MachineryItemIdentificationModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineryComponentIdentificationModel" /> class.
        /// </summary>
        public MachineryComponentIdentificationModel() : this((MachineryComponentIdentificationModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MachineryComponentIdentificationModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MachineryComponentIdentificationModel(MachineryComponentIdentificationModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.DeviceRevision != null)
                {
                    DeviceRevision = template.DeviceRevision.Clone() as string;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the DeviceRevision
        /// </summary>
        /// <details>
        /// A string representation of the overall revision level of the component. Often, it is increased when either the SoftwareRevision and / or the HardwareRevision of the component is increased. As an example, it can be used in ERP systems together with the ProductCode.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.)]
        public string DeviceRevision { get; set; }


        #endregion
    }
    #endregion


    #region MachineComponentsModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Machinery/v101/docs/11.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MachineComponentsType, NamespaceUri=UnifiedAutomation.UaBase.Namespaces.UaBase)]
    public partial class MachineComponentsModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineComponentsModel" /> class.
        /// </summary>
        public MachineComponentsModel() : this((MachineComponentsModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MachineComponentsModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MachineComponentsModel(MachineComponentsModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region MachineryItemState_StateMachineModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Machinery/v101/docs/12.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MachineryItemState_StateMachineType, NamespaceUri=UnifiedAutomation.UaBase.Namespaces.UaBase)]
    public partial class MachineryItemState_StateMachineModel : FiniteStateMachineModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineryItemState_StateMachineModel" /> class.
        /// </summary>
        public MachineryItemState_StateMachineModel() : this((MachineryItemState_StateMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MachineryItemState_StateMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MachineryItemState_StateMachineModel(MachineryItemState_StateMachineModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region MachineryOperationModeStateMachineModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Machinery/v101/docs/13.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MachineryOperationModeStateMachineType, NamespaceUri=UnifiedAutomation.UaBase.Namespaces.UaBase)]
    public partial class MachineryOperationModeStateMachineModel : FiniteStateMachineModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineryOperationModeStateMachineModel" /> class.
        /// </summary>
        public MachineryOperationModeStateMachineModel() : this((MachineryOperationModeStateMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MachineryOperationModeStateMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MachineryOperationModeStateMachineModel(MachineryOperationModeStateMachineModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion



}
